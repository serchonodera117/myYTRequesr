<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tweetinvi.Core</name>
    </assembly>
    <members>
        <member name="T:Tweetinvi.Core.Attributes.JsonEnumStringAttribute">
            <summary>
            Attribute against an enum value from Twitter exposing it's JSON string equivelant
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Attributes.LanguageAttribute">
            <summary>
            Attribute allowing to link a language with its Twitter code.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Attributes.LanguageAttribute.Name">
            <summary>
            Name of the language in English.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Attributes.LanguageAttribute.Names">
            <summary>
            Language names also reference by the code.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Attributes.LanguageAttribute.Code">
            <summary>
            Primary language code.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Attributes.LanguageAttribute.Codes">
            <summary>
            All available language codes.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Attributes.LanguageAttribute.HasMultipleCodes">
            <summary>
            Does Twitter represent this language with different codes.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Attributes.ITwitterEndpointAttribute.EndpointURL">
            <summary>
            Endpoint url matcher.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Attributes.ITwitterEndpointAttribute.IsRegex">
            <summary>
            Specify the the EndpointURL parameter is a regex.
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Attributes.TwitterEndpointAttribute">
            <summary>
            Attribute indicating how to match an endpoint rate limits with a specific url
            as well as the number of available requests for this endpoint.
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.International_Date_Line_West">
            <summary>
            (UTC-12:00) International Date Line West
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Coordinated_Universal_Time_11">
            <summary>
            (UTC-11:00) Coordinated Universal Time-11
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Hawaii">
            <summary>
            (UTC-10:00) Hawaii
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Alaska">
            <summary>
            (UTC-09:00) Alaska
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Baja_California">
            <summary>
            (UTC-08:00) Baja California
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Pacific_Time_US_Canada">
            <summary>
            (UTC-08:00) Pacific Time (US &amp; Canada)
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Arizona">
            <summary>
            (UTC-07:00) Arizona
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Chihuahua_La_Paz_Mazatlan">
            <summary>
            (UTC-07:00) Chihuahua, La Paz, Mazatlan
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Mountain_Time_US_Canada">
            <summary>
            (UTC-07:00) Mountain Time (US &amp; Canada)
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Central_America">
            <summary>
            (UTC-06:00) Central America
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Central_Time_US_Canada">
            <summary>
            (UTC-06:00) Central Time (US &amp; Canada)
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Guadalajara_Mexico_City_Monterrey">
            <summary>
            (UTC-06:00) Guadalajara, Mexico City, Monterrey
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Saskatchewan">
            <summary>
            (UTC-06:00) Saskatchewan
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Bogota_Lima_Quito_Rio_Branco">
            <summary>
            (UTC-05:00) Bogota, Lima, Quito, Rio Branco
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Eastern_Time_US_Canada">
            <summary>
            (UTC-05:00) Eastern Time (US &amp; Canada)
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Indiana_East">
            <summary>
            (UTC-05:00) Indiana (East)
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Caracas">
            <summary>
            (UTC-04:30) Caracas
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Asuncion">
            <summary>
            (UTC-04:00) Asuncion
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Atlantic_Time_Canada">
            <summary>
            (UTC-04:00) Atlantic Time (Canada)
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Cuiaba">
            <summary>
            (UTC-04:00) Cuiaba
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Georgetown_La_Paz_Manaus_San_Juan">
            <summary>
            (UTC-04:00) Georgetown, La Paz, Manaus, San Juan
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Santiago">
            <summary>
            (UTC-04:00) Santiago
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Newfoundland">
            <summary>
            (UTC-03:30) Newfoundland
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Brasilia">
            <summary>
            (UTC-03:00) Brasilia
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Buenos_Aires">
            <summary>
            (UTC-03:00) Buenos Aires
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Cayenne_Fortaleza">
            <summary>
            (UTC-03:00) Cayenne, Fortaleza
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Greenland">
            <summary>
            (UTC-03:00) Greenland
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Montevideo">
            <summary>
            (UTC-03:00) Montevideo
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Salvador">
            <summary>
            (UTC-03:00) Salvador
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Coordinated_Universal_Time_02">
            <summary>
            (UTC-02:00) Coordinated Universal Time-02
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Mid_Atlantic_Old">
            <summary>
            (UTC-02:00) Mid-Atlantic - Old
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Azores">
            <summary>
            (UTC-01:00) Azores
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Cape_Verde_Is_">
            <summary>
            (UTC-01:00) Cape Verde Is.
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Casablanca">
            <summary>
            (UTC) Casablanca
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Coordinated_Universal_Time">
            <summary>
            (UTC) Coordinated Universal Time
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Dublin_Edinburgh_Lisbon_London">
            <summary>
            (UTC) Dublin, Edinburgh, Lisbon, London
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Monrovia_Reykjavik">
            <summary>
            (UTC) Monrovia, Reykjavik
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Amsterdam_Berlin_Bern_Rome_Stockholm_Vienna">
            <summary>
            (UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Belgrade_Bratislava_Budapest_Ljubljana_Prague">
            <summary>
            (UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Brussels_Copenhagen_Madrid_Paris">
            <summary>
            (UTC+01:00) Brussels, Copenhagen, Madrid, Paris
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Sarajevo_Skopje_Warsaw_Zagreb">
            <summary>
            (UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.West_Central_Africa">
            <summary>
            (UTC+01:00) West Central Africa
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Windhoek">
            <summary>
            (UTC+01:00) Windhoek
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Amman">
            <summary>
            (UTC+02:00) Amman
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Athens_Bucharest">
            <summary>
            (UTC+02:00) Athens, Bucharest
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Beirut">
            <summary>
            (UTC+02:00) Beirut
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Cairo">
            <summary>
            (UTC+02:00) Cairo
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Damascus">
            <summary>
            (UTC+02:00) Damascus
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.E__Europe">
            <summary>
            (UTC+02:00) E. Europe
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Harare_Pretoria">
            <summary>
            (UTC+02:00) Harare, Pretoria
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Helsinki_Kyiv_Riga_Sofia_Tallinn_Vilnius">
            <summary>
            (UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Istanbul">
            <summary>
            (UTC+02:00) Istanbul
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Jerusalem">
            <summary>
            (UTC+02:00) Jerusalem
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Kaliningrad_RTZ_1">
            <summary>
            (UTC+02:00) Kaliningrad (RTZ 1)
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Tripoli">
            <summary>
            (UTC+02:00) Tripoli
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Baghdad">
            <summary>
            (UTC+03:00) Baghdad
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Kuwait_Riyadh">
            <summary>
            (UTC+03:00) Kuwait, Riyadh
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Minsk">
            <summary>
            (UTC+03:00) Minsk
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Moscow_St__Petersburg_Volgograd_RTZ_2">
            <summary>
            (UTC+03:00) Moscow, St. Petersburg, Volgograd (RTZ 2)
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Nairobi">
            <summary>
            (UTC+03:00) Nairobi
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Tehran">
            <summary>
            (UTC+03:30) Tehran
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Abu_Dhabi_Muscat">
            <summary>
            (UTC+04:00) Abu Dhabi, Muscat
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Baku">
            <summary>
            (UTC+04:00) Baku
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Izhevsk_Samara_RTZ_3">
            <summary>
            (UTC+04:00) Izhevsk, Samara (RTZ 3)
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Port_Louis">
            <summary>
            (UTC+04:00) Port Louis
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Tbilisi">
            <summary>
            (UTC+04:00) Tbilisi
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Yerevan">
            <summary>
            (UTC+04:00) Yerevan
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Kabul">
            <summary>
            (UTC+04:30) Kabul
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Ashgabat_Tashkent">
            <summary>
            (UTC+05:00) Ashgabat, Tashkent
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Ekaterinburg_RTZ_4">
            <summary>
            (UTC+05:00) Ekaterinburg (RTZ 4)
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Islamabad_Karachi">
            <summary>
            (UTC+05:00) Islamabad, Karachi
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Chennai_Kolkata_Mumbai_New_Delhi">
            <summary>
            (UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Sri_Jayawardenepura">
            <summary>
            (UTC+05:30) Sri Jayawardenepura
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Kathmandu">
            <summary>
            (UTC+05:45) Kathmandu
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Astana">
            <summary>
            (UTC+06:00) Astana
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Dhaka">
            <summary>
            (UTC+06:00) Dhaka
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Novosibirsk_RTZ_5">
            <summary>
            (UTC+06:00) Novosibirsk (RTZ 5)
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Yangon_Rangoon">
            <summary>
            (UTC+06:30) Yangon (Rangoon)
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Bangkok_Hanoi_Jakarta">
            <summary>
            (UTC+07:00) Bangkok, Hanoi, Jakarta
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Krasnoyarsk_RTZ_6">
            <summary>
            (UTC+07:00) Krasnoyarsk (RTZ 6)
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Beijing_Chongqing_Hong_Kong_Urumqi">
            <summary>
            (UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Irkutsk_RTZ_7">
            <summary>
            (UTC+08:00) Irkutsk (RTZ 7)
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Kuala_Lumpur_Singapore">
            <summary>
            (UTC+08:00) Kuala Lumpur, Singapore
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Perth">
            <summary>
            (UTC+08:00) Perth
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Taipei">
            <summary>
            (UTC+08:00) Taipei
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Ulaanbaatar">
            <summary>
            (UTC+08:00) Ulaanbaatar
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Osaka_Sapporo_Tokyo">
            <summary>
            (UTC+09:00) Osaka, Sapporo, Tokyo
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Seoul">
            <summary>
            (UTC+09:00) Seoul
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Yakutsk_RTZ_8">
            <summary>
            (UTC+09:00) Yakutsk (RTZ 8)
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Adelaide">
            <summary>
            (UTC+09:30) Adelaide
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Darwin">
            <summary>
            (UTC+09:30) Darwin
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Brisbane">
            <summary>
            (UTC+10:00) Brisbane
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Canberra_Melbourne_Sydney">
            <summary>
            (UTC+10:00) Canberra, Melbourne, Sydney
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Guam_Port_Moresby">
            <summary>
            (UTC+10:00) Guam, Port Moresby
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Hobart">
            <summary>
            (UTC+10:00) Hobart
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Magadan">
            <summary>
            (UTC+10:00) Magadan
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Vladivostok_Magadan_RTZ_9">
            <summary>
            (UTC+10:00) Vladivostok, Magadan (RTZ 9)
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Chokurdakh_RTZ_10">
            <summary>
            (UTC+11:00) Chokurdakh (RTZ 10)
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Solomon_Is__New_Caledonia">
            <summary>
            (UTC+11:00) Solomon Is., New Caledonia
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Anadyr_Petropavlovsk_Kamchatsky_RTZ_11">
            <summary>
            (UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky (RTZ 11)
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Auckland_Wellington">
            <summary>
            (UTC+12:00) Auckland, Wellington
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Coordinated_Universal_Time_12">
            <summary>
            (UTC+12:00) Coordinated Universal Time+12
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Fiji">
            <summary>
            (UTC+12:00) Fiji
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Petropavlovsk_Kamchatsky_Old">
            <summary>
            (UTC+12:00) Petropavlovsk-Kamchatsky - Old
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Nuku_alofa">
            <summary>
            (UTC+13:00) Nuku'alofa
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Samoa">
            <summary>
            (UTC+13:00) Samoa
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Attributes.WindowsTimeZone.Kiritimati_Island">
            <summary>
            (UTC+14:00) Kiritimati Island
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.DTO.CoordinatesDTO">
            <summary>
            Coordinates of a geographical location
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.DTO.CoordinatesDTO.#ctor(System.Double,System.Double)">
            <summary>
            Create coordinates with its longitude and latitude
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.DTO.TweetEntitiesDTO">
            <summary>
            Class storing multiple types of TweetEntities
            https://dev.twitter.com/docs/tweet-entities
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Events.EventHelpers">
            <summary>
            Extension methods to ease the use of events
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Events.IExternalClientEvents.WaitingForRateLimit">
            <summary>
            The query is awaiting for rate limits
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Events.IExternalClientEvents.BeforeWaitingForRequestRateLimits">
            <summary>
            This is the first event raised. This event is raised before executing a request when the rate limits for the query have been retrieved.
            At that stage you have the information regarding how many requests can be performed and how long you have to wait if no more request are available.
            This event will let you log, modify, cancel a request.
            Use this event if you wish to manually handle rate limits
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Events.IExternalClientEvents.BeforeExecutingRequest">
            <summary>
            Event raised before executing a request. At that stage we have waited for rate limits to be available.
            The request will be executed right after this event.
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Events.IExternalClientEvents.AfterExecutingRequest">
            <summary>
            Event raised after a request has been performed, this event will let you log the query and check the result/exception.
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Events.IExternalClientEvents.OnTwitterException">
            <summary>
            Event raised when an exception is returned by the TwitterApi service
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Extensions.EnumExtensions.GetAttributeOfType``1(System.Object)">
            <summary>
            Gets an attribute on an enum field value
            </summary>
            <typeparam name="T">The type of the attribute you want to retrieve</typeparam>
            <param name="enumVal">The enum value</param>
            <returns>The attribute of type T that exists on the enum value</returns>
        </member>
        <member name="T:Tweetinvi.Core.Extensions.ExceptionExtension">
            <summary>
            Extension methods for Exception
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Extensions.ExceptionExtension.GetWebExceptionStatusNumber(System.Net.WebException)">
            <summary>
            Provide the exception status number of a WebException
            </summary>
            <param name="wex">WebException</param>
            <returns>Status Number</returns>
        </member>
        <member name="T:Tweetinvi.Core.Extensions.IEnumerableExtension">
            <summary>
            Extension methods for IEnumerable
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Extensions.StringExtension">
            <summary>
            Extension methods on string classes
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Extensions.StringExtension.TweetParts(System.String)">
            <summary>
            Returns the different parts of an Extended Tweet string.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Extensions.StringExtension.EstimateTweetLength(System.String,System.Boolean)">
            <summary>
            Calculate the length of a string using Twitter algorithm
            </summary>
            <returns>Size of the current Tweet</returns>
        </member>
        <member name="M:Tweetinvi.Core.Extensions.StringExtension.HTMLDecode(System.String)">
            <summary>
            Decode a string formatted to be used within a url
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Extensions.StringExtension.ReplaceNonPrintableCharacters(System.String,System.Char)">
            <summary>
            Give the ability to replace NonPrintableCharacters to another character
            This is very useful for streaming as we receive Tweets from around the world
            </summary>
            <param name="s">String to be updated</param>
            <param name="replaceWith">Character to replace by</param>
            <returns>String without any of the special characters</returns>
        </member>
        <member name="M:Tweetinvi.Core.Extensions.StringExtension.CleanForRegexGroupName(System.String)">
            <summary>
            Creates a groupName by replacing invalidCharacters with unique groupName
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Extensions.StringExtension.CleanForRegex(System.String)">
            <summary>
            Clean a keyword that you want to search with a regex
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Extensions.StringExtension.RegexFiltering(System.String[])">
            <summary>
            Create a filtering Regex for all the expected keywords and creates a Group that you can inspect
            to see if the specific keyword has been matched
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Extensions.StringFormater">
            <summary>
            Class providing methods to format a string
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Extensions.StringFormater.UrlEncode(System.String)">
            <summary>
            Clean a string so that it can be used in an URL
            </summary>
            <param name="str">string to clean</param>
            <returns>Cleaned string that can be added into an URL</returns>
        </member>
        <member name="M:Tweetinvi.Core.Helpers.EnumHelpers.GetValueWhereAttribute``2(System.Func{``1,System.Boolean},System.String)">
            <summary>
            Gets an enum field value that has an attribute meeting the supplied predicate
            </summary>
            <typeparam name="TEnum">The type of the enum you want a value from</typeparam>
            <typeparam name="TAttr">The type of the attribute you want to use to find the value</typeparam>
            <param name="attributePredicate">The predicate for testing candidate attributes</param>
            <param name="exceptionMessage">Optional - A custom exception message that will be used in the exception that is thrown if no value is found</param>
            <returns>The first value found that has an attribute matching the supplied predicate</returns>
        </member>
        <member name="M:Tweetinvi.Core.Helpers.EnumHelpers.TryGetValueWhereAttribute``2(System.Func{``1,System.Boolean},``0@)">
            <summary>
            Try Get an enum field value that has an attribute meeting the supplied predicate
            </summary>
            <typeparam name="TEnum">The type of the enum you want a value from</typeparam>
            <typeparam name="TAttr">The type of the attribute you want to use to find the value</typeparam>
            <param name="attributePredicate">The predicate for testing candidate attributes</param>
            <param name="val">Used to return the value of the enum found. If no value is found, this will be the default</param>
            <returns>Whether a value was found</returns>
        </member>
        <member name="T:Tweetinvi.Core.Helpers.IJsonObjectConverter">
            <summary>
            This interface allows to (de)serialize any object or interface from the Tweetinvi API
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Helpers.UnicodeHelper.UTF32Length(System.String)">
            <summary>
            Get the UTF32 length of a string
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Injectinvi.ITweetinviModule">
            <summary>
            Module used to initialize Tweetinvi dependency injection
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Injectinvi.ITweetinviModule.Initialize(Tweetinvi.Core.Injectinvi.ITweetinviContainer)">
            <summary>
            Initialize the module registration.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Iterators.ICursorPageResult`2.NextCursor">
            <summary>
            Cursor to get the next set of items
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Iterators.CursorPageResult`2">
            <summary>
            Output of a cursor based requests
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Iterators.CursorPageResult`2.NextCursor">
            <summary>
            Cursor to get the next set of items
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Iterators.IPageResult`1.Items">
            <summary>
            Items returned during for a specific cursor iteration
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Iterators.IPageResult`1.IsLastPage">
            <summary>
            Whether all the data have been returned
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.JsonConverters.DecimalConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc cref="T:Newtonsoft.Json.JsonConverter"/>
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
            <seealso cref="T:Newtonsoft.Json.JsonConverter"/>
        </member>
        <member name="T:Tweetinvi.Core.JsonConverters.JsonEnumStringConverter`1">
            <summary>
            A JSON converter that (de)serializes an enum to a string using a JsonEnumStringAttribute above each value.
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.JsonConverters.JsonPropertiesConverterRepository">
            <summary>
            Repository of converters used to transform json into a collection of T
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.JsonConverters.JsonPropertyConverterRepository">
            <summary>
            Repository of converters used to transform json into a specific type T.
            It should be used as a Field attribute (e.g. [JsonConverter(typeof(JsonPropertyConverterRepository))])
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Models.AuthenticatedUser">
            <summary>
            A token user is unique to a Token and provides action that will
            be executed from the connected user and that are not available
            from another user like (read my messages)
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Models.EndpointRateLimit.Remaining">
            <summary>
            Number of operation available on the specific endpoint.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Models.EndpointRateLimit.Reset">
            <summary>
            Integer representing the datetime when the endpoint rate limit will be reset.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Models.EndpointRateLimit.Limit">
            <summary>
            Maximum number of operations that can be performed in 15 minutes.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Models.EndpointRateLimit.ResetDateTimeInSeconds">
            <summary>
            Duration in seconds after which the endpoint rate limit will be reset.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Models.EndpointRateLimit.ResetDateTimeInMilliseconds">
            <summary>
            Duration in milliseconds after which the endpoint rate limit will be reset.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Models.EndpointRateLimit.ResetDateTime">
            <summary>
            DateTime when the endpoint rate limit will be reset.
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Models.Message">
            <summary>
            Message that can be sent privately between Twitter users
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Models.Properties.Geo">
            <summary>
            Geographic information of a location
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Models.Tweet">
            <summary>
            Class representing a Tweet
            https://dev.twitter.com/docs/api/1/get/statuses/show/%3Aid
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Models.TwitterEntities.HashtagEntity">
            <summary>
            A hashtag is a keyword prefixed by # and representing a category of tweet
            This class stores information related with an user mention
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Models.TwitterEntities.MediaEntity">
            <summary>
            Object storing information related with a Media on Twitter
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Models.TwitterEntities.MediaEntitySize">
            <summary>
            Object storing information related with media size on Twitter
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Models.TwitterEntities.UrlEntity">
            <summary>
            Object storing information related with an URL on twitter
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Models.TwitterEntities.UserMentionEntity">
            <summary>
            Object storing information related with an user mention on Twitter
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Models.User">
            <summary>
            Tweetinvi User.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Parameters.IBaseGetUsersOfListParameters.IncludeEntities">
            <summary>
            Users will include their entities when set to true
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Parameters.IBaseGetUsersOfListParameters.SkipStatus">
            <summary>
            When set to true statuses will not be included in the returned user objects.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Parameters.BaseGetUsersOfListParameters.List">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Core.Parameters.BaseGetUsersOfListParameters.IncludeEntities">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Core.Parameters.BaseGetUsersOfListParameters.SkipStatus">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Core.Parameters.TweetFields.ALL">
            <summary>
            All the fields available on all tweets.
            This only includes the `PublicMetrics` (which is not dependent on the user context).
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.RateLimit.IRateLimitAwaiter">
            <summary>
            Wait for the RateLimits before performing an operation.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.RateLimit.IRateLimitAwaiter.WaitForCredentialsRateLimitAsync(Tweetinvi.Models.ITwitterRequest)">
            <summary>
            Wait for the credentials' rate limits to be available for the specified query.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.RateLimit.IRateLimitAwaiter.WaitForCredentialsRateLimitAsync(Tweetinvi.Parameters.RateLimitsClient.IWaitForCredentialsRateLimitParameters)">
            <summary>
            Wait for the credentials' rate limits to be available for the specified query.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.RateLimit.IRateLimitAwaiter.WaitForCredentialsRateLimitAsync(Tweetinvi.Models.IEndpointRateLimit,Tweetinvi.Models.IReadOnlyTwitterCredentials,Tweetinvi.Core.Client.ITwitterExecutionContext)">
            <summary>
            Wait for the credentials' rate limits to be available for the specified endpoint.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.RateLimit.IRateLimitAwaiter.TimeToWaitBeforeTwitterRequestAsync(System.String,Tweetinvi.Models.IReadOnlyTwitterCredentials,Tweetinvi.Core.Client.ITwitterExecutionContext)">
            <summary>
            Get the duration to wait before executing the specified query.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.RateLimit.IRateLimitAwaiter.GetTimeToWaitFromQueryRateLimit(Tweetinvi.Models.IEndpointRateLimit,Tweetinvi.Core.Client.ITwitterExecutionContext)">
            <summary>
            Get the duration (milliseconds) to wait before executing a query using the specified rate limits.
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.RateLimit.IRateLimitCache">
            <summary>
            Cache storing the RateLimits to reduce the number of access to the Twitter API rate limits.
            Access to the rate limit cache should be done via the RateLimitCacheManager.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.RateLimit.IRateLimitCache.ClearAsync(Tweetinvi.Models.IReadOnlyTwitterCredentials)">
            <summary>
            Clear the rate limits entry associated with a specific set of credentials.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.RateLimit.IRateLimitCache.ClearAllAsync">
            <summary>
            Clear all the rate limit entries from the cache.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.RateLimit.IRateLimitCache.RefreshEntryAsync(Tweetinvi.Models.IReadOnlyTwitterCredentials,Tweetinvi.Models.ICredentialsRateLimits)">
            <summary>
            Manually set a rate limit entry for a specific set of credentials.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.RateLimit.IRateLimitCache.GetCredentialsRateLimitsAsync(Tweetinvi.Models.IReadOnlyTwitterCredentials)">
            <summary>
            Return the rate limits entry for a set of credentials.
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.RateLimit.IRateLimitCacheManager">
            <summary>
            Proxy used to access and refresh the rate limits cache.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.RateLimit.IRateLimitCacheManager.GetQueryRateLimitAsync(Tweetinvi.Parameters.IGetEndpointRateLimitsParameters,Tweetinvi.Models.IReadOnlyTwitterCredentials)">
            <summary>
            Return the rate limits for a specific query.
            If the query url cannot be mapped, a new one is created in the OtherQueryRateLimits.
            If the credentials rate limits are not located in the cache, they will be retrieved from Twitter.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.RateLimit.IRateLimitCacheManager.GetCredentialsRateLimitsAsync(Tweetinvi.Models.IReadOnlyTwitterCredentials)">
            <summary>
            Return the all the rate limits for a specific set of credentials.
            If the rate limits are not located in the cache, they will be retrieved from Twitter.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.RateLimit.IRateLimitCacheManager.UpdateCredentialsRateLimitsAsync(Tweetinvi.Models.IReadOnlyTwitterCredentials,Tweetinvi.Models.ICredentialsRateLimits)">
            <summary>
            Update the rate limit cache with a specific set of rate limits.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.RateLimit.IRateLimitCacheManager.ShouldEndpointCacheBeUpdated(Tweetinvi.Models.IEndpointRateLimit)">
            <summary>
            Returns whether the rate limits should be refreshed to retrieve
            a specific endpoint information
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.RateLimit.IRateLimitHelper">
            <summary>
            Helper class used to read the flags information from the rate limits
            and return the rate limits associated with a query.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.RateLimit.IRateLimitHelper.GetEndpointRateLimitFromQuery(System.String,Tweetinvi.Models.ICredentialsRateLimits,System.Boolean)">
            <summary>
            Return the specified query rate limits if the query can be identified in the credentialsRateLimits.
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.RateLimit.IRateLimitUpdater">
            <summary>
            Update the rate limit cached information.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.RateLimit.IRateLimitUpdater.QueryExecutedAsync(System.String,Tweetinvi.Models.ITwitterCredentials,System.Int32)">
            <summary>
            Inform the updater a specific query has been executed with a specific set of credentials.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.RateLimit.IRateLimitUpdater.QueryExecutedAsync(System.String,Tweetinvi.Models.ITwitterCredentials,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Inform the updater a specific query has been executed with a specific set of credentials.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.RateLimit.IRateLimitUpdater.ClearRateLimitsForQueryAsync(System.String,Tweetinvi.Models.IReadOnlyTwitterCredentials)">
            <summary>
            Inform that you want to query rate limits to be set to 0.
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Streaming.IStreamResultGenerator">
            <summary>
            Set of methods to extract objects from any kind of stream
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.IStreamResultGenerator.StreamStarted">
            <summary>
            The stream has started.
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.IStreamResultGenerator.StreamResumed">
            <summary>
            The stream has resumed after being paused.
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.IStreamResultGenerator.StreamPaused">
            <summary>
            The stream has paused.
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.IStreamResultGenerator.StreamStopped">
            <summary>
            The stream has stopped. This can be due by an exception.
            If it is the case the event args will contain the exception details.
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.IStreamResultGenerator.KeepAliveReceived">
            <summary>
            A keep-alive message has been received.
            Twitter sends these every 30s so we know the stream's still working.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Streaming.IStreamResultGenerator.StreamState">
            <summary>
            Get the current state of the stream analysis
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.IStreamResultGenerator.StartAsync(System.Action{System.String},System.Func{Tweetinvi.Models.ITwitterRequest})">
            <summary>
            Start extracting objects from the stream
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.IStreamResultGenerator.StartAsync(System.Func{System.String,System.Boolean},System.Func{Tweetinvi.Models.ITwitterRequest})">
            <summary>
            Start extracting objects from the stream
            </summary>
            <param name="onJsonReceivedCallback">Method to call foreach object</param>
            <param name="createTwitterRequest">Func to generate a request</param>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.IStreamResultGenerator.ResumeStream">
            <summary>
            Run the stream
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.IStreamResultGenerator.PauseStream">
            <summary>
            Pause the stream
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.IStreamResultGenerator.StopStream">
            <summary>
            Stop the stream
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.IStreamResultGenerator.StopStream(System.Exception,Tweetinvi.Streaming.Events.IDisconnectMessage)">
            <summary>
            Stop a stream an define which exception made it fail
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.IStreamTrackManager`1.GetMatchingTracksAndActions(System.String)">
            <summary>
            Collection of tracks and their related actions. An action is invoked if 
            a track has been matched.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITrackStringAnalyzer.Matches(System.String)">
            <summary>
            Verify that the input matches one requirement
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITrackStringAnalyzer.MatchesAll(System.String)">
            <summary>
            Verify that the input matches all requirements
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITrackStringAnalyzer.GetMatchingCharacters(System.String)">
            <summary>
            Collection of chars[] (keywords) matched in the input.
            e.g. : 'linvi' matches 'hello linvi from tweetinvi'
            e.g. : 'linvi' matches 'hellolinvifromtweetinvi'
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITrackStringAnalyzer.GetMatchingTracks(System.String)">
            <summary>
            Collection of tracked Keywords matched in the input
            e.g. : 'linvi' matches 'hello linvi from tweetinvi'
            e.g. : 'linvi' does not match 'hellolinvifromtweetinvi'
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Streaming.ITrackableStream`1.TracksCount">
            <summary>
            Gets the current number of Tracks
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Streaming.ITrackableStream`1.MaxTracks">
            <summary>
            Get the maximum number of Tracks you can add
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Streaming.ITrackableStream`1.Tracks">
            <summary>
            List of tracks currently analyzed
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITrackableStream`1.AddTrack(System.String,System.Action{`0})">
            <summary>
            Add a keyword/sentence to Track
            </summary>
            <param name="track">Keyword to track</param>
            <param name="trackReceived">Event to call when this track keyword</param>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITrackableStream`1.RemoveTrack(System.String)">
            <summary>
            Remove a keyword/sentence that was tracked
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITrackableStream`1.ContainsTrack(System.String)">
            <summary>
            Tells whether a track is already existing (case insensitive)
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITrackableStream`1.ClearTracks">
            <summary>
            Remove all tracked keywords
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.ITrackedStream.MatchingTweetReceived">
            <summary>
            A tweet matching the specified filters has been received.
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.ITrackedStream.TweetReceived">
            <summary>
            A tweet has been received, regardless of the fact that is matching the specified criteria.
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.ITrackedStream.NonMatchingTweetReceived">
            <summary>
            A tweet has been received but it does not match all of the specified filters.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITrackedStream.StartAsync(System.String)">
            <summary>
            Start a stream ASYNCHRONOUSLY. The task will complete when the stream stops.
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Streaming.ITrackManager`1">
            <summary>
            Methods allowing to manage Track keywords
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Streaming.ITrackManager`1.TracksCount">
            <summary>
            Gets the current number of Tracks
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Streaming.ITrackManager`1.MaxTracks">
            <summary>
            Get the maximum number of Tracks you can add
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Streaming.ITrackManager`1.Tracks">
            <summary>
            List of tracks currently analyzed
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITrackManager`1.AddTrack(System.String,System.Action{`0})">
            <summary>
            Add a keyword/sentence to Track
            </summary>
            <param name="track">Keyword to track</param>
            <param name="trackReceived">Event to call when this track keyword</param>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITrackManager`1.RemoveTrack(System.String)">
            <summary>
            Remove a keyword/sentence that was tracked
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITrackManager`1.ContainsTrack(System.String)">
            <summary>
            Tells whether a track is already existing (case insensitive)
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITrackManager`1.ClearTracks">
            <summary>
            Remove all tracked keywords
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.ITweetStream.TweetReceived">
            <summary>
            Event informing that a tweet has been received.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITweetStream.StartAsync(System.String)">
            <summary>
            Start a stream SYNCHRONOUSLY. The thread will continue after the stream has stopped.
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.ITwitterStream.StreamStarted">
            <summary>
            The stream has been started.
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.ITwitterStream.StreamResumed">
            <summary>
            The stream has been resumed after being paused.
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.ITwitterStream.StreamPaused">
            <summary>
            The stream has been paused.
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.ITwitterStream.StreamStopped">
            <summary>
            The stream has been stopped. This can be due to an exception.
            You can verify this with the exception infos provided in the event args.
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.ITwitterStream.KeepAliveReceived">
            <summary>
            A keep-alive message has been received.
            Twitter sends these every 30s so we know the stream's still working.
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.ITwitterStream.TweetDeleted">
            <summary>
            A tweet has been deleted.
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.ITwitterStream.TweetLocationInfoRemoved">
            <summary>
            The location information of a tweet has been deleted.
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.ITwitterStream.DisconnectMessageReceived">
            <summary>
            The stream has been disconnected. This is different from being stopped
            as it is the Twitter stream endpoint that let you know that they are disconnecting
            you from any reason available in the event args.
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.ITwitterStream.TweetWitheld">
            <summary>
            A tweet matching your criteria has been identified by the stream api but it
            could not be received because it has been forbidden in your country.
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.ITwitterStream.UserWitheld">
            <summary>
            A user matching your criteria has been identified by the stream api but it
            could not be received because he was blocked in your country.
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.ITwitterStream.LimitReached">
            <summary>
            Your stream has too broad parameters that result in receiving > 1% of the total tweets.
            You can identify the number of tweets that Twitter has not sent to you in the event args.
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.ITwitterStream.WarningFallingBehindDetected">
             <summary>
             Inform the user that the stream is not read fast enough and that if this continues,
             the stream will be disconnected when the buffered queue is full.
            
             The StallWarning parameter needs to be set to true for this event to be raised.
             </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.ITwitterStream.UnmanagedEventReceived">
            <summary>
            An event that is not handled by Tweetinvi have just been received!
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.ITwitterStream.EventReceived">
            <summary>
            Informs that we have received some json from the Twitter stream.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Streaming.ITwitterStream.TweetMode">
            <summary>
            Decide whether to use Extended or Compat mode
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Streaming.ITwitterStream.StreamState">
            <summary>
            Get the current state of the stream
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITwitterStream.Resume">
            <summary>
            Resume a stopped Stream
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITwitterStream.Pause">
            <summary>
            Pause a running Stream
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITwitterStream.Stop">
            <summary>
            Stop a running or paused stream
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Streaming.ITwitterStream.LanguageFilters">
            <summary>
            Languages that you want to receive. If empty all languages will be matched.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITwitterStream.AddLanguageFilter(System.String)">
            <summary>
            Add a language that you want the tweets to be filtered by.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITwitterStream.AddLanguageFilter(Tweetinvi.Models.LanguageFilter)">
            <summary>
            Add a language that you want the tweets to be filtered by.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITwitterStream.RemoveLanguageFilter(System.String)">
            <summary>
            Tweets with the specified language will no longer be received.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITwitterStream.RemoveLanguageFilter(Tweetinvi.Models.LanguageFilter)">
            <summary>
            Tweets with the specified language will no longer be received.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITwitterStream.ClearLanguageFilters">
            <summary>
            No filter on the languages will be applied.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Streaming.ITwitterStream.StallWarnings">
            <summary>
            Give you information regarding your connection. Twitter could let you know
            if the processing of the stream is too slow or if the connection is about to be dropped.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Streaming.ITwitterStream.FilterLevel">
            <summary>
            Filter tweets containing violence, sex or any sensible subjects.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Streaming.ITwitterStream.CustomQueryParameters">
            <summary>
            Custom parameters that will be appended to the stream query url.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Streaming.ITwitterStream.FormattedCustomQueryParameters">
            <summary>
            A formatted version of the custom query parameters.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITwitterStream.AddCustomQueryParameter(System.String,System.String)">
            <summary>
            Append a custom query parameter to the query url.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.ITwitterStream.ClearCustomQueryParameters">
            <summary>
            Remove all custom query parameters.
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.V2.ITweetStreamV2`1.EventReceived">
            <summary>
            Any event message received
            </summary>
        </member>
        <member name="E:Tweetinvi.Core.Streaming.V2.ITweetStreamV2`1.TweetReceived">
            <summary>
            A tweet has been received.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Streaming.V2.ITweetStreamV2`1.StopStream">
            <summary>
            Stop running the stream
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Web.IOAuthQueryParameter">
            <summary>
            Information used to generate an OAuth query
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Web.IOAuthQueryParameter.Key">
            <summary>
            Parameter name
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Web.IOAuthQueryParameter.Value">
            <summary>
            Parameter value
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Web.IOAuthQueryParameter.RequiredForSignature">
            <summary>
            Is this parameter required to generate the signature
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Web.IOAuthQueryParameter.RequiredForHeader">
            <summary>
            Is this parameter required to generate the headers
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Web.IOAuthQueryParameter.IsPartOfOAuthSecretKey">
            <summary>
            Is this parameter required to generate the secret key
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Web.IOAuthWebRequestGenerator">
            <summary>
            Generator of HttpWebRequest using OAuth specification
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Web.IOAuthWebRequestGenerator.GenerateParameter(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Generate an OAuth query parameter
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Web.IOAuthWebRequestGenerator.GenerateApplicationParameters(Tweetinvi.Models.IReadOnlyConsumerCredentials,Tweetinvi.Models.IAuthenticationRequest,System.Collections.Generic.IEnumerable{Tweetinvi.Core.Web.IOAuthQueryParameter})">
            <summary>
            Generate all the query parameters for an application connection.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Web.IOAuthWebRequestGenerator.GenerateParameters(Tweetinvi.Models.IReadOnlyTwitterCredentials,System.Collections.Generic.IEnumerable{Tweetinvi.Core.Web.IOAuthQueryParameter})">
            <summary>
            Generate the authentication parameters from Twitter credentials.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Web.IOAuthWebRequestGenerator.GenerateAuthorizationHeader(System.Uri,Tweetinvi.Models.HttpMethod,System.Collections.Generic.IEnumerable{Tweetinvi.Core.Web.IOAuthQueryParameter})">
            <summary>
            Generate authorization headers for a query with the specified OAuth fields.
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Web.IOAuthWebRequestGenerator.SetTwitterQueryAuthorizationHeaderAsync(Tweetinvi.Models.ITwitterQuery)">
            <summary>
            Generate authorization headers for a query with the specified OAuth fields.
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Web.ITwitterClientHandler">
            <summary>
            Custom HttpClientHandler.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Web.ITwitterClientHandler.TwitterQuery">
            <summary>
            Contains all the information required for the HttpClient to create and execute the request.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Web.ITwitterResponse.URL">
            <summary>
            Query url.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Web.ITwitterResponse.ResultStream">
            <summary>
            Resulting stream to retrieve the data.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Web.ITwitterResponse.StatusCode">
            <summary>
            Status Code of the query execution.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Web.ITwitterResponse.IsSuccessStatusCode">
            <summary>
            Inform whether the query has succeeded.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Web.ITwitterResponse.Headers">
            <summary>
            Headers of the response.
            </summary>
        </member>
        <member name="P:Tweetinvi.Core.Web.ITwitterResponse.ReasonPhrase">
            <summary>
            Gets or sets the reason phrase which typically is sent by servers together with the status code
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Web.IWebRequestExecutor">
            <summary>
            Generate a Token that can be used to perform OAuth queries
            </summary>
        </member>
        <member name="M:Tweetinvi.Core.Web.IWebRequestExecutor.ExecuteQueryAsync(Tweetinvi.Models.ITwitterRequest,Tweetinvi.Core.Web.ITwitterClientHandler)">
            <summary>
            Execute a TwitterQuery and return the resulting json data.
            </summary>
        </member>
        <member name="T:Tweetinvi.Core.Interfaces.Streaminvi.RepliesFilterType">
            <summary>
            Filter the type of replies received in the stream.
            https://dev.twitter.com/streaming/overview/request-parameters#replies
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Interfaces.Streaminvi.RepliesFilterType.AllReplies">
            <summary>
            DEFAULT : You follow User B but not C. If B replies to C you WILL receive the reply in the stream.
            </summary>
        </member>
        <member name="F:Tweetinvi.Core.Interfaces.Streaminvi.RepliesFilterType.RepliesToKnownUsers">
            <summary>
            You follow User B but not C. If B replies to C you WON'T receive the reply in the stream.
            (Twitter default behavior)
            </summary>
        </member>
        <member name="M:Tweetinvi.Auth.IAuthenticationRequestStore.AppendAuthenticationRequestIdToCallbackUrl(System.String,System.String)">
            <summary>
            Append an AuthenticationRequest identifier to a callback url
            </summary>
        </member>
        <member name="M:Tweetinvi.Auth.IAuthenticationRequestStore.ExtractAuthenticationRequestIdFromCallbackUrl(System.String)">
            <summary>
            Extract the AuthenticationRequest identifier from the received callback url
            </summary>
        </member>
        <member name="M:Tweetinvi.Auth.IAuthenticationRequestStore.GetAuthenticationRequestFromIdAsync(System.String)">
            <summary>
            Returns the AuthenticationRequest from its identifier
            </summary>
        </member>
        <member name="M:Tweetinvi.Auth.IAuthenticationRequestStore.AddAuthenticationTokenAsync(System.String,Tweetinvi.Models.IAuthenticationRequest)">
            <summary>
            Stores the AuthenticationRequest
            </summary>
        </member>
        <member name="M:Tweetinvi.Auth.IAuthenticationRequestStore.RemoveAuthenticationTokenAsync(System.String)">
            <summary>
            Removes an AuthenticationRequest from the store
            </summary>
        </member>
        <member name="T:Tweetinvi.Client.IAccountActivityClient">
            <summary>
            A client providing all the actions related with the account activity api
            </summary>
        </member>
        <member name="P:Tweetinvi.Client.IAccountActivityClient.ParametersValidator">
            <summary>
            Validate all the Account activity client parameters
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IAccountActivityClient.CreateRequestHandler">
            <summary>
            Creates an AccountActivity request handler that will properly route requests
            </summary>
            <returns>AccountActivity Request Handler</returns>
        </member>
        <member name="M:Tweetinvi.Client.IAccountActivityClient.CreateAccountActivityWebhookAsync(System.String,System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IAccountActivityClient.CreateAccountActivityWebhookAsync(Tweetinvi.Parameters.ICreateAccountActivityWebhookParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IAccountActivityClient.CreateAccountActivityWebhookAsync(Tweetinvi.Parameters.ICreateAccountActivityWebhookParameters)">
            <summary>
            Registers a webhook URL for all event types. The URL will be validated via CRC request before saving.
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#post-account-activity-all-env-name-webhooks </para>
            </summary>
            <returns>The created webhook</returns>
        </member>
        <member name="M:Tweetinvi.Client.IAccountActivityClient.GetAccountActivityWebhookEnvironmentsAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IAccountActivityClient.GetAccountActivityWebhookEnvironmentsAsync(Tweetinvi.Parameters.IGetAccountActivityWebhookEnvironmentsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IAccountActivityClient.GetAccountActivityWebhookEnvironmentsAsync(Tweetinvi.Parameters.IGetAccountActivityWebhookEnvironmentsParameters)">
            <summary>
            Get the account activity webhook environments
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#get-account-activity-all-webhooks </para>
            </summary>
            <returns>The account activity environments and their associated webhooks</returns>
        </member>
        <member name="M:Tweetinvi.Client.IAccountActivityClient.GetAccountActivityEnvironmentWebhooksAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IAccountActivityClient.GetAccountActivityEnvironmentWebhooksAsync(Tweetinvi.Parameters.IGetAccountActivityEnvironmentWebhooksParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IAccountActivityClient.GetAccountActivityEnvironmentWebhooksAsync(Tweetinvi.Parameters.IGetAccountActivityEnvironmentWebhooksParameters)">
            <summary>
            Returns the webhooks registered on a specific environment
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#get-account-activity-all-webhooks </para>
            </summary>
            <returns>The account activity registered webhooks of a specific environment</returns>
        </member>
        <member name="M:Tweetinvi.Client.IAccountActivityClient.DeleteAccountActivityWebhookAsync(System.String,System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IAccountActivityClient.DeleteAccountActivityWebhookAsync(Tweetinvi.Parameters.IDeleteAccountActivityWebhookParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IAccountActivityClient.DeleteAccountActivityWebhookAsync(System.String,Tweetinvi.Models.IWebhook)">
            <inheritdoc cref="M:Tweetinvi.Client.IAccountActivityClient.DeleteAccountActivityWebhookAsync(Tweetinvi.Parameters.IDeleteAccountActivityWebhookParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IAccountActivityClient.DeleteAccountActivityWebhookAsync(Tweetinvi.Parameters.IDeleteAccountActivityWebhookParameters)">
            <summary>
            Remove the specified account activity webhook
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#delete-account-activity-all-env-name-webhooks-webhook-id </para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IAccountActivityClient.TriggerAccountActivityWebhookCRCAsync(System.String,System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IAccountActivityClient.TriggerAccountActivityWebhookCRCAsync(Tweetinvi.Parameters.ITriggerAccountActivityWebhookCRCParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IAccountActivityClient.TriggerAccountActivityWebhookCRCAsync(Tweetinvi.Parameters.ITriggerAccountActivityWebhookCRCParameters)">
            <summary>
            Challenges a webhook and reenable it when it was disabled
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#put-account-activity-all-env-name-webhooks-webhook-id </para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IAccountActivityClient.SubscribeToAccountActivityAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IAccountActivityClient.SubscribeToAccountActivityAsync(Tweetinvi.Parameters.ISubscribeToAccountActivityParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IAccountActivityClient.SubscribeToAccountActivityAsync(Tweetinvi.Parameters.ISubscribeToAccountActivityParameters)">
            <summary>
            Subscribes the provided application to all events for the provided environment for all message types. After activation, all events for the requesting user will be sent to the application’s webhook via POST request.
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#post-account-activity-all-env-name-subscriptions </para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IAccountActivityClient.CountAccountActivitySubscriptionsAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IAccountActivityClient.CountAccountActivitySubscriptionsAsync(Tweetinvi.Parameters.ICountAccountActivitySubscriptionsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IAccountActivityClient.CountAccountActivitySubscriptionsAsync(Tweetinvi.Parameters.ICountAccountActivitySubscriptionsParameters)">
            <summary>
            Returns the count of subscriptions that are currently active on your account for all activities.
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#get-account-activity-all-subscriptions-count </para>
            </summary>
            <returns>Count information</returns>
        </member>
        <member name="M:Tweetinvi.Client.IAccountActivityClient.IsAccountSubscribedToAccountActivityAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IAccountActivityClient.IsAccountSubscribedToAccountActivityAsync(Tweetinvi.Parameters.IIsAccountSubscribedToAccountActivityParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IAccountActivityClient.IsAccountSubscribedToAccountActivityAsync(Tweetinvi.Parameters.IIsAccountSubscribedToAccountActivityParameters)">
            <summary>
            Check if an account is subscribed to the webhooks
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#get-account-activity-all-env-name-subscriptions </para>
            </summary>
            <returns>Whether the account is subscribed to the account activity environment</returns>
        </member>
        <member name="M:Tweetinvi.Client.IAccountActivityClient.GetAccountActivitySubscriptionsAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IAccountActivityClient.GetAccountActivitySubscriptionsAsync(Tweetinvi.Parameters.IGetAccountActivitySubscriptionsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IAccountActivityClient.GetAccountActivitySubscriptionsAsync(Tweetinvi.Parameters.IGetAccountActivitySubscriptionsParameters)">
            <summary>
            Get the account activity subscriptions
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#get-account-activity-all-env-name-subscriptions-list </para>
            </summary>
            <returns>User subscriptions to account activities</returns>
        </member>
        <member name="M:Tweetinvi.Client.IAccountActivityClient.UnsubscribeFromAccountActivityAsync(System.String,System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IAccountActivityClient.UnsubscribeFromAccountActivityAsync(Tweetinvi.Parameters.IUnsubscribeFromAccountActivityParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IAccountActivityClient.UnsubscribeFromAccountActivityAsync(Tweetinvi.Parameters.IUnsubscribeFromAccountActivityParameters)">
            <summary>
            Unsubscribe a user from account activity
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#delete-account-activity-all-env-name-subscriptions-user-id-json </para>
            </summary>
        </member>
        <member name="T:Tweetinvi.Client.IAccountSettingsClient">
            <summary>
            A client providing all the actions relative to the account settings
            </summary>
        </member>
        <member name="P:Tweetinvi.Client.IAccountSettingsClient.ParametersValidator">
            <summary>
            Validate all the AccountSettings client parameters
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IAccountSettingsClient.GetAccountSettingsAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IAccountSettingsClient.GetAccountSettingsAsync(Tweetinvi.Parameters.IGetAccountSettingsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IAccountSettingsClient.GetAccountSettingsAsync(Tweetinvi.Parameters.IGetAccountSettingsParameters)">
            <summary>
            Get the client's account settings
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/get-account-settings </para>
            </summary>
            <returns>Account settings</returns>
        </member>
        <member name="M:Tweetinvi.Client.IAccountSettingsClient.UpdateAccountSettingsAsync(Tweetinvi.Parameters.IUpdateAccountSettingsParameters)">
            <summary>
            Update the client's account settings
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/post-account-settings </para>
            </summary>
            <returns>Updated account settings</returns>
        </member>
        <member name="M:Tweetinvi.Client.IAccountSettingsClient.UpdateProfileAsync(Tweetinvi.Parameters.IUpdateProfileParameters)">
            <summary>
            Update the client's account profile
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile </para>
            </summary>
            <returns>Updated profile</returns>
        </member>
        <member name="M:Tweetinvi.Client.IAccountSettingsClient.UpdateProfileImageAsync(System.Byte[])">
            <inheritdoc cref="M:Tweetinvi.Client.IAccountSettingsClient.UpdateProfileImageAsync(Tweetinvi.Parameters.IUpdateProfileImageParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IAccountSettingsClient.UpdateProfileImageAsync(Tweetinvi.Parameters.IUpdateProfileImageParameters)">
            <summary>
            Update the profile image of the account
            <para>Read more : https://dev.twitter.com/rest/reference/post/account/update_profile_image</para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IAccountSettingsClient.UpdateProfileBannerAsync(System.Byte[])">
            <inheritdoc cref="M:Tweetinvi.Client.IAccountSettingsClient.UpdateProfileBannerAsync(Tweetinvi.Parameters.IUpdateProfileBannerParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IAccountSettingsClient.UpdateProfileBannerAsync(Tweetinvi.Parameters.IUpdateProfileBannerParameters)">
            <summary>
            Update the profile banner of the account
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_banner </para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IAccountSettingsClient.RemoveProfileBannerAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IAccountSettingsClient.RemoveProfileBannerAsync(Tweetinvi.Parameters.IRemoveProfileBannerParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IAccountSettingsClient.RemoveProfileBannerAsync(Tweetinvi.Parameters.IRemoveProfileBannerParameters)">
            <summary>
            Remove the profile banner of the account
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/post-account-remove_profile_banner </para>
            </summary>
        </member>
        <member name="P:Tweetinvi.Client.IAuthClient.ParametersValidator">
            <summary>
            Validate all the Account activity client parameters
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IAuthClient.CreateBearerTokenAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IAuthClient.CreateBearerTokenAsync(Tweetinvi.Parameters.ICreateBearerTokenParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IAuthClient.CreateBearerTokenAsync(Tweetinvi.Parameters.ICreateBearerTokenParameters)">
            <summary>
            Allows a registered application to obtain an OAuth 2 Bearer Token.
            Bearer token allows to make API requests on an application's own behalf, without a user context.
            This is called Application-only authentication.
            </summary>
            <para> https://developer.twitter.com/en/docs/basics/authentication/api-reference/token </para>
            <returns>The bearer token to use for application only authentication</returns>
        </member>
        <member name="M:Tweetinvi.Client.IAuthClient.InitializeClientBearerTokenAsync">
            <summary>
            Gets the bearer token generated by <see cref="M:Tweetinvi.Client.IAuthClient.CreateBearerTokenAsync"/> and updates the client's current credentials.
            To learn more about bearer token read <see cref="M:Tweetinvi.Client.IAuthClient.CreateBearerTokenAsync"/>.
            </summary>
            <para>
            IMPORTANT NOTE: The setter is for convenience. It is strongly recommended to create a new TwitterClient instead.
            As using this setter could result in unexpected concurrency between the time of set and the execution of previous
            non awaited async operations.
            </para>
            <para> https://developer.twitter.com/en/docs/basics/authentication/api-reference/token </para>
        </member>
        <member name="M:Tweetinvi.Client.IAuthClient.RequestAuthenticationUrlAsync">
            <summary>
            Initiates a pin based authentication process for a user.
            </summary>
            <para> https://developer.twitter.com/en/docs/basics/authentication/api-reference/request_token </para>
            <returns>An AuthenticationRequest containing the url to redirect the user</returns>
        </member>
        <member name="M:Tweetinvi.Client.IAuthClient.RequestAuthenticationUrlAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IAuthClient.RequestAuthenticationUrlAsync(Tweetinvi.Parameters.IRequestAuthUrlParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IAuthClient.RequestAuthenticationUrlAsync(System.Uri)">
            <inheritdoc cref="M:Tweetinvi.Client.IAuthClient.RequestAuthenticationUrlAsync(Tweetinvi.Parameters.IRequestAuthUrlParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IAuthClient.RequestAuthenticationUrlAsync(Tweetinvi.Parameters.IRequestAuthUrlParameters)">
            <summary>
            Initiates the authentication process for a user.
            </summary>
            <para> https://developer.twitter.com/en/docs/basics/authentication/api-reference/request_token </para>
            <returns>An AuthenticationRequest containing the url to redirect the user</returns>
        </member>
        <member name="M:Tweetinvi.Client.IAuthClient.RequestCredentialsFromVerifierCodeAsync(System.String,Tweetinvi.Models.IAuthenticationRequest)">
            <inheritdoc cref="M:Tweetinvi.Client.IAuthClient.RequestCredentialsAsync(Tweetinvi.Parameters.IRequestCredentialsParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IAuthClient.RequestCredentialsAsync(Tweetinvi.Parameters.IRequestCredentialsParameters)">
            <summary>
            Request credentials with a verifierCode
            </summary>
            <para> https://developer.twitter.com/en/docs/basics/authentication/api-reference/token </para>
            <returns>The requested user credentials</returns>
        </member>
        <member name="M:Tweetinvi.Client.IAuthClient.RequestCredentialsFromCallbackUrlAsync(System.String,Tweetinvi.Models.IAuthenticationRequest)">
            <inheritdoc cref="M:Tweetinvi.Client.IAuthClient.RequestCredentialsFromCallbackUrlAsync(System.Uri,Tweetinvi.Models.IAuthenticationRequest)"/>
        </member>
        <member name="M:Tweetinvi.Client.IAuthClient.RequestCredentialsFromCallbackUrlAsync(System.Uri,Tweetinvi.Models.IAuthenticationRequest)">
            <summary>
            Request credentials from an AuthenticationRequest.
            This is assuming that the callback url contains the expected parameter,
            and that the AuthenticationTokenProvider has access to the returned token id.
            </summary>
            <para> https://developer.twitter.com/en/docs/basics/authentication/api-reference/token </para>
            <returns>The requested user credentials</returns>
        </member>
        <member name="M:Tweetinvi.Client.IAuthClient.InvalidateBearerTokenAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IAuthClient.InvalidateBearerTokenAsync(Tweetinvi.Parameters.IInvalidateBearerTokenParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IAuthClient.InvalidateBearerTokenAsync(Tweetinvi.Parameters.IInvalidateBearerTokenParameters)">
            <summary>
            Invalidates a BearerToken
            </summary>
            <para> https://developer.twitter.com/en/docs/basics/authentication/api-reference/invalidate_bearer_token </para>
        </member>
        <member name="M:Tweetinvi.Client.IAuthClient.InvalidateAccessTokenAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IAuthClient.InvalidateAccessTokenAsync(Tweetinvi.Parameters.IInvalidateAccessTokenParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IAuthClient.InvalidateAccessTokenAsync(Tweetinvi.Parameters.IInvalidateAccessTokenParameters)">
            <summary>
            Invalidate an AccessToken
            </summary>
            <para> https://developer.twitter.com/en/docs/basics/authentication/api-reference/invalidate_access_token </para>
        </member>
        <member name="M:Tweetinvi.Client.IExecuteClient.AdvanceRequestAsync``1(System.Action{Tweetinvi.Models.ITwitterRequest})">
            <summary>
            Execute a custom request
            </summary>
            <returns>The raw response from twitter with the json parsed into a Data Transfer Object</returns>
        </member>
        <member name="M:Tweetinvi.Client.IExecuteClient.AdvanceRequestAsync(System.Action{Tweetinvi.Models.ITwitterRequest})">
            <summary>
            Execute a custom request
            </summary>
            <returns>The raw response from Twitter</returns>
        </member>
        <member name="M:Tweetinvi.Client.IExecuteClient.RequestAsync``1(System.Action{Tweetinvi.Models.ITwitterQuery})">
            <summary>
            Execute a custom query
            </summary>
            <returns>The raw response from twitter with the json parsed into a Data Transfer Object</returns>
        </member>
        <member name="M:Tweetinvi.Client.IExecuteClient.RequestAsync(System.Action{Tweetinvi.Models.ITwitterQuery})">
            <summary>
            Execute a custom query
            </summary>
            <returns>The raw response from Twitter</returns>
        </member>
        <member name="P:Tweetinvi.Client.IHelpClient.ParametersValidator">
            <summary>
            Validate all the Help client parameters
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IHelpClient.GetTwitterConfigurationAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IHelpClient.GetTwitterConfigurationAsync(Tweetinvi.Parameters.IGetTwitterConfigurationParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IHelpClient.GetTwitterConfigurationAsync(Tweetinvi.Parameters.IGetTwitterConfigurationParameters)">
            <summary>
            Get the Twitter API configuration
            </summary>
            <para> https://developer.twitter.com/en/docs/developer-utilities/configuration/api-reference/get-help-configuration </para>
            <returns>Twitter official configuration</returns>
        </member>
        <member name="M:Tweetinvi.Client.IHelpClient.GetSupportedLanguagesAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IHelpClient.GetTwitterConfigurationAsync(Tweetinvi.Parameters.IGetTwitterConfigurationParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IHelpClient.GetSupportedLanguagesAsync(Tweetinvi.Parameters.IGetSupportedLanguagesParameters)">
            <summary>
            Get Twitter supported languages
            </summary>
            <para> https://developer.twitter.com/en/docs/developer-utilities/supported-languages/api-reference/get-help-languages </para>
            <returns>Twitter supported languages</returns>
        </member>
        <member name="M:Tweetinvi.Client.IHelpClient.GetPlaceAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IHelpClient.GetPlaceAsync(Tweetinvi.Parameters.IGetPlaceParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IHelpClient.GetPlaceAsync(Tweetinvi.Parameters.IGetPlaceParameters)">
            <summary>
            Get a place information from place identifier.
            </summary>
            <para> https://developer.twitter.com/en/docs/geo/place-information/api-reference/get-geo-id-place_id </para>
            <returns>Requested Place</returns>
        </member>
        <member name="M:Tweetinvi.Client.IHelpClient.SearchGeoAsync(Tweetinvi.Parameters.IGeoSearchParameters)">
            <summary>
            Search for places that can be attached to a statuses/update. Given a latitude and a longitude pair, an IP address, or a name.
            </summary>
            <para> https://developer.twitter.com/en/docs/geo/places-near-location/api-reference/get-geo-search </para>
            <returns>Places matching search</returns>
        </member>
        <member name="M:Tweetinvi.Client.IHelpClient.SearchGeoReverseAsync(Tweetinvi.Models.ICoordinates)">
            <inheritdoc cref="M:Tweetinvi.Client.IHelpClient.SearchGeoReverseAsync(Tweetinvi.Parameters.IGeoSearchReverseParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IHelpClient.SearchGeoReverseAsync(Tweetinvi.Parameters.IGeoSearchReverseParameters)">
            <summary>
            Given a latitude and a longitude, searches for up to 20 places.
            </summary>
            <para> https://developer.twitter.com/en/docs/geo/places-near-location/api-reference/get-geo-reverse_geocode </para>
            <returns>Places matching the search</returns>
        </member>
        <member name="M:Tweetinvi.Client.IJsonClient.Serialize``1(``0)">
            <summary>
            Serializes a Twitter object in such a way that it can be deserialized by Tweetinvi
            </summary>
            <typeparam name="TFrom">Type of the object to serialize</typeparam>
            <returns>Json serialized object</returns>
        </member>
        <member name="M:Tweetinvi.Client.IJsonClient.Serialize``2(``0)">
            <summary>
            Serializes a Twitter object in such a way that it can be deserialized by Tweetinvi
            </summary>
            <typeparam name="TFrom">Type of the object to serialize</typeparam>
            <typeparam name="TTo">Type that the object will be serialized</typeparam>
            <returns>Json serialized object</returns>
        </member>
        <member name="M:Tweetinvi.Client.IJsonClient.Deserialize``1(System.String)">
            <summary>
            Deserializes json into a dto object
            </summary>
            <returns>DTO</returns>
        </member>
        <member name="P:Tweetinvi.Client.IListsClient.ParametersValidator">
            <summary>
            Validate all the List client parameters
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.CreateListAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.CreateListAsync(Tweetinvi.Parameters.ICreateListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.CreateListAsync(System.String,Tweetinvi.Models.PrivacyMode)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.CreateListAsync(Tweetinvi.Parameters.ICreateListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.CreateListAsync(Tweetinvi.Parameters.ICreateListParameters)">
            <summary>
            Create a list on Twitter
            </summary>
            <para> https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-create </para>
            <returns>Created list</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetListAsync(Tweetinvi.Parameters.IGetListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListAsync(System.String,Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetListAsync(Tweetinvi.Parameters.IGetListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListAsync(Tweetinvi.Models.ITwitterListIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetListAsync(Tweetinvi.Parameters.IGetListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListAsync(Tweetinvi.Parameters.IGetListParameters)">
            <summary>
            Get a specific list from Twitter
            </summary>
            <para> https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-show </para>
            <returns>List requested</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListsSubscribedByAccountAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetListsSubscribedByAccountAsync(Tweetinvi.Parameters.IGetListsSubscribedByAccountParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListsSubscribedByAccountAsync(Tweetinvi.Parameters.IGetListsSubscribedByAccountParameters)">
            <summary>
            Get lists subscribed by the current account
            </summary>
            <para> https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-list </para>
            <returns>Account user's lists</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListsSubscribedByUserAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetListsSubscribedByUserAsync(Tweetinvi.Parameters.IGetListsSubscribedByUserParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListsSubscribedByUserAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetListsSubscribedByUserAsync(Tweetinvi.Parameters.IGetListsSubscribedByUserParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListsSubscribedByUserAsync(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetListsSubscribedByUserAsync(Tweetinvi.Parameters.IGetListsSubscribedByUserParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListsSubscribedByUserAsync(Tweetinvi.Parameters.IGetListsSubscribedByUserParameters)">
            <summary>
            Get lists subscribed by a specific user
            </summary>
            <para> https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-list </para>
            <returns>User's lists</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.UpdateListAsync(Tweetinvi.Parameters.IUpdateListParameters)">
            <summary>
            Update information of a Twitter list
            </summary>
            <para> https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-update </para>
            <returns>Updated list</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.DestroyListAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.DestroyListAsync(Tweetinvi.Parameters.IDestroyListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.DestroyListAsync(System.String,Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.DestroyListAsync(Tweetinvi.Parameters.IDestroyListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.DestroyListAsync(Tweetinvi.Models.ITwitterListIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.DestroyListAsync(Tweetinvi.Parameters.IDestroyListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.DestroyListAsync(Tweetinvi.Parameters.IDestroyListParameters)">
            <summary>
            Destroy a list from Twitter
            </summary>
            <para> https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-destroy </para>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListsOwnedByAccountAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetListsOwnedByAccountAsync(Tweetinvi.Parameters.IGetListsOwnedByAccountParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListsOwnedByAccountAsync(Tweetinvi.Parameters.IGetListsOwnedByAccountParameters)">
            <summary>
            Get the lists owned by the account
            </summary>
            <para> https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-ownerships </para>
            <returns>Lists owned by the account</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListsOwnedByAccountIterator">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetListsOwnedByAccountIterator(Tweetinvi.Parameters.IGetListsOwnedByAccountParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListsOwnedByAccountIterator(Tweetinvi.Parameters.IGetListsOwnedByAccountParameters)">
            <summary>
            Get the lists owned by the account
            </summary>
            <para> https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-ownerships </para>
            <returns>An iterator over the lists owned by the account</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListsOwnedByUserAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetListsOwnedByUserAsync(Tweetinvi.Parameters.IGetListsOwnedByUserParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListsOwnedByUserAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetListsOwnedByUserAsync(Tweetinvi.Parameters.IGetListsOwnedByUserParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListsOwnedByUserAsync(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetListsOwnedByUserAsync(Tweetinvi.Parameters.IGetListsOwnedByUserParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListsOwnedByUserAsync(Tweetinvi.Parameters.IGetListsOwnedByUserParameters)">
            <summary>
            Get the lists owned by a user
            </summary>
            <para> https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-ownerships </para>
            <returns>Lists owned by a user</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListsOwnedByUserIterator(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetListsOwnedByUserIterator(Tweetinvi.Parameters.IGetListsOwnedByUserParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListsOwnedByUserIterator(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetListsOwnedByUserIterator(Tweetinvi.Parameters.IGetListsOwnedByUserParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListsOwnedByUserIterator(Tweetinvi.Models.IUser)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetListsOwnedByUserIterator(Tweetinvi.Parameters.IGetListsOwnedByUserParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListsOwnedByUserIterator(Tweetinvi.Parameters.IGetListsOwnedByUserParameters)">
            <summary>
            Get the lists owned by a user
            </summary>
            <para> https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-ownerships </para>
            <returns>An iterator over the lists owned by the user</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.AddMemberToListAsync(System.Int64,System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.AddMemberToListAsync(Tweetinvi.Parameters.IAddMemberToListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.AddMemberToListAsync(Tweetinvi.Models.ITwitterListIdentifier,System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.AddMemberToListAsync(Tweetinvi.Parameters.IAddMemberToListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.AddMemberToListAsync(Tweetinvi.Models.ITwitterListIdentifier,System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.AddMemberToListAsync(Tweetinvi.Parameters.IAddMemberToListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.AddMemberToListAsync(Tweetinvi.Models.ITwitterListIdentifier,Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.AddMemberToListAsync(Tweetinvi.Parameters.IAddMemberToListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.AddMemberToListAsync(Tweetinvi.Parameters.IAddMemberToListParameters)">
            <summary>
            Add a member to a twitter list
            </summary>
            <para> https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-members-create </para>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.AddMembersToListAsync(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.AddMembersToListAsync(Tweetinvi.Parameters.IAddMembersToListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.AddMembersToListAsync(System.Int64,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.AddMembersToListAsync(Tweetinvi.Parameters.IAddMembersToListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.AddMembersToListAsync(System.Int64,System.Collections.Generic.IEnumerable{Tweetinvi.Models.IUserIdentifier})">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.AddMembersToListAsync(Tweetinvi.Parameters.IAddMembersToListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.AddMembersToListAsync(Tweetinvi.Models.ITwitterListIdentifier,System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.AddMembersToListAsync(Tweetinvi.Parameters.IAddMembersToListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.AddMembersToListAsync(Tweetinvi.Models.ITwitterListIdentifier,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.AddMembersToListAsync(Tweetinvi.Parameters.IAddMembersToListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.AddMembersToListAsync(Tweetinvi.Models.ITwitterListIdentifier,System.Collections.Generic.IEnumerable{Tweetinvi.Models.IUserIdentifier})">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.AddMembersToListAsync(Tweetinvi.Parameters.IAddMembersToListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.AddMembersToListAsync(Tweetinvi.Parameters.IAddMembersToListParameters)">
            <summary>
            Add multiple members to a list
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-members-create_all </para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetAccountListMembershipsAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetAccountListMembershipsAsync(Tweetinvi.Parameters.IGetAccountListMembershipsParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetAccountListMembershipsAsync(Tweetinvi.Parameters.IGetAccountListMembershipsParameters)">
            <summary>
            Get the lists the account is member of
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-memberships </para>
            </summary>
            <returns>Lists the account is member of</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetAccountListMembershipsIterator">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetAccountListMembershipsIterator(Tweetinvi.Parameters.IGetAccountListMembershipsParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetAccountListMembershipsIterator(Tweetinvi.Parameters.IGetAccountListMembershipsParameters)">
            <summary>
            Get an iterator to retrieve all the lists the account is member of
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-memberships </para>
            </summary>
            <returns>An iterator to retrieve all the lists the account is member of</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetUserListMembershipsAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetUserListMembershipsAsync(Tweetinvi.Parameters.IGetUserListMembershipsParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetUserListMembershipsAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetUserListMembershipsAsync(Tweetinvi.Parameters.IGetUserListMembershipsParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetUserListMembershipsAsync(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetUserListMembershipsAsync(Tweetinvi.Parameters.IGetUserListMembershipsParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetUserListMembershipsAsync(Tweetinvi.Parameters.IGetUserListMembershipsParameters)">
            <summary>
            Get an iterator to retrieve all the lists a user is member of
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-memberships </para>
            </summary>
            <returns>Lists a user is member of</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetUserListMembershipsIterator(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetUserListMembershipsIterator(Tweetinvi.Parameters.IGetUserListMembershipsParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetUserListMembershipsIterator(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetUserListMembershipsIterator(Tweetinvi.Parameters.IGetUserListMembershipsParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetUserListMembershipsIterator(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetUserListMembershipsIterator(Tweetinvi.Parameters.IGetUserListMembershipsParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetUserListMembershipsIterator(Tweetinvi.Parameters.IGetUserListMembershipsParameters)">
            <summary>
            Get an iterator to retrieve all the lists a user is member of
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-memberships </para>
            </summary>
            <returns>An iterator to retrieve all the lists a user is member of</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetMembersOfListAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetMembersOfListAsync(Tweetinvi.Parameters.IGetMembersOfListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetMembersOfListAsync(Tweetinvi.Models.ITwitterListIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetMembersOfListAsync(Tweetinvi.Parameters.IGetMembersOfListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetMembersOfListAsync(Tweetinvi.Parameters.IGetMembersOfListParameters)">
            <summary>
            Get the members of the specified list.
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-members </para>
            </summary>
            <returns>Members of the list</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetMembersOfListIterator(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetMembersOfListIterator(Tweetinvi.Parameters.IGetMembersOfListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetMembersOfListIterator(Tweetinvi.Models.ITwitterListIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetMembersOfListIterator(Tweetinvi.Parameters.IGetMembersOfListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetMembersOfListIterator(Tweetinvi.Parameters.IGetMembersOfListParameters)">
            <summary>
            Get the members of the specified list.
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-members </para>
            </summary>
            <returns>An iterator to list the users members of the list</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.CheckIfUserIsMemberOfListAsync(System.Int64,System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.CheckIfUserIsMemberOfListAsync(Tweetinvi.Parameters.ICheckIfUserIsMemberOfListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.CheckIfUserIsMemberOfListAsync(System.Int64,System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.CheckIfUserIsMemberOfListAsync(Tweetinvi.Parameters.ICheckIfUserIsMemberOfListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.CheckIfUserIsMemberOfListAsync(System.Int64,Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.CheckIfUserIsMemberOfListAsync(Tweetinvi.Parameters.ICheckIfUserIsMemberOfListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.CheckIfUserIsMemberOfListAsync(Tweetinvi.Models.ITwitterListIdentifier,System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.CheckIfUserIsMemberOfListAsync(Tweetinvi.Parameters.ICheckIfUserIsMemberOfListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.CheckIfUserIsMemberOfListAsync(Tweetinvi.Models.ITwitterListIdentifier,System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.CheckIfUserIsMemberOfListAsync(Tweetinvi.Parameters.ICheckIfUserIsMemberOfListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.CheckIfUserIsMemberOfListAsync(Tweetinvi.Models.ITwitterListIdentifier,Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.CheckIfUserIsMemberOfListAsync(Tweetinvi.Parameters.ICheckIfUserIsMemberOfListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.CheckIfUserIsMemberOfListAsync(Tweetinvi.Parameters.ICheckIfUserIsMemberOfListParameters)">
            <summary>
            Check if a user is a member of a list
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-members-show </para>
            </summary>
            <returns>Returns whether the user is a member of a list</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.RemoveMemberFromListAsync(System.Int64,System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.RemoveMemberFromListAsync(Tweetinvi.Parameters.IRemoveMemberFromListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.RemoveMemberFromListAsync(System.Int64,System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.RemoveMemberFromListAsync(Tweetinvi.Parameters.IRemoveMemberFromListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.RemoveMemberFromListAsync(System.Int64,Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.RemoveMemberFromListAsync(Tweetinvi.Parameters.IRemoveMemberFromListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.RemoveMemberFromListAsync(Tweetinvi.Models.ITwitterListIdentifier,System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.RemoveMemberFromListAsync(Tweetinvi.Parameters.IRemoveMemberFromListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.RemoveMemberFromListAsync(Tweetinvi.Models.ITwitterListIdentifier,System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.RemoveMemberFromListAsync(Tweetinvi.Parameters.IRemoveMemberFromListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.RemoveMemberFromListAsync(Tweetinvi.Models.ITwitterListIdentifier,Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.RemoveMemberFromListAsync(Tweetinvi.Parameters.IRemoveMemberFromListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.RemoveMemberFromListAsync(Tweetinvi.Parameters.IRemoveMemberFromListParameters)">
            <summary>
            Remove a member from a list
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-members-destroy </para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.RemoveMembersFromListAsync(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.RemoveMembersFromListAsync(Tweetinvi.Parameters.IRemoveMembersFromListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.RemoveMembersFromListAsync(System.Int64,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.RemoveMembersFromListAsync(Tweetinvi.Parameters.IRemoveMembersFromListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.RemoveMembersFromListAsync(System.Int64,System.Collections.Generic.IEnumerable{Tweetinvi.Models.IUserIdentifier})">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.RemoveMembersFromListAsync(Tweetinvi.Parameters.IRemoveMembersFromListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.RemoveMembersFromListAsync(Tweetinvi.Models.ITwitterListIdentifier,System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.RemoveMembersFromListAsync(Tweetinvi.Parameters.IRemoveMembersFromListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.RemoveMembersFromListAsync(Tweetinvi.Models.ITwitterListIdentifier,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.RemoveMembersFromListAsync(Tweetinvi.Parameters.IRemoveMembersFromListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.RemoveMembersFromListAsync(Tweetinvi.Models.ITwitterListIdentifier,System.Collections.Generic.IEnumerable{Tweetinvi.Models.IUserIdentifier})">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.RemoveMembersFromListAsync(Tweetinvi.Parameters.IRemoveMembersFromListParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.RemoveMembersFromListAsync(Tweetinvi.Parameters.IRemoveMembersFromListParameters)">
            <summary>
            Remove multiple members from a list
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-members-destroy_all </para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.SubscribeToListAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.SubscribeToListAsync(Tweetinvi.Models.ITwitterListIdentifier)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.SubscribeToListAsync(Tweetinvi.Models.ITwitterListIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.SubscribeToListAsync(Tweetinvi.Models.ITwitterListIdentifier)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.SubscribeToListAsync(Tweetinvi.Parameters.ISubscribeToListParameters)">
            <summary>
            Subscribe the authenticated account to the specified list
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-create </para>
            </summary>
            <returns>The latest version of the list</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.UnsubscribeFromListAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.UnsubscribeFromListAsync(Tweetinvi.Parameters.IUnsubscribeFromListParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.UnsubscribeFromListAsync(Tweetinvi.Models.ITwitterListIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.UnsubscribeFromListAsync(Tweetinvi.Parameters.IUnsubscribeFromListParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.UnsubscribeFromListAsync(Tweetinvi.Parameters.IUnsubscribeFromListParameters)">
            <summary>
            Unsubscribe the authenticated account from the specified list
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-destroy </para>
            </summary>
            <returns>The latest version of the list</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListSubscribersAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetListSubscribersAsync(Tweetinvi.Models.ITwitterListIdentifier)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListSubscribersAsync(Tweetinvi.Models.ITwitterListIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetListSubscribersAsync(Tweetinvi.Models.ITwitterListIdentifier)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListSubscribersAsync(Tweetinvi.Parameters.IGetListSubscribersParameters)">
            <summary>
            Returns the users subscribed to a list
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers </para>
            </summary>
            <returns>Subscribers of the list</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListSubscribersIterator(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetListSubscribersIterator(Tweetinvi.Models.ITwitterListIdentifier)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListSubscribersIterator(Tweetinvi.Models.ITwitterListIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetListSubscribersIterator(Tweetinvi.Models.ITwitterListIdentifier)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetListSubscribersIterator(Tweetinvi.Parameters.IGetListSubscribersParameters)">
            <summary>
            Returns the users subscribed to a list
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers </para>
            </summary>
            <returns>An iterator to get through the subscribers of the list</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetAccountListSubscriptionsAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetAccountListSubscriptionsAsync(Tweetinvi.Parameters.IGetAccountListSubscriptionsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetAccountListSubscriptionsAsync(Tweetinvi.Parameters.IGetAccountListSubscriptionsParameters)">
            <summary>
            Returns the lists the account subscribed to
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-subscriptions </para>
            </summary>
            <returns>Lists the authenticated user is subscribed to</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetAccountListSubscriptionsIterator">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetAccountListSubscriptionsIterator(Tweetinvi.Parameters.IGetAccountListSubscriptionsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetAccountListSubscriptionsIterator(Tweetinvi.Parameters.IGetAccountListSubscriptionsParameters)">
            <summary>
            Returns the lists the account subscribed to
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-subscriptions </para>
            </summary>
            <returns>An iterator the get though the lists the account subscribed to</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetUserListSubscriptionsAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetUserListSubscriptionsAsync(Tweetinvi.Parameters.IGetUserListSubscriptionsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetUserListSubscriptionsAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetUserListSubscriptionsAsync(Tweetinvi.Parameters.IGetUserListSubscriptionsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetUserListSubscriptionsAsync(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetUserListSubscriptionsAsync(Tweetinvi.Parameters.IGetUserListSubscriptionsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetUserListSubscriptionsAsync(Tweetinvi.Parameters.IGetUserListSubscriptionsParameters)">
            <summary>
            Returns the lists a user subscribed to
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-subscriptions </para>
            </summary>
            <returns>Lists a user subscribed to</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetUserListSubscriptionsIterator(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetUserListSubscriptionsIterator(Tweetinvi.Parameters.IGetUserListSubscriptionsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetUserListSubscriptionsIterator(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetUserListSubscriptionsIterator(Tweetinvi.Parameters.IGetUserListSubscriptionsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetUserListSubscriptionsIterator(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetUserListSubscriptionsIterator(Tweetinvi.Parameters.IGetUserListSubscriptionsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetUserListSubscriptionsIterator(Tweetinvi.Parameters.IGetUserListSubscriptionsParameters)">
            <summary>
            Returns the lists a user subscribed to
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-subscriptions </para>
            </summary>
            <returns>An iterator the get though the lists a user subscribed to</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.CheckIfUserIsSubscriberOfListAsync(System.Int64,System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.CheckIfUserIsSubscriberOfListAsync(Tweetinvi.Parameters.ICheckIfUserIsSubscriberOfListParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.CheckIfUserIsSubscriberOfListAsync(System.Int64,System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.CheckIfUserIsSubscriberOfListAsync(Tweetinvi.Parameters.ICheckIfUserIsSubscriberOfListParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.CheckIfUserIsSubscriberOfListAsync(System.Int64,Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.CheckIfUserIsSubscriberOfListAsync(Tweetinvi.Parameters.ICheckIfUserIsSubscriberOfListParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.CheckIfUserIsSubscriberOfListAsync(Tweetinvi.Models.ITwitterListIdentifier,System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.CheckIfUserIsSubscriberOfListAsync(Tweetinvi.Parameters.ICheckIfUserIsSubscriberOfListParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.CheckIfUserIsSubscriberOfListAsync(Tweetinvi.Models.ITwitterListIdentifier,System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.CheckIfUserIsSubscriberOfListAsync(Tweetinvi.Parameters.ICheckIfUserIsSubscriberOfListParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.CheckIfUserIsSubscriberOfListAsync(Tweetinvi.Models.ITwitterListIdentifier,Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.CheckIfUserIsSubscriberOfListAsync(Tweetinvi.Parameters.ICheckIfUserIsSubscriberOfListParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.CheckIfUserIsSubscriberOfListAsync(Tweetinvi.Parameters.ICheckIfUserIsSubscriberOfListParameters)">
            <summary>
            Check if a user is a subscriber of a list
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers-show </para>
            </summary>
            <returns>Whether the user is a subscriber of the list</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetTweetsFromListAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetTweetsFromListAsync(Tweetinvi.Parameters.IGetTweetsFromListParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetTweetsFromListAsync(Tweetinvi.Models.ITwitterListIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetTweetsFromListAsync(Tweetinvi.Parameters.IGetTweetsFromListParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetTweetsFromListAsync(Tweetinvi.Parameters.IGetTweetsFromListParameters)">
            <summary>
            Returns the tweets authored by the members of the list.
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-statuses </para>
            </summary>
            <returns>Tweets of a list</returns>
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetTweetsFromListIterator(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetTweetsFromListIterator(Tweetinvi.Parameters.IGetTweetsFromListParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetTweetsFromListIterator(Tweetinvi.Models.ITwitterListIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetTweetsFromListIterator(Tweetinvi.Parameters.IGetTweetsFromListParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IListsClient.GetTweetsFromListIterator(Tweetinvi.Parameters.IGetTweetsFromListParameters)">
            <summary>
            Returns the tweets authored by the members of the list.
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-statuses </para>
            </summary>
            <returns>An iterator to get through the tweets of a list</returns>
        </member>
        <member name="P:Tweetinvi.Client.IMessagesClient.ParametersValidator">
            <summary>
            Validate all the message client parameters
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IMessagesClient.PublishMessageAsync(System.String,Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IMessagesClient.PublishMessageAsync(Tweetinvi.Parameters.IPublishMessageParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IMessagesClient.PublishMessageAsync(System.String,System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IMessagesClient.PublishMessageAsync(Tweetinvi.Parameters.IPublishMessageParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IMessagesClient.PublishMessageAsync(Tweetinvi.Parameters.IPublishMessageParameters)">
            <summary>
            Publishes a private message
            </summary>
            <para> https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/api-reference/new-event </para>
            <returns>Message published</returns>
        </member>
        <member name="M:Tweetinvi.Client.IMessagesClient.GetMessageAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IMessagesClient.GetMessageAsync(Tweetinvi.Parameters.IGetMessageParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IMessagesClient.GetMessageAsync(Tweetinvi.Parameters.IGetMessageParameters)">
            <summary>
            Gets a specific message
            </summary>
            <para> https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/api-reference/get-event </para>
            <returns>Requested message</returns>
        </member>
        <member name="M:Tweetinvi.Client.IMessagesClient.GetMessagesAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IMessagesClient.GetMessagesAsync(Tweetinvi.Parameters.IGetMessagesParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IMessagesClient.GetMessagesAsync(Tweetinvi.Parameters.IGetMessagesParameters)">
            <summary>
            Gets latest messages
            </summary>
            <para> https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/api-reference/list-events </para>
            <returns>List the recent messages of the user</returns>
        </member>
        <member name="M:Tweetinvi.Client.IMessagesClient.GetMessagesIterator">
            <inheritdoc cref="M:Tweetinvi.Client.IMessagesClient.GetMessagesIterator(Tweetinvi.Parameters.IGetMessagesParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IMessagesClient.GetMessagesIterator(Tweetinvi.Parameters.IGetMessagesParameters)">
            <summary>
            Gets latest messages
            </summary>
            <para> https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/api-reference/list-events </para>
            <returns>An iterator to list the recent messages of the user</returns>
        </member>
        <member name="M:Tweetinvi.Client.IMessagesClient.DestroyMessageAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IMessagesClient.DestroyMessageAsync(Tweetinvi.Parameters.IDeleteMessageParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IMessagesClient.DestroyMessageAsync(Tweetinvi.Models.IMessage)">
            <inheritdoc cref="M:Tweetinvi.Client.IMessagesClient.DestroyMessageAsync(Tweetinvi.Parameters.IDeleteMessageParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IMessagesClient.DestroyMessageAsync(Tweetinvi.Parameters.IDeleteMessageParameters)">
            <summary>
            Destroy a specific message
            </summary>
            <para> https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/guides/direct-message-migration </para>
        </member>
        <member name="M:Tweetinvi.Client.IRateLimitsClient.InitializeRateLimitsManagerAsync">
            <summary>
            Load the client's rate limits in the cache
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IRateLimitsClient.GetRateLimitsAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IRateLimitsClient.GetRateLimitsAsync(Tweetinvi.Parameters.IGetRateLimitsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IRateLimitsClient.GetRateLimitsAsync(Tweetinvi.Parameters.RateLimitsSource)">
            <inheritdoc cref="M:Tweetinvi.Client.IRateLimitsClient.GetRateLimitsAsync(Tweetinvi.Parameters.IGetRateLimitsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IRateLimitsClient.GetRateLimitsAsync(Tweetinvi.Parameters.IGetRateLimitsParameters)">
            <summary>
            Get the rate limits of the current client
            </summary>
            <para> Read more : https://developer.twitter.com/en/docs/developer-utilities/rate-limit-status/api-reference/get-application-rate_limit_status </para>
            <returns>The client's rate limits</returns>
        </member>
        <member name="M:Tweetinvi.Client.IRateLimitsClient.GetEndpointRateLimitAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IRateLimitsClient.GetEndpointRateLimitAsync(Tweetinvi.Parameters.IGetEndpointRateLimitsParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IRateLimitsClient.GetEndpointRateLimitAsync(System.String,Tweetinvi.Parameters.RateLimitsSource)">
            <inheritdoc cref="M:Tweetinvi.Client.IRateLimitsClient.GetEndpointRateLimitAsync(Tweetinvi.Parameters.IGetEndpointRateLimitsParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IRateLimitsClient.GetEndpointRateLimitAsync(Tweetinvi.Parameters.IGetEndpointRateLimitsParameters)">
            <summary>
            Get a specific endpoint's rate limits of the current client
            </summary>
            <para> Read more : https://developer.twitter.com/en/docs/developer-utilities/rate-limit-status/api-reference/get-application-rate_limit_status </para>
            <returns>The endpoint's rate limits, or null if the endpoint is not support by Tweetinvi</returns>
        </member>
        <member name="M:Tweetinvi.Client.IRateLimitsClient.WaitForQueryRateLimitAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IRateLimitsClient.WaitForQueryRateLimitAsync(Tweetinvi.Models.IEndpointRateLimit)" />
        </member>
        <member name="M:Tweetinvi.Client.IRateLimitsClient.WaitForQueryRateLimitAsync(System.String,Tweetinvi.Parameters.RateLimitsSource)">
            <inheritdoc cref="M:Tweetinvi.Client.IRateLimitsClient.WaitForQueryRateLimitAsync(Tweetinvi.Models.IEndpointRateLimit)" />
        </member>
        <member name="M:Tweetinvi.Client.IRateLimitsClient.WaitForQueryRateLimitAsync(Tweetinvi.Models.IEndpointRateLimit)">
            <summary>
            Wait for new requests to a specific endpoint become available
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IRateLimitsClient.ClearRateLimitCacheAsync(Tweetinvi.Models.IReadOnlyTwitterCredentials)">
            <summary>
            Clear the rate limits cached for a specific set of credentials
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IRateLimitsClient.ClearRateLimitCacheAsync">
            <summary>
            Clear the rate limits cached for the client's credentials
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IRateLimitsClient.ClearAllRateLimitCacheAsync">
            <summary>
            Clear the rate limits of all the credentials
            </summary>
        </member>
        <member name="P:Tweetinvi.Client.ISearchClient.ParametersValidator">
            <summary>
            Validate all the Search client parameters
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.ISearchClient.SearchTweetsAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.ISearchClient.SearchTweetsAsync(Tweetinvi.Parameters.ISearchTweetsParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.ISearchClient.SearchTweetsAsync(Tweetinvi.Models.IGeoCode)">
            <inheritdoc cref="M:Tweetinvi.Client.ISearchClient.SearchTweetsWithMetadataAsync(Tweetinvi.Parameters.ISearchTweetsParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.ISearchClient.SearchTweetsAsync(Tweetinvi.Parameters.ISearchTweetsParameters)">
            <summary>
            Search for tweets
            </summary>
            <para> Read more : https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets </para>
            <returns>Tweets matching the search</returns>
        </member>
        <member name="M:Tweetinvi.Client.ISearchClient.SearchTweetsWithMetadataAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.ISearchClient.SearchTweetsWithMetadataAsync(Tweetinvi.Parameters.ISearchTweetsParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.ISearchClient.SearchTweetsWithMetadataAsync(Tweetinvi.Parameters.ISearchTweetsParameters)">
            <summary>
            Search for tweets
            </summary>
            <para> Read more : https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets </para>
            <returns>Tweets matching the search with search metadata</returns>
        </member>
        <member name="M:Tweetinvi.Client.ISearchClient.GetSearchTweetsIterator(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.ISearchClient.GetSearchTweetsIterator(Tweetinvi.Parameters.ISearchTweetsParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.ISearchClient.GetSearchTweetsIterator(Tweetinvi.Parameters.ISearchTweetsParameters)">
            <summary>
            Search for tweets
            </summary>
            <para> Read more : https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets </para>
            <returns>Iterator over the search results</returns>
        </member>
        <member name="M:Tweetinvi.Client.ISearchClient.FilterTweets(Tweetinvi.Models.ITweet[],System.Nullable{Tweetinvi.Parameters.Enum.OnlyGetTweetsThatAre},System.Boolean)">
            <summary>
            Simple set of filters for tweets
            </summary>
            <param name="tweets">Tweets you want to filter</param>
            <param name="filter">What type of tweets you wish to get</param>
            <param name="tweetsMustContainGeoInformation">Whether or not the tweet should contain geo information</param>
            <returns>Filtered set of tweets</returns>
        </member>
        <member name="M:Tweetinvi.Client.ISearchClient.SearchUsersAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.ISearchClient.SearchUsersAsync(Tweetinvi.Parameters.ISearchUsersParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.ISearchClient.SearchUsersAsync(Tweetinvi.Parameters.ISearchUsersParameters)">
            <summary>
            Search for tweets
            </summary>
            <para> Read more : https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-users-search </para>
            <returns>Users matching the search</returns>
        </member>
        <member name="M:Tweetinvi.Client.ISearchClient.GetSearchUsersIterator(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.ISearchClient.GetSearchUsersIterator(Tweetinvi.Parameters.ISearchUsersParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.ISearchClient.GetSearchUsersIterator(Tweetinvi.Parameters.ISearchUsersParameters)">
            <summary>
            Search for users
            </summary>
            <para> Read more : https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-users-search </para>
            <returns>Iterator over the search results</returns>
        </member>
        <member name="M:Tweetinvi.Client.ISearchClient.CreateSavedSearchAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.ISearchClient.CreateSavedSearchAsync(Tweetinvi.Parameters.ICreateSavedSearchParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.ISearchClient.CreateSavedSearchAsync(Tweetinvi.Parameters.ICreateSavedSearchParameters)">
            <summary>
            Create a saved search
            </summary>
            <para> Read more : https://developer.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/post-saved_searches-create </para>
            <returns>Created saved search</returns>
        </member>
        <member name="M:Tweetinvi.Client.ISearchClient.GetSavedSearchAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.ISearchClient.GetSavedSearchAsync(Tweetinvi.Parameters.IGetSavedSearchParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.ISearchClient.GetSavedSearchAsync(Tweetinvi.Parameters.IGetSavedSearchParameters)">
            <summary>
            Get an existing saved search
            </summary>
            <para> Read more : https://developer.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/get-saved_searches-show-id </para>
            <returns>Requested saved search</returns>
        </member>
        <member name="M:Tweetinvi.Client.ISearchClient.ListSavedSearchesAsync">
            <inheritdoc cref="M:Tweetinvi.Client.ISearchClient.ListSavedSearchesAsync(Tweetinvi.Parameters.IListSavedSearchesParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.ISearchClient.ListSavedSearchesAsync(Tweetinvi.Parameters.IListSavedSearchesParameters)">
            <summary>
            List account's saved searches
            </summary>
            <para> Read more : https://developer.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/get-saved_searches-list </para>
            <returns>Account's saved searches</returns>
        </member>
        <member name="M:Tweetinvi.Client.ISearchClient.DestroySavedSearchAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.ISearchClient.DestroySavedSearchAsync(Tweetinvi.Parameters.IDestroySavedSearchParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.ISearchClient.DestroySavedSearchAsync(Tweetinvi.Models.ISavedSearch)">
            <inheritdoc cref="M:Tweetinvi.Client.ISearchClient.DestroySavedSearchAsync(Tweetinvi.Parameters.IDestroySavedSearchParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.ISearchClient.DestroySavedSearchAsync(Tweetinvi.Parameters.IDestroySavedSearchParameters)">
            <summary>
            Destroys a saved search
            </summary>
            <para> Read more : https://developer.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/post-saved_searches-destroy-id </para>
            <returns>Deleted search</returns>
        </member>
        <member name="M:Tweetinvi.Client.IStreamsClient.CreateSampleStream">
            <inheritdoc cref="M:Tweetinvi.Client.IStreamsClient.CreateSampleStream(Tweetinvi.Parameters.ICreateSampleStreamParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IStreamsClient.CreateSampleStream(Tweetinvi.Parameters.ICreateSampleStreamParameters)">
            <summary>
            Create a stream notifying that a random tweets has been created.
            https://dev.twitter.com/streaming/reference/get/statuses/sample
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IStreamsClient.CreateFilteredStream">
            <inheritdoc cref="M:Tweetinvi.Client.IStreamsClient.CreateFilteredStream(Tweetinvi.Parameters.ICreateFilteredTweetStreamParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IStreamsClient.CreateFilteredStream(Tweetinvi.Parameters.ICreateFilteredTweetStreamParameters)">
            <summary>
            Create a stream notifying the client when a tweet matching the specified criteria is created.
            https://dev.twitter.com/streaming/reference/post/statuses/filter
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IStreamsClient.CreateTweetStream">
            <inheritdoc cref="M:Tweetinvi.Client.IStreamsClient.CreateTweetStream(Tweetinvi.Parameters.ICreateTweetStreamParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IStreamsClient.CreateTweetStream(Tweetinvi.Parameters.ICreateTweetStreamParameters)">
            <summary>
            Create a stream that receive tweets
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IStreamsClient.CreateTrackedTweetStream">
            <inheritdoc cref="M:Tweetinvi.Client.IStreamsClient.CreateTrackedTweetStream(Tweetinvi.Parameters.ICreateTrackedTweetStreamParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.IStreamsClient.CreateTrackedTweetStream(Tweetinvi.Parameters.ICreateTrackedTweetStreamParameters)">
            <summary>
            Create a stream that receive tweets. In addition this stream allow you to filter the results received.
            </summary>
        </member>
        <member name="P:Tweetinvi.Client.ITimelinesClient.ParametersValidator">
            <summary>
            Validate all the Timelines client parameters
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.ITimelinesClient.GetHomeTimelineAsync">
            <inheritdoc cref="M:Tweetinvi.Client.ITimelinesClient.GetHomeTimelineAsync(Tweetinvi.Parameters.IGetHomeTimelineParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITimelinesClient.GetHomeTimelineAsync(Tweetinvi.Parameters.IGetHomeTimelineParameters)">
             <summary>
             Returns a collection of the most recent Tweets and Retweets posted by the authenticated user and the users they follow.
             The home timeline is central to how most users interact with the Twitter service.
            
             Up to 800 Tweets are obtainable on the home timeline.
             It is more volatile for users that follow many users or follow users who Tweet frequently.
             </summary>
             <para>Read more : https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-home_timeline </para>
             <returns>List the of tweets displayed on the authenticated user's home page</returns>
        </member>
        <member name="M:Tweetinvi.Client.ITimelinesClient.GetHomeTimelineIterator">
            <inheritdoc cref="M:Tweetinvi.Client.ITimelinesClient.GetHomeTimelineIterator(Tweetinvi.Parameters.IGetHomeTimelineParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITimelinesClient.GetHomeTimelineIterator(Tweetinvi.Parameters.IGetHomeTimelineParameters)">
             <summary>
             Returns a collection of the most recent Tweets and Retweets posted by the authenticated user and the users they follow.
             The home timeline is central to how most users interact with the Twitter service.
            
             Up to 800 Tweets are obtainable on the home timeline.
             It is more volatile for users that follow many users or follow users who Tweet frequently.
             </summary>
             <para>Read more : https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-home_timeline </para>
             <returns>An iterator to list the of tweets displayed on the authenticated user's home page</returns>
        </member>
        <member name="M:Tweetinvi.Client.ITimelinesClient.GetMentionsTimelineAsync">
            <inheritdoc cref="M:Tweetinvi.Client.ITimelinesClient.GetMentionsTimelineAsync(Tweetinvi.Parameters.IGetMentionsTimelineParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITimelinesClient.GetMentionsTimelineAsync(Tweetinvi.Parameters.IGetMentionsTimelineParameters)">
            <summary>
            Returns the most recent mentions (Tweets containing a users's @screen_name) for the authenticated user.
            The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.
            </summary>
            <para>Read more : https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-mentions_timeline </para>
            <returns>List the of tweets mentioning the authenticated user</returns>
        </member>
        <member name="M:Tweetinvi.Client.ITimelinesClient.GetMentionsTimelineIterator">
            <inheritdoc cref="M:Tweetinvi.Client.ITimelinesClient.GetMentionsTimelineIterator(Tweetinvi.Parameters.IGetMentionsTimelineParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITimelinesClient.GetMentionsTimelineIterator(Tweetinvi.Parameters.IGetMentionsTimelineParameters)">
            <summary>
            Returns the most recent mentions (Tweets containing a users's @screen_name) for the authenticated user.
            The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.
            </summary>
            <para>Read more : https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-mentions_timeline </para>
            <returns>An iterator to list the of tweets mentioning the authenticated user</returns>
        </member>
        <member name="M:Tweetinvi.Client.ITimelinesClient.GetUserTimelineAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.ITimelinesClient.GetUserTimelineAsync(Tweetinvi.Parameters.IGetUserTimelineParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITimelinesClient.GetUserTimelineAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.ITimelinesClient.GetUserTimelineAsync(Tweetinvi.Parameters.IGetUserTimelineParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITimelinesClient.GetUserTimelineAsync(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.ITimelinesClient.GetUserTimelineAsync(Tweetinvi.Parameters.IGetUserTimelineParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITimelinesClient.GetUserTimelineAsync(Tweetinvi.Parameters.IGetUserTimelineParameters)">
            <summary>
            Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.
            </summary>
            <para>Read more : https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-user_timeline </para>
            <returns>Tweets visible in the user's timeline</returns>
        </member>
        <member name="M:Tweetinvi.Client.ITimelinesClient.GetUserTimelineIterator(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.ITimelinesClient.GetUserTimelineIterator(Tweetinvi.Parameters.IGetUserTimelineParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITimelinesClient.GetUserTimelineIterator(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.ITimelinesClient.GetUserTimelineIterator(Tweetinvi.Parameters.IGetUserTimelineParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITimelinesClient.GetUserTimelineIterator(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.ITimelinesClient.GetUserTimelineIterator(Tweetinvi.Parameters.IGetUserTimelineParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITimelinesClient.GetUserTimelineIterator(Tweetinvi.Parameters.IGetUserTimelineParameters)">
            <summary>
            Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.
            </summary>
            <para>Read more : https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-user_timeline </para>
            <returns>An iterator to list tweets visible in the user's timeline</returns>
        </member>
        <member name="M:Tweetinvi.Client.ITimelinesClient.GetRetweetsOfMeTimelineAsync">
            <inheritdoc cref="M:Tweetinvi.Client.ITimelinesClient.GetRetweetsOfMeTimelineAsync(Tweetinvi.Parameters.IGetRetweetsOfMeTimelineParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITimelinesClient.GetRetweetsOfMeTimelineAsync(Tweetinvi.Parameters.IGetRetweetsOfMeTimelineParameters)">
            <summary>
            Returns the most recent Tweets authored by the authenticating user that have been retweeted by others.
            This timeline is a subset of the account user's timeline.
            <para>Read more : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweets_of_me </para>
            </summary>
            <returns>The tweets retweeted by others</returns>
        </member>
        <member name="M:Tweetinvi.Client.ITimelinesClient.GetRetweetsOfMeTimelineIterator">
            <inheritdoc cref="M:Tweetinvi.Client.ITimelinesClient.GetRetweetsOfMeTimelineIterator(Tweetinvi.Parameters.IGetRetweetsOfMeTimelineParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITimelinesClient.GetRetweetsOfMeTimelineIterator(Tweetinvi.Parameters.IGetRetweetsOfMeTimelineParameters)">
            <summary>
            Returns the most recent Tweets authored by the authenticating user that have been retweeted by others.
            This timeline is a subset of the account user's timeline.
            <para>Read more : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweets_of_me </para>
            </summary>
            <returns>An iterator to list the tweets that got retweeted by others</returns>
        </member>
        <member name="P:Tweetinvi.Client.ITrendsClient.ParametersValidator">
            <summary>
            Validate all the Trends client parameters
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.ITrendsClient.GetPlaceTrendsAtAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.ITrendsClient.GetPlaceTrendsAtAsync(Tweetinvi.Parameters.TrendsClient.IGetTrendsAtParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.ITrendsClient.GetPlaceTrendsAtAsync(Tweetinvi.Parameters.TrendsClient.IGetTrendsAtParameters)">
            <summary>
            Returns the top 50 trending topics for a specific WOEID
            </summary>
            <para>Read more : https://developer.twitter.com/en/docs/trends/trends-for-location/api-reference/get-trends-place </para>
            <returns>Trending topics</returns>
        </member>
        <member name="M:Tweetinvi.Client.ITrendsClient.GetTrendLocationsAsync">
            <inheritdoc cref="M:Tweetinvi.Client.ITrendsClient.GetTrendLocationsAsync(Tweetinvi.Parameters.TrendsClient.IGetTrendsLocationParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.ITrendsClient.GetTrendLocationsAsync(Tweetinvi.Parameters.TrendsClient.IGetTrendsLocationParameters)">
            <summary>
            Returns the locations that Twitter has trending topic information for.
            </summary>
            <para>Read more : https://developer.twitter.com/en/docs/trends/locations-with-trending-topics/api-reference/get-trends-available </para>
            <returns>Trending locations</returns>
        </member>
        <member name="M:Tweetinvi.Client.ITrendsClient.GetTrendsLocationCloseToAsync(System.Double,System.Double)">
            <inheritdoc cref="M:Tweetinvi.Client.ITrendsClient.GetTrendsLocationCloseToAsync(Tweetinvi.Parameters.TrendsClient.IGetTrendsLocationCloseToParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.ITrendsClient.GetTrendsLocationCloseToAsync(Tweetinvi.Models.ICoordinates)">
            <inheritdoc cref="M:Tweetinvi.Client.ITrendsClient.GetTrendsLocationCloseToAsync(Tweetinvi.Parameters.TrendsClient.IGetTrendsLocationCloseToParameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.ITrendsClient.GetTrendsLocationCloseToAsync(Tweetinvi.Parameters.TrendsClient.IGetTrendsLocationCloseToParameters)">
            <summary>
            Returns the locations that Twitter has trending topic information for, closest to a specified location.
            </summary>
            <para>Read more : https://developer.twitter.com/en/docs/trends/locations-with-trending-topics/api-reference/get-trends-closest </para>
            <returns>Trending locations</returns>
        </member>
        <member name="P:Tweetinvi.Client.ITweetsClient.ParametersValidator">
            <summary>
            Validate all the Tweets client parameters
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetTweetAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.GetTweetAsync(Tweetinvi.Parameters.IGetTweetParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetTweetAsync(Tweetinvi.Parameters.IGetTweetParameters)">
            <summary>
            Get a tweet
            <para>Read more : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-show-id </para>
            </summary>
            <returns>The tweet</returns>
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetTweetsAsync(System.Int64[])">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.GetTweetsAsync(Tweetinvi.Parameters.IGetTweetsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetTweetsAsync(Tweetinvi.Models.ITweetIdentifier[])">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.GetTweetsAsync(Tweetinvi.Parameters.IGetTweetsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetTweetsAsync(Tweetinvi.Parameters.IGetTweetsParameters)">
            <summary>
            Get multiple tweets
            <para>Read more : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-lookup </para>
            </summary>
            <returns>Requested tweets</returns>
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.PublishTweetAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.PublishTweetAsync(Tweetinvi.Parameters.IPublishTweetParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.PublishTweetAsync(Tweetinvi.Parameters.IPublishTweetParameters)">
            <summary>
            Publish a tweet
            <para>Read more : https://dev.twitter.com/rest/reference/post/statuses/update </para>
            </summary>
            <returns>Returns the published tweet</returns>
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.DestroyTweetAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.DestroyTweetAsync(Tweetinvi.Parameters.IDestroyTweetParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.DestroyTweetAsync(Tweetinvi.Models.ITweetIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.DestroyTweetAsync(Tweetinvi.Parameters.IDestroyTweetParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.DestroyTweetAsync(Tweetinvi.Models.ITweet)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.DestroyTweetAsync(Tweetinvi.Parameters.IDestroyTweetParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.DestroyTweetAsync(Tweetinvi.Models.DTO.ITweetDTO)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.DestroyTweetAsync(Tweetinvi.Parameters.IDestroyTweetParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.DestroyTweetAsync(Tweetinvi.Parameters.IDestroyTweetParameters)">
            <summary>
            Destroy a tweet
            <para>Read more : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-statuses-destroy-id </para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetRetweetsAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.GetRetweetsAsync(Tweetinvi.Parameters.IGetRetweetsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetRetweetsAsync(Tweetinvi.Models.ITweetIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.GetRetweetsAsync(Tweetinvi.Parameters.IGetRetweetsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetRetweetsAsync(Tweetinvi.Parameters.IGetRetweetsParameters)">
            <summary>
            Get the retweets associated with a specific tweet
            <para>Read more : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweets-id </para>
            </summary>
            <returns>Retweets</returns>
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.PublishRetweetAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.PublishRetweetAsync(Tweetinvi.Parameters.IPublishRetweetParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.PublishRetweetAsync(Tweetinvi.Models.ITweetIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.PublishRetweetAsync(Tweetinvi.Parameters.IPublishRetweetParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.PublishRetweetAsync(Tweetinvi.Parameters.IPublishRetweetParameters)">
            <summary>
            Publish a retweet
            <para>Read more : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-statuses-retweet-id </para>
            </summary>
            <returns>The retweet</returns>
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.DestroyRetweetAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.DestroyRetweetAsync(Tweetinvi.Parameters.IDestroyRetweetParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.DestroyRetweetAsync(Tweetinvi.Models.ITweetIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.DestroyRetweetAsync(Tweetinvi.Parameters.IDestroyRetweetParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.DestroyRetweetAsync(Tweetinvi.Parameters.IDestroyRetweetParameters)">
            <summary>
            Destroy a retweet
            <para>Read more : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-statuses-unretweet-id </para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetRetweeterIdsAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.GetRetweeterIdsAsync(Tweetinvi.Parameters.IGetRetweeterIdsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetRetweeterIdsAsync(Tweetinvi.Models.ITweetIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.GetRetweeterIdsAsync(Tweetinvi.Parameters.IGetRetweeterIdsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetRetweeterIdsAsync(Tweetinvi.Parameters.IGetRetweeterIdsParameters)">
            <summary>
            Get the ids of the users who retweeted a specific tweet
            <para> Read more : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids </para>
            </summary>
            <returns>List the retweeter ids</returns>
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetRetweeterIdsIterator(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.GetRetweeterIdsIterator(Tweetinvi.Parameters.IGetRetweeterIdsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetRetweeterIdsIterator(Tweetinvi.Models.ITweetIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.GetRetweeterIdsIterator(Tweetinvi.Parameters.IGetRetweeterIdsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetRetweeterIdsIterator(Tweetinvi.Parameters.IGetRetweeterIdsParameters)">
            <summary>
            Get the ids of the users who retweeted a specific tweet
            <para> Read more : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids </para>
            </summary>
            <returns>An iterator to list the retweeter ids</returns>
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetUserFavoriteTweetsAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.GetUserFavoriteTweetsAsync(Tweetinvi.Parameters.IGetUserFavoriteTweetsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetUserFavoriteTweetsAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.GetUserFavoriteTweetsAsync(Tweetinvi.Parameters.IGetUserFavoriteTweetsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetUserFavoriteTweetsAsync(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.GetUserFavoriteTweetsAsync(Tweetinvi.Parameters.IGetUserFavoriteTweetsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetUserFavoriteTweetsAsync(Tweetinvi.Parameters.IGetUserFavoriteTweetsParameters)">
            <summary>
            Get favorite tweets of a user
            <para>Read more : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-favorites-list </para>
            </summary>
            <returns>List the favorite tweets</returns>
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetUserFavoriteTweetsIterator(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.GetUserFavoriteTweetsIterator(Tweetinvi.Parameters.IGetUserFavoriteTweetsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetUserFavoriteTweetsIterator(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.GetUserFavoriteTweetsIterator(Tweetinvi.Parameters.IGetUserFavoriteTweetsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetUserFavoriteTweetsIterator(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.GetUserFavoriteTweetsIterator(Tweetinvi.Parameters.IGetUserFavoriteTweetsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetUserFavoriteTweetsIterator(Tweetinvi.Parameters.IGetUserFavoriteTweetsParameters)">
            <summary>
            Get favorite tweets of a user
            <para>Read more : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-favorites-list </para>
            </summary>
            <returns>An iterator to list the favorite tweets</returns>
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.FavoriteTweetAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.FavoriteTweetAsync(Tweetinvi.Parameters.IFavoriteTweetParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.FavoriteTweetAsync(Tweetinvi.Models.ITweetIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.FavoriteTweetAsync(Tweetinvi.Parameters.IFavoriteTweetParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.FavoriteTweetAsync(Tweetinvi.Models.ITweet)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.FavoriteTweetAsync(Tweetinvi.Parameters.IFavoriteTweetParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.FavoriteTweetAsync(Tweetinvi.Models.DTO.ITweetDTO)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.FavoriteTweetAsync(Tweetinvi.Parameters.IFavoriteTweetParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.FavoriteTweetAsync(Tweetinvi.Parameters.IFavoriteTweetParameters)">
            <summary>
            Favorite a tweet
            </summary>
            <para>Read more : https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-favorites-create </para>
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.UnfavoriteTweetAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.UnfavoriteTweetAsync(Tweetinvi.Parameters.IUnfavoriteTweetParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.UnfavoriteTweetAsync(Tweetinvi.Models.ITweetIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.UnfavoriteTweetAsync(Tweetinvi.Parameters.IUnfavoriteTweetParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.UnfavoriteTweetAsync(Tweetinvi.Models.ITweet)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.UnfavoriteTweetAsync(Tweetinvi.Parameters.IUnfavoriteTweetParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.UnfavoriteTweetAsync(Tweetinvi.Models.DTO.ITweetDTO)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.UnfavoriteTweetAsync(Tweetinvi.Parameters.IUnfavoriteTweetParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.UnfavoriteTweetAsync(Tweetinvi.Parameters.IUnfavoriteTweetParameters)">
            <summary>
            Remove the favorite of a tweet
            </summary>
            <para>Read more : https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-favorites-destroy </para>
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetOEmbedTweetAsync(Tweetinvi.Models.ITweetIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.GetOEmbedTweetAsync(Tweetinvi.Parameters.IGetOEmbedTweetParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetOEmbedTweetAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.GetOEmbedTweetAsync(Tweetinvi.Parameters.IGetOEmbedTweetParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.ITweetsClient.GetOEmbedTweetAsync(Tweetinvi.Parameters.IGetOEmbedTweetParameters)">
            <summary>
            Get an oembed tweet
            </summary>
            <para>Read more : https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-oembed </para>
            <returns>The generated oembed tweet</returns>
        </member>
        <member name="P:Tweetinvi.Client.IUploadClient.ParametersValidator">
            <summary>
            Validate all the Upload client parameters
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IUploadClient.UploadBinaryAsync(System.Byte[])">
            <inheritdoc cref="M:Tweetinvi.Client.IUploadClient.UploadBinaryAsync(Tweetinvi.Parameters.IUploadParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUploadClient.UploadBinaryAsync(Tweetinvi.Parameters.IUploadParameters)">
            <summary>
            Upload a binary in chunks and waits for the Twitter to have processed it
            <para>INIT : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-init</para>
            <para>APPEND : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-append</para>
            <para>FINALIZE : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-finalize</para>
            </summary>
            <returns>Uploaded media</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUploadClient.UploadTweetImageAsync(System.Byte[])">
            <inheritdoc cref="M:Tweetinvi.Client.IUploadClient.UploadTweetImageAsync(Tweetinvi.Parameters.IUploadTweetImageParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUploadClient.UploadTweetImageAsync(Tweetinvi.Parameters.IUploadTweetImageParameters)">
            <summary>
            Upload an image to Twitter
            </summary>
            <para>INIT : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-init</para>
            <para>APPEND : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-append</para>
            <para>FINALIZE : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-finalize</para>
            <returns>Uploaded media</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUploadClient.UploadMessageImageAsync(System.Byte[])">
            <inheritdoc cref="M:Tweetinvi.Client.IUploadClient.UploadMessageImageAsync(Tweetinvi.Parameters.IUploadMessageImageParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUploadClient.UploadMessageImageAsync(Tweetinvi.Parameters.IUploadMessageImageParameters)">
            <summary>
            Upload an image to Twitter
            </summary>
            <para>INIT : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-init</para>
            <para>APPEND : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-append</para>
            <para>FINALIZE : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-finalize</para>
            <returns>Uploaded media</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUploadClient.UploadTweetVideoAsync(System.Byte[])">
            <inheritdoc cref="M:Tweetinvi.Client.IUploadClient.UploadTweetVideoAsync(Tweetinvi.Parameters.IUploadTweetVideoParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUploadClient.UploadTweetVideoAsync(Tweetinvi.Parameters.IUploadTweetVideoParameters)">
            <summary>
            Upload a video in chunks and waits for the Twitter to have processed it
            <para>INIT : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-init</para>
            <para>APPEND : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-append</para>
            <para>FINALIZE : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-finalize</para>
            <para>STATUS : https://dev.twitter.com/en/docs/media/upload-media/api-reference/get-media-upload-status</para>
            </summary>
            <returns>Uploaded media</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUploadClient.UploadMessageVideoAsync(System.Byte[])">
            <inheritdoc cref="M:Tweetinvi.Client.IUploadClient.UploadMessageVideoAsync(Tweetinvi.Parameters.IUploadMessageVideoParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUploadClient.UploadMessageVideoAsync(Tweetinvi.Parameters.IUploadMessageVideoParameters)">
            <summary>
            Upload a video in chunks and waits for the Twitter to have processed it
            <para>INIT : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-init</para>
            <para>APPEND : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-append</para>
            <para>FINALIZE : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-finalize</para>
            <para>STATUS : https://dev.twitter.com/en/docs/media/upload-media/api-reference/get-media-upload-status</para>
            </summary>
            <returns>Uploaded media</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUploadClient.AddMediaMetadataAsync(Tweetinvi.Models.DTO.IMediaMetadata)">
            <inheritdoc cref="M:Tweetinvi.Client.IUploadClient.AddMediaMetadataAsync(Tweetinvi.Parameters.IAddMediaMetadataParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUploadClient.AddMediaMetadataAsync(Tweetinvi.Parameters.IAddMediaMetadataParameters)">
            <summary>
            Add metadata to an uploaded media
            <para>Read more : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-metadata-create</para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IUploadClient.GetVideoProcessingStatusAsync(Tweetinvi.Models.IMedia)">
            <summary>
            Get a video processing status
            <para>https://dev.twitter.com/en/docs/media/upload-media/api-reference/get-media-upload-status</para>
            </summary>
            <returns>Current status of the video processing</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUploadClient.WaitForMediaProcessingToGetAllMetadataAsync(Tweetinvi.Models.IMedia)">
            <summary>
            Wait for the upload of a media has completed
            <para>Read more : https://dev.twitter.com/en/docs/media/upload-media/api-reference/get-media-upload-status</para>
            </summary>
            <returns>Completes wait the media is ready for use</returns>
        </member>
        <member name="P:Tweetinvi.Client.IUsersClient.ParametersValidator">
            <summary>
            Validate all the Users client parameters
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetAuthenticatedUserAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetAuthenticatedUserAsync(Tweetinvi.Parameters.IGetAuthenticatedUserParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetAuthenticatedUserAsync(Tweetinvi.Parameters.IGetAuthenticatedUserParameters)">
            <summary>
            Get the authenticated user based on the client's credentials
            <para>Read more : https://dev.twitter.com/rest/reference/get/account/verify_credentials </para>
            </summary>
            <returns>The client's authenticated user</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUserAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetUserAsync(Tweetinvi.Parameters.IGetUserParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUserAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetUserAsync(Tweetinvi.Parameters.IGetUserParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUserAsync(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetUserAsync(Tweetinvi.Parameters.IGetUserParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUserAsync(Tweetinvi.Parameters.IGetUserParameters)">
            <summary>
            Get a user
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-users-show </para>
            </summary>
            <returns>Returns a user</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUsersAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetUsersAsync(Tweetinvi.Parameters.IGetUsersParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUsersAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetUsersAsync(Tweetinvi.Parameters.IGetUsersParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUsersAsync(System.Collections.Generic.IEnumerable{Tweetinvi.Models.IUserIdentifier})">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetUsersAsync(Tweetinvi.Parameters.IGetUsersParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUsersAsync(Tweetinvi.Parameters.IGetUsersParameters)">
            <summary>
            Get multiple users
            </summary>
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup </para>
            <returns>Returns the list of users requested</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFriendIdsAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetFriendIdsAsync(Tweetinvi.Parameters.IGetFriendIdsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFriendIdsAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetFriendIdsAsync(Tweetinvi.Parameters.IGetFriendIdsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFriendIdsAsync(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetFriendIdsAsync(Tweetinvi.Parameters.IGetFriendIdsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFriendIdsAsync(Tweetinvi.Parameters.IGetFriendIdsParameters)">
            <summary>
            Get friend ids from a specific user
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids </para>
            </summary>
            <returns>List a user's friend ids</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFriendIdsIterator(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetFriendIdsIterator(Tweetinvi.Parameters.IGetFriendIdsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFriendIdsIterator(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetFriendIdsIterator(Tweetinvi.Parameters.IGetFriendIdsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFriendIdsIterator(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetFriendIdsIterator(Tweetinvi.Parameters.IGetFriendIdsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFriendIdsIterator(Tweetinvi.Parameters.IGetFriendIdsParameters)">
            <summary>
            Get friend ids from a specific user
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids </para>
            </summary>
            <returns>An iterator to list a user's friend ids</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFriendsAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetFriendsAsync(Tweetinvi.Parameters.IGetFriendsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFriendsAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetFriendsAsync(Tweetinvi.Parameters.IGetFriendsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFriendsAsync(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetFriendsAsync(Tweetinvi.Parameters.IGetFriendsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFriendsAsync(Tweetinvi.Parameters.IGetFriendsParameters)">
            <summary>
            Get friends from a specific user
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids </para>
            </summary>
            <returns>List of a user's friends</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFriendsIterator(Tweetinvi.Parameters.IGetFriendsParameters)">
            <summary>
            Get friends from a specific user
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids </para>
            </summary>
            <returns>An iterator to list a user's friends</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFollowerIdsAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetFollowerIdsAsync(Tweetinvi.Parameters.IGetFollowerIdsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFollowerIdsAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetFollowerIdsAsync(Tweetinvi.Parameters.IGetFollowerIdsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFollowerIdsAsync(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetFollowerIdsAsync(Tweetinvi.Parameters.IGetFollowerIdsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFollowerIdsAsync(Tweetinvi.Parameters.IGetFollowerIdsParameters)">
            <summary>
            Get the follower ids from a specific user
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids </para>
            </summary>
            <returns>List of a user's follower ids</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFollowerIdsIterator(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetFollowerIdsIterator(Tweetinvi.Parameters.IGetFollowerIdsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFollowerIdsIterator(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetFollowerIdsIterator(Tweetinvi.Parameters.IGetFollowerIdsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFollowerIdsIterator(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetFollowerIdsIterator(Tweetinvi.Parameters.IGetFollowerIdsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFollowerIdsIterator(Tweetinvi.Parameters.IGetFollowerIdsParameters)">
            <summary>
            Get the follower ids from a specific user
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids </para>
            </summary>
            <returns>An iterator to list a user's follower ids'</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFollowersAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetFollowersAsync(Tweetinvi.Parameters.IGetFollowersParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFollowersAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetFollowersAsync(Tweetinvi.Parameters.IGetFollowersParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFollowersAsync(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetFollowersAsync(Tweetinvi.Parameters.IGetFollowersParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFollowersAsync(Tweetinvi.Parameters.IGetFollowersParameters)">
            <summary>
            Get the followers from a specific user
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids </para>
            </summary>
            <returns>List of a user's followers</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetFollowersIterator(Tweetinvi.Parameters.IGetFollowersParameters)">
            <summary>
            Get the followers from a specific user
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids </para>
            </summary>
            <returns>An iterator to list a user's followers'</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetRelationshipBetweenAsync(System.Int64,System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetRelationshipBetweenAsync(Tweetinvi.Parameters.IGetRelationshipBetweenParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetRelationshipBetweenAsync(System.Int64,System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetRelationshipBetweenAsync(Tweetinvi.Parameters.IGetRelationshipBetweenParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetRelationshipBetweenAsync(System.Int64,Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetRelationshipBetweenAsync(Tweetinvi.Parameters.IGetRelationshipBetweenParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetRelationshipBetweenAsync(System.String,System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetRelationshipBetweenAsync(Tweetinvi.Parameters.IGetRelationshipBetweenParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetRelationshipBetweenAsync(System.String,System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetRelationshipBetweenAsync(Tweetinvi.Parameters.IGetRelationshipBetweenParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetRelationshipBetweenAsync(System.String,Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetRelationshipBetweenAsync(Tweetinvi.Parameters.IGetRelationshipBetweenParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetRelationshipBetweenAsync(Tweetinvi.Models.IUserIdentifier,System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetRelationshipBetweenAsync(Tweetinvi.Parameters.IGetRelationshipBetweenParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetRelationshipBetweenAsync(Tweetinvi.Models.IUserIdentifier,System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetRelationshipBetweenAsync(Tweetinvi.Parameters.IGetRelationshipBetweenParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetRelationshipBetweenAsync(Tweetinvi.Models.IUserIdentifier,Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetRelationshipBetweenAsync(Tweetinvi.Parameters.IGetRelationshipBetweenParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetRelationshipBetweenAsync(Tweetinvi.Parameters.IGetRelationshipBetweenParameters)">
            <summary>
            Get the relationship between a source user and the target
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show </para>
            </summary>
            <returns>Returns relationship information seen from a source user</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.BlockUserAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.BlockUserAsync(Tweetinvi.Parameters.IBlockUserParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.BlockUserAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.BlockUserAsync(Tweetinvi.Parameters.IBlockUserParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.BlockUserAsync(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.BlockUserAsync(Tweetinvi.Parameters.IBlockUserParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.BlockUserAsync(Tweetinvi.Parameters.IBlockUserParameters)">
            <summary>
            Block a user from the client's account
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create </para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.UnblockUserAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.UnblockUserAsync(Tweetinvi.Parameters.IUnblockUserParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.UnblockUserAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.UnblockUserAsync(Tweetinvi.Parameters.IUnblockUserParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.UnblockUserAsync(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.UnblockUserAsync(Tweetinvi.Parameters.IUnblockUserParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.UnblockUserAsync(Tweetinvi.Parameters.IUnblockUserParameters)">
            <summary>
            Unblock a user from the client's account
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy </para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.ReportUserForSpamAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.ReportUserForSpamAsync(Tweetinvi.Parameters.IReportUserForSpamParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.ReportUserForSpamAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.ReportUserForSpamAsync(Tweetinvi.Parameters.IReportUserForSpamParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.ReportUserForSpamAsync(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.ReportUserForSpamAsync(Tweetinvi.Parameters.IReportUserForSpamParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.ReportUserForSpamAsync(Tweetinvi.Parameters.IReportUserForSpamParameters)">
            <summary>
            Report a user for spam
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/post-users-report_spam </para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetBlockedUserIdsAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetBlockedUserIdsAsync(Tweetinvi.Parameters.IGetBlockedUserIdsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetBlockedUserIdsAsync(Tweetinvi.Parameters.IGetBlockedUserIdsParameters)">
            <summary>
            Get the user ids blocked by the client's account
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/get-blocks-ids </para>
            </summary>
            <returns>List of the blocked user ids</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetBlockedUserIdsIterator">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetBlockedUserIdsIterator(Tweetinvi.Parameters.IGetBlockedUserIdsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetBlockedUserIdsIterator(Tweetinvi.Parameters.IGetBlockedUserIdsParameters)">
            <summary>
            Get the user ids blocked by the client's account
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/get-blocks-ids </para>
            </summary>
            <returns>An iterator to list the blocked users</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetBlockedUsersAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetBlockedUsersAsync(Tweetinvi.Parameters.IGetBlockedUsersParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetBlockedUsersAsync(Tweetinvi.Parameters.IGetBlockedUsersParameters)">
            <summary>
            Get the users blocked by the client's account
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/get-blocks-ids </para>
            </summary>
            <returns>List of blocked users</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetBlockedUsersIterator">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetBlockedUsersIterator(Tweetinvi.Parameters.IGetBlockedUsersParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetBlockedUsersIterator(Tweetinvi.Parameters.IGetBlockedUsersParameters)">
            <summary>
            Get the users blocked by the client's account
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/get-blocks-ids </para>
            </summary>
            <returns>An iterator to list the blocked users</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.FollowUserAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.FollowUserAsync(Tweetinvi.Parameters.IFollowUserParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.FollowUserAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.FollowUserAsync(Tweetinvi.Parameters.IFollowUserParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.FollowUserAsync(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.FollowUserAsync(Tweetinvi.Parameters.IFollowUserParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.FollowUserAsync(Tweetinvi.Parameters.IFollowUserParameters)">
            <summary>
            Follow a user
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create </para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.UnfollowUserAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.UnfollowUserAsync(Tweetinvi.Parameters.IUnfollowUserParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.UnfollowUserAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.UnfollowUserAsync(Tweetinvi.Parameters.IUnfollowUserParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.UnfollowUserAsync(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.UnfollowUserAsync(Tweetinvi.Parameters.IUnfollowUserParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.UnfollowUserAsync(Tweetinvi.Parameters.IUnfollowUserParameters)">
            <summary>
            Stops following a user
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy </para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUserIdsRequestingFriendshipAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetUserIdsRequestingFriendshipAsync(Tweetinvi.Parameters.IGetUserIdsRequestingFriendshipParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUserIdsRequestingFriendshipAsync(Tweetinvi.Parameters.IGetUserIdsRequestingFriendshipParameters)">
            <summary>
            Get the pending follower ids requests for protected accounts.
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-incoming </para>
            <para>Protected accounts : https://help.twitter.com/en/safety-and-security/public-and-protected-tweets </para>
            </summary>
            <returns>List the user ids who requested to follow the client's account</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUserIdsRequestingFriendshipIterator">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetUserIdsRequestingFriendshipIterator(Tweetinvi.Parameters.IGetUserIdsRequestingFriendshipParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUserIdsRequestingFriendshipIterator(Tweetinvi.Parameters.IGetUserIdsRequestingFriendshipParameters)">
            <summary>
            Get the pending follower ids requests for protected accounts.
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-incoming </para>
            <para>Protected accounts : https://help.twitter.com/en/safety-and-security/public-and-protected-tweets </para>
            </summary>
            <returns>An iterator to list the user ids who requested to follow the client's account</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUsersRequestingFriendshipAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetUsersRequestingFriendshipAsync(Tweetinvi.Parameters.IGetUsersRequestingFriendshipParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUsersRequestingFriendshipAsync(Tweetinvi.Parameters.IGetUsersRequestingFriendshipParameters)">
            <summary>
            Get the pending follower requests for protected accounts.
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-incoming </para>
            <para>Protected accounts : https://help.twitter.com/en/safety-and-security/public-and-protected-tweets </para>
            </summary>
            <returns>List the users who requested to follow the client's account</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUsersRequestingFriendshipIterator">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetUsersRequestingFriendshipIterator(Tweetinvi.Parameters.IGetUsersRequestingFriendshipParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUsersRequestingFriendshipIterator(Tweetinvi.Parameters.IGetUsersRequestingFriendshipParameters)">
            <summary>
            Get the pending follower requests for protected accounts.
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-incoming </para>
            <para>Protected accounts : https://help.twitter.com/en/safety-and-security/public-and-protected-tweets </para>
            </summary>
            <returns>An iterator to list the users who requested to follow the client's account</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUserIdsYouRequestedToFollowAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetUserIdsYouRequestedToFollowAsync(Tweetinvi.Parameters.IGetUserIdsYouRequestedToFollowParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUserIdsYouRequestedToFollowAsync(Tweetinvi.Parameters.IGetUserIdsYouRequestedToFollowParameters)">
            <summary>
            Get the pending follower ids requests that you have requested.
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-outgoing </para>
            <para>Protected accounts : https://help.twitter.com/en/safety-and-security/public-and-protected-tweets</para>
            </summary>
            <returns>List the user ids the client's account requested to follow</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUserIdsYouRequestedToFollowIterator">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetUserIdsYouRequestedToFollowIterator(Tweetinvi.Parameters.IGetUserIdsYouRequestedToFollowParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUserIdsYouRequestedToFollowIterator(Tweetinvi.Parameters.IGetUserIdsYouRequestedToFollowParameters)">
            <summary>
            Get the pending follower ids requests that you have requested.
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-outgoing </para>
            <para>Protected accounts : https://help.twitter.com/en/safety-and-security/public-and-protected-tweets</para>
            </summary>
            <returns>An iterator to list the user ids the client's account requested to follow</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUsersYouRequestedToFollowAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetUsersYouRequestedToFollowAsync(Tweetinvi.Parameters.IGetUsersYouRequestedToFollowParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUsersYouRequestedToFollowAsync(Tweetinvi.Parameters.IGetUsersYouRequestedToFollowParameters)">
            <summary>
            Get the pending follower ids requests that you have requested.
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-outgoing </para>
            <para>Protected accounts : https://help.twitter.com/en/safety-and-security/public-and-protected-tweets</para>
            </summary>
            <returns>List the users the client's account requested to follow</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUsersYouRequestedToFollowIterator">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetUsersYouRequestedToFollowIterator(Tweetinvi.Parameters.IGetUsersYouRequestedToFollowParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUsersYouRequestedToFollowIterator(Tweetinvi.Parameters.IGetUsersYouRequestedToFollowParameters)">
            <summary>
            Get the pending follower ids requests that you have requested.
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-outgoing </para>
            <para>Protected accounts : https://help.twitter.com/en/safety-and-security/public-and-protected-tweets</para>
            </summary>
            <returns>An iterator to list the users the client's account requested to follow</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.UpdateRelationshipAsync(Tweetinvi.Parameters.IUpdateRelationshipParameters)">
            <summary>
            Modify the relationship between the authenticated user (source) and another user (target).
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/post-friendships-update </para>
            </summary>
            <returns>Returns whether the update operation was successful.</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetRelationshipsWithAsync(System.Int64[])">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetRelationshipsWithAsync(Tweetinvi.Parameters.IGetRelationshipsWithParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetRelationshipsWithAsync(System.String[])">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetRelationshipsWithAsync(Tweetinvi.Parameters.IGetRelationshipsWithParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetRelationshipsWithAsync(Tweetinvi.Models.IUserIdentifier[])">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetRelationshipsWithAsync(Tweetinvi.Parameters.IGetRelationshipsWithParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetRelationshipsWithAsync(Tweetinvi.Models.IUser[])">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetRelationshipsWithAsync(Tweetinvi.Parameters.IGetRelationshipsWithParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetRelationshipsWithAsync(Tweetinvi.Parameters.IGetRelationshipsWithParameters)">
            <summary>
            Get the relationships between the account's user and multiple users
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-lookup </para>
            </summary>
            <returns>Returns a dictionary of user and their relationship with the client's user</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUserIdsWhoseRetweetsAreMutedAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetUserIdsWhoseRetweetsAreMutedAsync(Tweetinvi.Parameters.IGetUserIdsWhoseRetweetsAreMutedParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetUserIdsWhoseRetweetsAreMutedAsync(Tweetinvi.Parameters.IGetUserIdsWhoseRetweetsAreMutedParameters)">
            <summary>
            Get the user ids for whom the retweets are muted
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-no_retweets-ids </para>
            </summary>
            <returns>Returns a list of user ids for whom the retweets are muted</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetMutedUserIdsAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetMutedUserIdsAsync(Tweetinvi.Parameters.IGetMutedUserIdsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetMutedUserIdsAsync(Tweetinvi.Parameters.IGetMutedUserIdsParameters)">
            <summary>
            Get the muted user ids.
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-ids </para>
            </summary>
            <returns>List of the user ids muted by the client's account</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetMutedUserIdsIterator">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetMutedUserIdsIterator(Tweetinvi.Parameters.IGetMutedUserIdsParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetMutedUserIdsIterator(Tweetinvi.Parameters.IGetMutedUserIdsParameters)">
            <summary>
            Get the muted user ids.
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-ids </para>
            </summary>
            <returns>An iterator to list the user ids muted by the client's account</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetMutedUsersAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetMutedUsersAsync(Tweetinvi.Parameters.IGetMutedUsersParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetMutedUsersAsync(Tweetinvi.Parameters.IGetMutedUsersParameters)">
            <summary>
            Get the muted user ids.
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-list </para>
            </summary>
            <returns>List of the users muted by the client's account</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetMutedUsersIterator">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetMutedUsersIterator(Tweetinvi.Parameters.IGetMutedUsersParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetMutedUsersIterator(Tweetinvi.Parameters.IGetMutedUsersParameters)">
            <summary>
            Get the muted user ids.
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-list </para>
            </summary>
            <returns>An iterator to list the users muted by the client's account</returns>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.MuteUserAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.MuteUserAsync(Tweetinvi.Parameters.IMuteUserParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.MuteUserAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.MuteUserAsync(Tweetinvi.Parameters.IMuteUserParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.MuteUserAsync(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.MuteUserAsync(Tweetinvi.Parameters.IMuteUserParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.MuteUserAsync(Tweetinvi.Parameters.IMuteUserParameters)">
            <summary>
            Mute a user
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/post-mutes-users-create </para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.UnmuteUserAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.UnmuteUserAsync(Tweetinvi.Parameters.IUnmuteUserParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.UnmuteUserAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.UnmuteUserAsync(Tweetinvi.Parameters.IUnmuteUserParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.UnmuteUserAsync(Tweetinvi.Models.IUserIdentifier)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.UnmuteUserAsync(Tweetinvi.Parameters.IUnmuteUserParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.UnmuteUserAsync(Tweetinvi.Parameters.IUnmuteUserParameters)">
            <summary>
            Remove the mute of a user
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/post-mutes-users-destroy </para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetProfileImageStreamAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetProfileImageStreamAsync(Tweetinvi.Parameters.IGetProfileImageParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetProfileImageStreamAsync(Tweetinvi.Models.IUser)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetProfileImageStreamAsync(Tweetinvi.Parameters.IGetProfileImageParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetProfileImageStreamAsync(Tweetinvi.Models.DTO.IUserDTO)">
            <inheritdoc cref="M:Tweetinvi.Client.IUsersClient.GetProfileImageStreamAsync(Tweetinvi.Parameters.IGetProfileImageParameters)" />
        </member>
        <member name="M:Tweetinvi.Client.IUsersClient.GetProfileImageStreamAsync(Tweetinvi.Parameters.IGetProfileImageParameters)">
            <summary>
            Get the profile image of a user
            </summary>
            <returns>A stream of the image file</returns>
        </member>
        <member name="M:Tweetinvi.Client.V2.ISearchV2Client.SearchTweetsAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.V2.ISearchV2Client.GetSearchTweetsV2Iterator(Tweetinvi.Parameters.V2.ISearchTweetsV2Parameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.V2.ISearchV2Client.SearchTweetsAsync(Tweetinvi.Parameters.V2.ISearchTweetsV2Parameters)">
            <summary>
            Search for tweets
            </summary>
            <para> Read more : https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-recent </para>
            <returns>First page of search results</returns>
        </member>
        <member name="M:Tweetinvi.Client.V2.ISearchV2Client.GetSearchTweetsV2Iterator(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.V2.ISearchV2Client.GetSearchTweetsV2Iterator(Tweetinvi.Parameters.V2.ISearchTweetsV2Parameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.V2.ISearchV2Client.GetSearchTweetsV2Iterator(Tweetinvi.Parameters.V2.ISearchTweetsV2Parameters)">
            <summary>
            Search for tweets
            </summary>
            <para> Read more : https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-recent </para>
            <returns>Iterator over the search results</returns>
        </member>
        <member name="M:Tweetinvi.Client.V2.IStreamsV2Client.CreateSampleStream">
            <summary>
            Create a sample stream
            <para> Read more : https://developer.twitter.com/en/docs/twitter-api/tweets/sampled-stream/api-reference/get-tweets-sample-stream </para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.V2.IStreamsV2Client.CreateFilteredStream">
            <summary>
            Create a filtered stream
            <para> Read more : https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/get-tweets-search-stream </para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.V2.IStreamsV2Client.GetRulesForFilteredStreamV2Async">
            <inheritdoc cref="M:Tweetinvi.Client.V2.IStreamsV2Client.GetRulesForFilteredStreamV2Async(Tweetinvi.Parameters.V2.IGetRulesForFilteredStreamV2Parameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.V2.IStreamsV2Client.GetRulesForFilteredStreamV2Async(System.String[])">
            <inheritdoc cref="M:Tweetinvi.Client.V2.IStreamsV2Client.GetRulesForFilteredStreamV2Async(Tweetinvi.Parameters.V2.IGetRulesForFilteredStreamV2Parameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.V2.IStreamsV2Client.GetRulesForFilteredStreamV2Async(Tweetinvi.Parameters.V2.IGetRulesForFilteredStreamV2Parameters)">
            <summary>
            Get the filtered stream rules configured for the app. Not specifying an id, will return them all
            <para>Read more : https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/get-tweets-search-stream-rules </para>
            </summary>
            <returns>Filtered stream rules</returns>
        </member>
        <member name="M:Tweetinvi.Client.V2.IStreamsV2Client.AddRulesToFilteredStreamAsync(Tweetinvi.Parameters.V2.FilteredStreamRuleConfig[])">
            <inheritdoc cref="M:Tweetinvi.Client.V2.IStreamsV2Client.AddRulesToFilteredStreamAsync(Tweetinvi.Parameters.V2.IAddRulesToFilteredStreamV2Parameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.V2.IStreamsV2Client.AddRulesToFilteredStreamAsync(Tweetinvi.Parameters.V2.IAddRulesToFilteredStreamV2Parameters)">
            <summary>
            Add filtered stream rules to the app.
            <para>Read more : https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/post-tweets-search-stream-rules </para>
            </summary>
            <returns>Filtered stream rules created</returns>
        </member>
        <member name="M:Tweetinvi.Client.V2.IStreamsV2Client.DeleteRulesFromFilteredStreamAsync(System.String[])">
            <inheritdoc cref="M:Tweetinvi.Client.V2.IStreamsV2Client.DeleteRulesFromFilteredStreamAsync(Tweetinvi.Parameters.V2.IDeleteRulesFromFilteredStreamV2Parameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.V2.IStreamsV2Client.DeleteRulesFromFilteredStreamAsync(Tweetinvi.Models.V2.FilteredStreamRuleV2[])">
            <inheritdoc cref="M:Tweetinvi.Client.V2.IStreamsV2Client.DeleteRulesFromFilteredStreamAsync(Tweetinvi.Parameters.V2.IDeleteRulesFromFilteredStreamV2Parameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.V2.IStreamsV2Client.DeleteRulesFromFilteredStreamAsync(Tweetinvi.Parameters.V2.IDeleteRulesFromFilteredStreamV2Parameters)">
            <summary>
            Remove filtered stream rules to the app.
            <para>Read more : https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/post-tweets-search-stream-rules </para>
            </summary>
            <returns>Deleted rules</returns>
        </member>
        <member name="M:Tweetinvi.Client.V2.IStreamsV2Client.TestFilteredStreamRulesV2Async(Tweetinvi.Parameters.V2.FilteredStreamRuleConfig[])">
            <inheritdoc cref="M:Tweetinvi.Client.V2.IStreamsV2Client.TestFilteredStreamRulesV2Async(Tweetinvi.Parameters.V2.IAddRulesToFilteredStreamV2Parameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.V2.IStreamsV2Client.TestFilteredStreamRulesV2Async(Tweetinvi.Parameters.V2.IAddRulesToFilteredStreamV2Parameters)">
            <summary>
            Test the validity of creating a specific set of rules. Uses the `dry_run` parameter.
            <para>Read more : https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/post-tweets-search-stream-rules </para>
            </summary>
            <returns>Filtered stream rules that would have been created successfully</returns>
        </member>
        <member name="M:Tweetinvi.Client.V2.ITweetsV2Client.GetTweetAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.V2.ITweetsV2Client.GetTweetAsync(Tweetinvi.Parameters.V2.IGetTweetV2Parameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.V2.ITweetsV2Client.GetTweetAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.V2.ITweetsV2Client.GetTweetAsync(Tweetinvi.Parameters.V2.IGetTweetV2Parameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.V2.ITweetsV2Client.GetTweetAsync(Tweetinvi.Parameters.V2.IGetTweetV2Parameters)">
            <summary>
            Get a tweet
            <para>Read more : https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets-id </para>
            </summary>
            <returns>The tweet</returns>
        </member>
        <member name="M:Tweetinvi.Client.V2.ITweetsV2Client.GetTweetsAsync(System.Int64[])">
            <inheritdoc cref="M:Tweetinvi.Client.V2.ITweetsV2Client.GetTweetsAsync(Tweetinvi.Parameters.V2.IGetTweetsV2Parameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.V2.ITweetsV2Client.GetTweetsAsync(System.String[])">
            <inheritdoc cref="M:Tweetinvi.Client.V2.ITweetsV2Client.GetTweetsAsync(Tweetinvi.Parameters.V2.IGetTweetsV2Parameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.V2.ITweetsV2Client.GetTweetsAsync(Tweetinvi.Parameters.V2.IGetTweetsV2Parameters)">
            <summary>
            Get multiple tweets
            <para>Read more : https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets </para>
            </summary>
            <returns>Requested tweets</returns>
        </member>
        <member name="M:Tweetinvi.Client.V2.ITweetsV2Client.ChangeTweetReplyVisibilityAsync(System.Int64,Tweetinvi.Parameters.V2.TweetReplyVisibility)">
            <inheritdoc cref="M:Tweetinvi.Client.V2.ITweetsV2Client.ChangeTweetReplyVisibilityAsync(Tweetinvi.Parameters.V2.IChangeTweetReplyVisibilityV2Parameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.V2.ITweetsV2Client.ChangeTweetReplyVisibilityAsync(System.String,Tweetinvi.Parameters.V2.TweetReplyVisibility)">
            <inheritdoc cref="M:Tweetinvi.Client.V2.ITweetsV2Client.ChangeTweetReplyVisibilityAsync(Tweetinvi.Parameters.V2.IChangeTweetReplyVisibilityV2Parameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.V2.ITweetsV2Client.ChangeTweetReplyVisibilityAsync(Tweetinvi.Parameters.V2.IChangeTweetReplyVisibilityV2Parameters)">
            <summary>
            Set the visibility of a reply tweet
            <para>Read more : https://developer.twitter.com/en/docs/twitter-api/tweets/hide-replies/api-reference/put-tweets-id-hidden </para>
            </summary>
            <returns>The new visibility of the tweet</returns>
        </member>
        <member name="M:Tweetinvi.Client.V2.IUsersV2Client.GetUserByIdAsync(System.Int64)">
            <inheritdoc cref="M:Tweetinvi.Client.V2.IUsersV2Client.GetUserByIdAsync(Tweetinvi.Parameters.V2.IGetUserByIdV2Parameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.V2.IUsersV2Client.GetUserByIdAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.V2.IUsersV2Client.GetUserByIdAsync(Tweetinvi.Parameters.V2.IGetUserByIdV2Parameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.V2.IUsersV2Client.GetUserByIdAsync(Tweetinvi.Parameters.V2.IGetUserByIdV2Parameters)">
            <summary>
            Get a user from his id
            <para>Read more : https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-id </para>
            </summary>
            <returns>Returns the requested user</returns>
        </member>
        <member name="M:Tweetinvi.Client.V2.IUsersV2Client.GetUserByNameAsync(System.String)">
            <inheritdoc cref="M:Tweetinvi.Client.V2.IUsersV2Client.GetUserByNameAsync(Tweetinvi.Parameters.V2.IGetUserByNameV2Parameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.V2.IUsersV2Client.GetUserByNameAsync(Tweetinvi.Parameters.V2.IGetUserByNameV2Parameters)">
            <summary>
            Get a user from his screen name
            <para>Read more : https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by-username-username </para>
            </summary>
            <returns>Returns the requested user</returns>
        </member>
        <member name="M:Tweetinvi.Client.V2.IUsersV2Client.GetUsersByIdAsync(System.Int64[])">
            <inheritdoc cref="M:Tweetinvi.Client.V2.IUsersV2Client.GetUsersByIdAsync(Tweetinvi.Parameters.V2.IGetUsersByIdV2Parameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.V2.IUsersV2Client.GetUsersByIdAsync(System.String[])">
            <inheritdoc cref="M:Tweetinvi.Client.V2.IUsersV2Client.GetUsersByIdAsync(Tweetinvi.Parameters.V2.IGetUsersByIdV2Parameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.V2.IUsersV2Client.GetUsersByIdAsync(Tweetinvi.Parameters.V2.IGetUsersByIdV2Parameters)">
            <summary>
            Get users from their ids
            <para>Read more : https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users </para>
            </summary>
            <returns>Returns the requested users</returns>
        </member>
        <member name="M:Tweetinvi.Client.V2.IUsersV2Client.GetUsersByNameAsync(System.String[])">
            <inheritdoc cref="M:Tweetinvi.Client.V2.IUsersV2Client.GetUsersByNameAsync(Tweetinvi.Parameters.V2.IGetUsersByNameV2Parameters)"/>
        </member>
        <member name="M:Tweetinvi.Client.V2.IUsersV2Client.GetUsersByNameAsync(Tweetinvi.Parameters.V2.IGetUsersByNameV2Parameters)">
            <summary>
            Get users from their screen names
            <para>Read more : https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by </para>
            </summary>
            <returns>Returns the requested users</returns>
        </member>
        <member name="P:Tweetinvi.Client.IRawExecutors.AccountActivity">
            <summary>
            Client to execute all the actions related with webhooks
            </summary>
        </member>
        <member name="P:Tweetinvi.Client.IRawExecutors.AccountSettings">
            <summary>
            Client to execute all actions related with the account associated with the clients' credentials
            </summary>
        </member>
        <member name="P:Tweetinvi.Client.IRawExecutors.Auth">
            <summary>
            Client to execute all actions related with authentication
            </summary>
        </member>
        <member name="P:Tweetinvi.Client.IRawExecutors.Help">
            <summary>
            Client to execute all actions from the help path
            </summary>
        </member>
        <member name="P:Tweetinvi.Client.IRawExecutors.Lists">
            <summary>
            Client to execute all actions related with twitter lists
            </summary>
        </member>
        <member name="P:Tweetinvi.Client.IRawExecutors.Search">
            <summary>
            Client to execute all actions related with search
            </summary>
        </member>
        <member name="P:Tweetinvi.Client.IRawExecutors.Timelines">
            <summary>
            Client to execute all actions related with timelines
            </summary>
        </member>
        <member name="P:Tweetinvi.Client.IRawExecutors.Trends">
            <summary>
            Client to execute all actions related with trends
            </summary>
        </member>
        <member name="P:Tweetinvi.Client.IRawExecutors.Tweets">
            <summary>
            Client to execute all actions related with tweets
            </summary>
        </member>
        <member name="P:Tweetinvi.Client.IRawExecutors.Upload">
            <summary>
            Client to execute all actions related with media upload
            </summary>
        </member>
        <member name="P:Tweetinvi.Client.IRawExecutors.Users">
            <summary>
            Client to execute all actions related with users
            </summary>
        </member>
        <member name="P:Tweetinvi.Client.IRawExecutors.SearchV2">
            <summary>
            Client to execute all actions related with search in API v2
            </summary>
        </member>
        <member name="P:Tweetinvi.Client.IRawExecutors.TweetsV2">
            <summary>
            Client to execute all actions related with tweets in API v2
            </summary>
        </member>
        <member name="P:Tweetinvi.Client.IRawExecutors.UsersV2">
            <summary>
            Client to execute all actions related with users in API v2
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IAccountActivityRequester.CreateAccountActivityWebhookAsync(Tweetinvi.Parameters.ICreateAccountActivityWebhookParameters)">
            <summary>
            Registers a webhook URL for all event types. The URL will be validated via CRC request before saving.
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#post-account-activity-all-env-name-webhooks </para>
            </summary>
            <returns>Twitter Result containing the created webhook</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IAccountActivityRequester.GetAccountActivityWebhookEnvironmentsAsync(Tweetinvi.Parameters.IGetAccountActivityWebhookEnvironmentsParameters)">
            <summary>
            Get the account activity webhook environments
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#get-account-activity-all-webhooks </para>
            </summary>
            <returns>Twitter result containing the account activity environments</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IAccountActivityRequester.GetAccountActivityEnvironmentWebhooksAsync(Tweetinvi.Parameters.IGetAccountActivityEnvironmentWebhooksParameters)">
            <summary>
            Returns the webhooks registered on a specific environments
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#get-account-activity-all-webhooks </para>
            </summary>
            <returns>Twitter result containing the account activity registered webhooks</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IAccountActivityRequester.DeleteAccountActivityWebhookAsync(Tweetinvi.Parameters.IDeleteAccountActivityWebhookParameters)">
            <summary>
            Remove the specified account activity webhook
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#delete-account-activity-all-env-name-webhooks-webhook-id </para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IAccountActivityRequester.TriggerAccountActivityWebhookCRCAsync(Tweetinvi.Parameters.ITriggerAccountActivityWebhookCRCParameters)">
            <summary>
            Challenges a webhook and reenable it when it was disabled
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#put-account-activity-all-env-name-webhooks-webhook-id </para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IAccountActivityRequester.SubscribeToAccountActivityAsync(Tweetinvi.Parameters.ISubscribeToAccountActivityParameters)">
            <summary>
            Subscribes the provided application to all events for the provided environment for all message types. After activation, all events for the requesting user will be sent to the application’s webhook via POST request.
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#post-account-activity-all-env-name-subscriptions </para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IAccountActivityRequester.CountAccountActivitySubscriptionsAsync(Tweetinvi.Parameters.ICountAccountActivitySubscriptionsParameters)">
            <summary>
            Returns the count of subscriptions that are currently active on your account for all activities.
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#get-account-activity-all-subscriptions-count </para>
            </summary>
            <returns>Twitter result containing the count information</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IAccountActivityRequester.IsAccountSubscribedToAccountActivityAsync(Tweetinvi.Parameters.IIsAccountSubscribedToAccountActivityParameters)">
            <summary>
            Check if an account is subscribed to the webhooks
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#get-account-activity-all-env-name-subscriptions </para>
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IAccountActivityRequester.GetAccountActivitySubscriptionsAsync(Tweetinvi.Parameters.IGetAccountActivitySubscriptionsParameters)">
            <summary>
            Get the account activity subscriptions
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#get-account-activity-all-env-name-subscriptions-list </para>
            </summary>
            <returns>Twitter result containing the user subscriptions to account activities</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IAccountActivityRequester.UnsubscribeFromAccountActivityAsync(Tweetinvi.Parameters.IUnsubscribeFromAccountActivityParameters)">
            <summary>
            Unsubscribe a user from account activity
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#delete-account-activity-all-env-name-subscriptions-user-id-json </para>
            </summary>
        </member>
        <member name="T:Tweetinvi.Client.Requesters.IAccountSettingsRequester">
            <summary>
            A client providing all the actions relative to the account settings
            The results from this client contain additional metadata.
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IAccountSettingsRequester.GetAccountSettingsAsync(Tweetinvi.Parameters.IGetAccountSettingsParameters)">
            <summary>
            Get the client's account settings
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/get-account-settings </para>
            </summary>
            <returns>Twitter result containing the account settings</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IAccountSettingsRequester.UpdateAccountSettingsAsync(Tweetinvi.Parameters.IUpdateAccountSettingsParameters)">
            <summary>
            Update the client's account settings
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/post-account-settings </para>
            </summary>
            <returns>Twitter result containing the updated account settings</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IAccountSettingsRequester.UpdateProfileAsync(Tweetinvi.Parameters.IUpdateProfileParameters)">
            <summary>
            Update the client's account profile
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile </para>
            </summary>
            <returns>Twitter result containing the updated authenticated user</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IAccountSettingsRequester.UpdateProfileImageAsync(Tweetinvi.Parameters.IUpdateProfileImageParameters)">
            <summary>
            Update the profile image of the account
            <para>https://dev.twitter.com/rest/reference/post/account/update_profile_image</para>
            </summary>
            <returns>Twitter result containing the updated user</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IAccountSettingsRequester.UpdateProfileBannerAsync(Tweetinvi.Parameters.IUpdateProfileBannerParameters)">
            <summary>
            Update the profile banner of the account
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_banner </para>
            </summary>
            <returns>Twitter result</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IAccountSettingsRequester.RemoveProfileBannerAsync(Tweetinvi.Parameters.IRemoveProfileBannerParameters)">
            <summary>
            Remove the profile banner of the account
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/post-account-remove_profile_banner </para>
            </summary>
            <returns>Twitter result</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IAuthRequester.CreateBearerTokenAsync(Tweetinvi.Parameters.ICreateBearerTokenParameters)">
            <summary>
            Allows a registered application to obtain an OAuth 2 Bearer Token.
            Bearer token allows to make API requests on an application's own behalf, without a user context.
            This is called Application-only authentication.
            </summary>
            <param name="parameters"></param>
            <para> https://developer.twitter.com/en/docs/basics/authentication/api-reference/token </para>
            <returns>The bearer token to use for application only authentication</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IAuthRequester.RequestAuthUrlAsync(Tweetinvi.Parameters.IRequestAuthUrlParameters)">
            <summary>
            Initiates the authentication process for a user.
            The AuthenticationContext returned contains a url to authenticate on twitter.
            </summary>
            <para> https://developer.twitter.com/en/docs/basics/authentication/api-reference/request_token </para>
            <returns>An AuthenticationContext containing both the url to redirect to and an AuthenticationToken</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IAuthRequester.RequestCredentialsAsync(Tweetinvi.Parameters.IRequestCredentialsParameters)">
            <summary>
            Request credentials with a verifierCode
            </summary>
            <para> https://developer.twitter.com/en/docs/basics/authentication/api-reference/token </para>
            <returns>The requested user credentials</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IAuthRequester.InvalidateBearerTokenAsync(Tweetinvi.Parameters.IInvalidateBearerTokenParameters)">
            <summary>
            Invalidate bearer token
            </summary>
            <para> https://developer.twitter.com/en/docs/basics/authentication/api-reference/invalidate_bearer_token </para>
            <returns>Request result</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IAuthRequester.InvalidateAccessTokenAsync(Tweetinvi.Parameters.IInvalidateAccessTokenParameters)">
            <summary>
            Invalidate access token
            </summary>
            <para> https://developer.twitter.com/en/docs/basics/authentication/api-reference/invalidate_access_token </para>
            <returns>Request result</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IExecuteRequester.RequestAsync``1(System.Action{Tweetinvi.Models.ITwitterRequest})">
            <summary>
            Execute a custom request
            </summary>
            <returns>The raw response from twitter with the json parsed into a Data Transfer Object</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IExecuteRequester.RequestAsync(System.Action{Tweetinvi.Models.ITwitterRequest})">
            <summary>
            Execute a custom request
            </summary>
            <returns>The raw response from Twitter</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IExecuteRequester.RequestAsync``1(System.Action{Tweetinvi.Models.ITwitterQuery})">
            <summary>
            Execute a custom query
            </summary>
            <returns>The raw response from twitter with the json parsed into a Data Transfer Object</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IExecuteRequester.RequestAsync(System.Action{Tweetinvi.Models.ITwitterQuery})">
            <summary>
            Execute a custom query
            </summary>
            <returns>The raw response from Twitter</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IHelpRequester.GetRateLimitsAsync(Tweetinvi.Parameters.IGetRateLimitsParameters)">
            <summary>
            Get the rate limits of the current client
            </summary>
            <para> Read more : https://developer.twitter.com/en/docs/developer-utilities/rate-limit-status/api-reference/get-application-rate_limit_status </para>
            <returns>The twitter response containing the client's rate limits</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IHelpRequester.GetTwitterConfigurationAsync(Tweetinvi.Parameters.IGetTwitterConfigurationParameters)">
            <summary>
            Get the Twitter API configuration
            </summary>
            <para> https://developer.twitter.com/en/docs/developer-utilities/configuration/api-reference/get-help-configuration </para>
            <returns>Twitter response containing the official configuration</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IHelpRequester.GetSupportedLanguagesAsync(Tweetinvi.Parameters.IGetSupportedLanguagesParameters)">
            <summary>
            Get Twitter supported languages
            </summary>
            <para> https://developer.twitter.com/en/docs/developer-utilities/supported-languages/api-reference/get-help-languages </para>
            <returns>Twitter result containing the supported languages</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IHelpRequester.GetPlaceAsync(Tweetinvi.Parameters.IGetPlaceParameters)">
            <summary>
            Get a place information from place identifier.
            </summary>
            <para> https://developer.twitter.com/en/docs/geo/place-information/api-reference/get-geo-id-place_id </para>
            <returns>Twitter result containing the requested Place</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IHelpRequester.SearchGeoAsync(Tweetinvi.Parameters.IGeoSearchParameters)">
            <summary>
            Search for places that can be attached to a statuses/update. Given a latitude and a longitude pair, an IP address, or a name.
            </summary>
            <para> https://developer.twitter.com/en/docs/geo/places-near-location/api-reference/get-geo-search </para>
            <returns>Twitter result containing the places matching search</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IHelpRequester.SearchGeoReverseAsync(Tweetinvi.Parameters.IGeoSearchReverseParameters)">
            <summary>
            Given a latitude and a longitude, searches for up to 20 places.
            </summary>
            <para> https://developer.twitter.com/en/docs/geo/places-near-location/api-reference/get-geo-reverse_geocode </para>
            <returns>Twitter result containing the matching the search</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IMessageRequester.PublishMessageAsync(Tweetinvi.Parameters.IPublishMessageParameters)">
            <summary>
            Publishes a private message
            </summary>
            <para> https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/api-reference/new-event </para>
            <returns>Twitter result containing the published message</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IMessageRequester.DestroyMessageAsync(Tweetinvi.Parameters.IDeleteMessageParameters)">
            <summary>
            Destroy a specific message
            </summary>
            <para> https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/guides/direct-message-migration </para>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IMessageRequester.GetMessageAsync(Tweetinvi.Parameters.IGetMessageParameters)">
            <summary>
            Gets a specific message
            </summary>
            <para> https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/api-reference/get-event </para>
            <returns>Twitter result containing the requested message</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IMessageRequester.GetMessagesIterator(Tweetinvi.Parameters.IGetMessagesParameters)">
            <summary>
            Gets latest messages
            </summary>
            <para> https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/api-reference/list-events </para>
            <returns>An iterator to list the recent messages of the user</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ISearchRequester.GetSearchTweetsIterator(Tweetinvi.Parameters.ISearchTweetsParameters)">
            <summary>
            Search for tweets
            </summary>
            <para> Read more : https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets </para>
            <returns>Iterator over the search results</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ISearchRequester.GetSearchUsersIterator(Tweetinvi.Parameters.ISearchUsersParameters)">
            <summary>
            Search for users
            </summary>
            <para> Read more : https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-users-search </para>
            <returns>Iterator over the search results</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ISearchRequester.CreateSavedSearchAsync(Tweetinvi.Parameters.ICreateSavedSearchParameters)">
            <summary>
            Create a saved search
            </summary>
            <para> Read more : https://developer.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/post-saved_searches-create </para>
            <returns>Twitter result containing the created saved search</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ISearchRequester.GetSavedSearchAsync(Tweetinvi.Parameters.IGetSavedSearchParameters)">
            <summary>
            Get an existing saved search
            </summary>
            <para> Read more : https://developer.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/get-saved_searches-show-id </para>
            <returns>Twitter result containing the requested saved search</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ISearchRequester.ListSavedSearchesAsync(Tweetinvi.Parameters.IListSavedSearchesParameters)">
            <summary>
            List account's saved searches
            </summary>
            <para> Read more : https://developer.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/get-saved_searches-list </para>
            <returns>Twitter result containing the account's saved searches</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ISearchRequester.DestroySavedSearchAsync(Tweetinvi.Parameters.IDestroySavedSearchParameters)">
            <summary>
            Destroys a saved search
            </summary>
            <para> Read more : https://developer.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/post-saved_searches-destroy-id </para>
            <returns>Twitter result containing the deleted search</returns>
        </member>
        <member name="T:Tweetinvi.Client.Requesters.ITimelinesRequester">
            <summary>
            A client providing all the actions relative to timelines.
            The results from this client contain additional metadata.
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITimelinesRequester.GetUserTimelineIterator(Tweetinvi.Parameters.IGetUserTimelineParameters)">
            <summary>
            Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.
            </summary>
            <para>Read more : https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-user_timeline </para>
            <returns>An iterator to list a user's timeline</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITimelinesRequester.GetHomeTimelineIterator(Tweetinvi.Parameters.IGetHomeTimelineParameters)">
             <summary>
             Returns a collection of the most recent Tweets and Retweets posted by the authenticating user and the users they follow.
             The home timeline is central to how most users interact with the Twitter service.
            
             Up to 800 Tweets are obtainable on the home timeline.
             It is more volatile for users that follow many users or follow users who Tweet frequently.
             </summary>
             <para>Read more : https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-home_timeline </para>
             <returns>An iterator to list the of tweets displayed on the authenticated user's home page</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITimelinesRequester.GetRetweetsOfMeTimelineIterator(Tweetinvi.Parameters.IGetRetweetsOfMeTimelineParameters)">
            <summary>
            Returns the most recent Tweets authored by the authenticating user that have been retweeted by others.
            This timeline is a subset of the account user's timeline.
            <para>Read more : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweets_of_me </para>
            </summary>
            <returns>An iterator to list the accounts tweet that got retweeted</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITimelinesRequester.GetMentionsTimelineIterator(Tweetinvi.Parameters.IGetMentionsTimelineParameters)">
            <summary>
            Returns the most recent mentions (Tweets containing a users's @screen_name) for the authenticated user.
            The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.
            </summary>
            <para>Read more : https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-mentions_timeline </para>
            <returns>An iterator to list the of tweets mentioning the authenticated user's</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITrendsRequester.GetPlaceTrendsAtAsync(Tweetinvi.Parameters.TrendsClient.IGetTrendsAtParameters)">
            <summary>
            Returns the top 50 trending topics for a specific WOEID
            </summary>
            <para>Read more : https://developer.twitter.com/en/docs/trends/trends-for-location/api-reference/get-trends-place </para>
            <returns>Twitter result containing the place trends</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITrendsRequester.GetTrendLocationsAsync(Tweetinvi.Parameters.TrendsClient.IGetTrendsLocationParameters)">
            <summary>
            Returns the locations that Twitter has trending topic information for.
            </summary>
            <para>Read more : https://developer.twitter.com/en/docs/trends/locations-with-trending-topics/api-reference/get-trends-available </para>
            <returns>Twitter result containing the trending locations</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITrendsRequester.GetTrendsLocationCloseToAsync(Tweetinvi.Parameters.TrendsClient.IGetTrendsLocationCloseToParameters)">
            <summary>
            Returns the locations that Twitter has trending topic information for, closest to a specified location.
            </summary>
            <para>Read more : https://developer.twitter.com/en/docs/trends/locations-with-trending-topics/api-reference/get-trends-closest </para>
            <returns>Twitter result containing the trending locations</returns>
        </member>
        <member name="T:Tweetinvi.Client.Requesters.ITweetsRequester">
            <summary>
            A client providing all the methods related with tweets.
            The results from this client contain additional metadata.
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITweetsRequester.GetTweetAsync(Tweetinvi.Parameters.IGetTweetParameters)">
            <summary>
            Get a tweet
            <para>Read more : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-show-id </para>
            </summary>
            <returns>TwitterResult containing specified tweet</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITweetsRequester.PublishTweetAsync(Tweetinvi.Parameters.IPublishTweetParameters)">
            <summary>
            Publish a tweet
            <para>Read more : https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-show-id </para>
            </summary>
            <returns>TwitterResult containing the published tweet</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITweetsRequester.DestroyTweetAsync(Tweetinvi.Parameters.IDestroyTweetParameters)">
            <summary>
            Destroy a tweet
            <para>Read more : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-statuses-destroy-id </para>
            </summary>
            <returns>TwitterResult containing the destroyed tweet</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITweetsRequester.GetUserFavoriteTweetsIterator(Tweetinvi.Parameters.IGetUserFavoriteTweetsParameters)">
            <summary>
            Get favorite tweets of a user
            <para>Read more : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-favorites-list </para>
            </summary>
            <returns>Iterator over the list of tweets favorited by a user</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITweetsRequester.GetTweetsAsync(Tweetinvi.Parameters.IGetTweetsParameters)">
            <summary>
            Get multiple tweets
            <para>Read more : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-lookup </para>
            </summary>
            <returns>TwitterResult containing requested tweets</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITweetsRequester.GetRetweetsAsync(Tweetinvi.Parameters.IGetRetweetsParameters)">
            <summary>
            Get the retweets associated with a specific tweet
            <para>Read more : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweets-id </para>
            </summary>
            <returns>TwitterResult containing the retweets</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITweetsRequester.PublishRetweetAsync(Tweetinvi.Parameters.IPublishRetweetParameters)">
            <summary>
            Publish a retweet
            <para>Read more : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-statuses-retweet-id </para>
            </summary>
            <returns>TwitterResult containing the published retweet</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITweetsRequester.GetRetweeterIdsIterator(Tweetinvi.Parameters.IGetRetweeterIdsParameters)">
            <summary>
            Get the ids of the users who retweeted a specific tweet
            <para> Read more : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids </para>
            </summary>
            <returns>TwitterCursorResult to iterate over all the user's friends</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITweetsRequester.DestroyRetweetAsync(Tweetinvi.Parameters.IDestroyRetweetParameters)">
            <summary>
            Destroy a retweet
            <para>Read more : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-statuses-unretweet-id </para>
            </summary>
            <returns>TwitterResult containing the success status of the request</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITweetsRequester.FavoriteTweetAsync(Tweetinvi.Parameters.IFavoriteTweetParameters)">
            <summary>
            Favorite a tweet
            </summary>
            <para>Read more : https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-favorites-destroy </para>
            <returns>TwitterResult containing the favorited tweet</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITweetsRequester.UnfavoriteTweetAsync(Tweetinvi.Parameters.IUnfavoriteTweetParameters)">
            <summary>
            Remove the favorite of a tweet
            </summary>
            <para>Read more : https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-favorites-destroy </para>
            <returns>TwitterResult containing the no longer favorited tweet</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITweetsRequester.GetOEmbedTweetAsync(Tweetinvi.Parameters.IGetOEmbedTweetParameters)">
            <summary>
            Get an oembed tweet
            </summary>
            <para>Read more : https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-oembed </para>
            <returns>TwitterResult containing the oembed tweet</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITwitterListsRequester.CreateListAsync(Tweetinvi.Parameters.ICreateListParameters)">
            <summary>
            Create a list on Twitter
            </summary>
            <para> https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-create </para>
            <returns>TwitterResult containing the created list</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITwitterListsRequester.GetListAsync(Tweetinvi.Parameters.IGetListParameters)">
            <summary>
            Get a specific list from Twitter
            </summary>
            <para> https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-show </para>
            <returns>TwitterResult containing the list</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITwitterListsRequester.GetListsSubscribedByUserAsync(Tweetinvi.Parameters.IGetListsSubscribedByUserParameters)">
            <summary>
            Get a user's lists
            </summary>
            <para> https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-list </para>
            <returns>TwitterResult containing the user's lists</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITwitterListsRequester.UpdateListAsync(Tweetinvi.Parameters.IUpdateListParameters)">
            <summary>
            Update information of a Twitter list
            </summary>
            <para> https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-update </para>
            <returns>TwitterResult containing the updated list</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITwitterListsRequester.DestroyListAsync(Tweetinvi.Parameters.IDestroyListParameters)">
            <summary>
            Destroy a list from Twitter
            </summary>
            <para> https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-destroy </para>
            <returns>TwitterResult containing the destroyed list</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITwitterListsRequester.GetListsOwnedByAccountIterator(Tweetinvi.Parameters.IGetListsOwnedByAccountParameters)">
            <summary>
            Get the lists owned by the authenticated user
            </summary>
            <para> https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-ownerships </para>
            <returns>An iterator over the lists owned by the authenticated user</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITwitterListsRequester.GetListsOwnedByUserIterator(Tweetinvi.Parameters.IGetListsOwnedByUserParameters)">
            <summary>
            Get the lists owned by a user or an account
            </summary>
            <para> https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-ownerships </para>
            <returns>An iterator over the lists owned by the user</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITwitterListsRequester.AddMemberToListAsync(Tweetinvi.Parameters.IAddMemberToListParameters)">
            <summary>
            Add a member to a twitter list
            </summary>
            <para> https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-members-create </para>
            <returns>TwitterResult containing the list</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITwitterListsRequester.AddMembersToListAsync(Tweetinvi.Parameters.IAddMembersToListParameters)">
            <summary>
            Add multiple members to a list
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-members-create_all </para>
            </summary>
            <returns>TwitterResult containing the list</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITwitterListsRequester.GetAccountListMembershipsIterator(Tweetinvi.Parameters.IGetAccountListMembershipsParameters)">
            <summary>
            Get the lists the authenticated user is a member of
            </summary>
            <para> https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-memberships </para>
            <returns>An iterator over the lists a user is a member of</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITwitterListsRequester.GetUserListMembershipsIterator(Tweetinvi.Parameters.IGetUserListMembershipsParameters)">
            <summary>
            Get the lists a user is a member of
            </summary>
            <para> https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-memberships </para>
            <returns>An iterator over the lists a user is a member of</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITwitterListsRequester.GetMembersOfListIterator(Tweetinvi.Parameters.IGetMembersOfListParameters)">
            <summary>
            Get the members of the specified list.
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-members </para>
            </summary>
            <returns>An iterator to list the users members of the list</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITwitterListsRequester.CheckIfUserIsAListMemberAsync(Tweetinvi.Parameters.ICheckIfUserIsMemberOfListParameters)">
            <summary>
            Check if a user is a member of a list
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-members-show </para>
            </summary>
            <returns>TwitterResult containing the list </returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITwitterListsRequester.RemoveMemberFromListAsync(Tweetinvi.Parameters.IRemoveMemberFromListParameters)">
            <summary>
            Remove a member from a list
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-members-destroy </para>
            </summary>
            <returns>TwitterResult containing the list </returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITwitterListsRequester.RemoveMembersFromListAsync(Tweetinvi.Parameters.IRemoveMembersFromListParameters)">
            <summary>
            Remove multiple members from a list
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-members-destroy_all </para>
            </summary>
            <returns>TwitterResult containing the list</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITwitterListsRequester.SubscribeToListAsync(Tweetinvi.Parameters.ISubscribeToListParameters)">
            <summary>
            Subscribe the authenticated account to the specified list
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-create </para>
            </summary>
            <returns>Twitter result containing the latest version of the list</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITwitterListsRequester.UnsubscribeFromListAsync(Tweetinvi.Parameters.IUnsubscribeFromListParameters)">
            <summary>
            Unsubscribe the authenticated account from the specified list
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-destroy </para>
            </summary>
            <returns>Twitter result containing the latest version of the list</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITwitterListsRequester.GetListSubscribersIterator(Tweetinvi.Parameters.IGetListSubscribersParameters)">
            <summary>
            Returns the users subscribed to a list
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers </para>
            </summary>
            <returns>An iterator to get through the subscribers of the list</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITwitterListsRequester.GetAccountListSubscriptionsIterator(Tweetinvi.Parameters.IGetAccountListSubscriptionsParameters)">
            <summary>
            Returns the lists the authenticated user is subscribed to
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-subscriptions </para>
            </summary>
            <returns>An iterator the get through the lists the authenticated user is subscribed to</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITwitterListsRequester.GetUserListSubscriptionsIterator(Tweetinvi.Parameters.IGetUserListSubscriptionsParameters)">
            <summary>
            Returns the lists a user subscribed to
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-subscriptions </para>
            </summary>
            <returns>An iterator the get through the lists a user subscribed to</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITwitterListsRequester.CheckIfUserIsSubscriberOfListAsync(Tweetinvi.Parameters.ICheckIfUserIsSubscriberOfListParameters)">
            <summary>
            Check if a user is a subscriber of a list
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers-show </para>
            </summary>
            <exception cref="T:Tweetinvi.Exceptions.TwitterException">If the user is not subscribed</exception>
            <returns>TwitterResult with the latest version of the list.</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.ITwitterListsRequester.GetTweetsFromListIterator(Tweetinvi.Parameters.IGetTweetsFromListParameters)">
            <summary>
            Returns the tweets authored by the members of the list.
            <para>Read more : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-statuses </para>
            </summary>
            <returns>An iterator to get through the tweets of a list</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUploadRequester.UploadBinaryAsync(Tweetinvi.Parameters.IUploadParameters)">
            <summary>
            Upload a binary in chunks and waits for the Twitter to have processed it
            <para>INIT : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-init</para>
            <para>APPEND : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-append</para>
            <para>FINALIZE : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-finalize</para>
            </summary>
            <returns>Uploaded media information</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUploadRequester.AddMediaMetadataAsync(Tweetinvi.Parameters.IAddMediaMetadataParameters)">
            <summary>
            Add metadata to an uploaded media
            <para>Read more : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-metadata-create</para>
            </summary>
            <returns>Whether the operation was a success</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUploadRequester.GetVideoProcessingStatusAsync(Tweetinvi.Models.IMedia)">
            <summary>
            Get a video processing status
            <para>https://dev.twitter.com/en/docs/media/upload-media/api-reference/get-media-upload-status</para>
            </summary>
            <returns>Current status of the video processing</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUploadRequester.WaitForMediaProcessingToGetAllMetadataAsync(Tweetinvi.Models.IMedia)">
            <summary>
            Wait for the upload of a media has completed
            <para>Read more : https://dev.twitter.com/en/docs/media/upload-media/api-reference/get-media-upload-status</para>
            </summary>
            <returns>Completes wait the media is ready for use</returns>
        </member>
        <member name="T:Tweetinvi.Client.Requesters.IUsersRequester">
            <summary>
            A client providing all the methods related with users.
            The results from this client contain additional metadata.
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUsersRequester.GetAuthenticatedUserAsync(Tweetinvi.Parameters.IGetAuthenticatedUserParameters)">
            <summary>
            Get the authenticated user based on the TwitterClient's credentials
            <para>Read more : https://dev.twitter.com/rest/reference/get/account/verify_credentials </para>
            </summary>
            <returns>TwitterResult containing the client's authenticated user</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUsersRequester.GetUserAsync(Tweetinvi.Parameters.IGetUserParameters)">
            <summary>
            Get a user
            </summary>
            <returns>TwitterResult containing a user</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUsersRequester.GetUsersAsync(Tweetinvi.Parameters.IGetUsersParameters)">
            <summary>
            Get multiple users
            </summary>
            <returns>TwitterResult containing a collection of users</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUsersRequester.GetFriendIdsIterator(Tweetinvi.Parameters.IGetFriendIdsParameters)">
            <summary>
            Get friend ids from a specific user
            </summary>
            <returns>TwitterCursorResult to iterate over all the user's friends</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUsersRequester.GetFollowerIdsIterator(Tweetinvi.Parameters.IGetFollowerIdsParameters)">
            <summary>
            Get friend ids from a specific user
            </summary>
            <returns>TwitterCursorResult to iterate over all the user's friends</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUsersRequester.GetRelationshipBetweenAsync(Tweetinvi.Parameters.IGetRelationshipBetweenParameters)">
            <summary>
            Get relationship information between 2 users.
            </summary>
            <returns>Returns detailed information about the relationship between two arbitrary users</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUsersRequester.BlockUserAsync(Tweetinvi.Parameters.IBlockUserParameters)">
            <summary>
            Block a user from the client's account
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create </para>
            </summary>
            <returns>TwitterResult containing the blocked user</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUsersRequester.UnblockUserAsync(Tweetinvi.Parameters.IUnblockUserParameters)">
            <summary>
            Unblock a user from the client's account
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy </para>
            </summary>
            <returns>TwitterResult containing the unblocked user</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUsersRequester.ReportUserForSpamAsync(Tweetinvi.Parameters.IReportUserForSpamParameters)">
            <summary>
            Report a user for spam
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/post-users-report_spam </para>
            </summary>
            <returns>TwitterResult containing the reported user</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUsersRequester.GetBlockedUserIdsIterator(Tweetinvi.Parameters.IGetBlockedUserIdsParameters)">
            <summary>
            Get the user ids blocked by the client's account
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/get-blocks-ids </para>
            </summary>
            <returns>An iterator to list the blocked user ids</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUsersRequester.GetBlockedUsersIterator(Tweetinvi.Parameters.IGetBlockedUsersParameters)">
            <summary>
            Get the users blocked by the client's account
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/get-blocks-ids </para>
            </summary>
            <returns>An iterator to list the blocked users</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUsersRequester.FollowUserAsync(Tweetinvi.Parameters.IFollowUserParameters)">
            <summary>
            Follow a user
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create </para>
            </summary>
            <returns>TwitterResult containing the followed user</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUsersRequester.UpdateRelationshipAsync(Tweetinvi.Parameters.IUpdateRelationshipParameters)">
            <summary>
            Modify the relationship between the authenticated user (source) and another user (target).
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/post-friendships-update </para>
            </summary>
            <returns>TwitterResult containing the updated relationship details</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUsersRequester.UnfollowUserAsync(Tweetinvi.Parameters.IUnfollowUserParameters)">
            <summary>
            Stops following a user
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy </para>
            </summary>
            <returns>TwitterResult containing the user who is no longer followed</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUsersRequester.GetUserIdsRequestingFriendshipIterator(Tweetinvi.Parameters.IGetUserIdsRequestingFriendshipParameters)">
            <summary>
            Get the pending follower requests you have received.
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-incoming </para>
            <para>Protected accounts : https://help.twitter.com/en/safety-and-security/public-and-protected-tweets</para>
            </summary>
            <returns>An iterator to list the users who requested to follow the client's account</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUsersRequester.GetUserIdsYouRequestedToFollowIterator(Tweetinvi.Parameters.IGetUserIdsYouRequestedToFollowParameters)">
            <summary>
            Get the pending follower requests that you have requested.
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-outgoing </para>
            <para>Protected accounts : https://help.twitter.com/en/safety-and-security/public-and-protected-tweets</para>
            </summary>
            <returns>An iterator to list the user ids the client's account requested to follow</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUsersRequester.GetRelationshipsWithAsync(Tweetinvi.Parameters.IGetRelationshipsWithParameters)">
            <summary>
            Get the relationships of the client's user with multiple other users
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-lookup </para>
            </summary>
            <returns>TwitterResult containing the relationships between the authenticated user and multiple other users</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUsersRequester.GetUserIdsWhoseRetweetsAreMutedAsync(Tweetinvi.Parameters.IGetUserIdsWhoseRetweetsAreMutedParameters)">
            <summary>
            Get the user ids for whom the retweets are muted
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-no_retweets-ids </para>
            </summary>
            <returns>TwitterResult containing a list of user ids for whom the retweets are muted</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUsersRequester.GetMutedUserIdsIterator(Tweetinvi.Parameters.IGetMutedUserIdsParameters)">
            <summary>
            Get the muted user ids.
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-ids </para>
            </summary>
            <returns>An iterator to list the user ids muted by the client's account</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUsersRequester.GetMutedUsersIterator(Tweetinvi.Parameters.IGetMutedUsersParameters)">
            <summary>
            Get the muted user ids.
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-list </para>
            </summary>
            <returns>An iterator to list the users muted by the client's account</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUsersRequester.MuteUserAsync(Tweetinvi.Parameters.IMuteUserParameters)">
            <summary>
            Mute a user
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/post-mutes-users-create </para>
            </summary>
            <returns>Twitter result containing the authenticated user</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUsersRequester.UnmuteUserAsync(Tweetinvi.Parameters.IUnmuteUserParameters)">
            <summary>
            Remove the mute of a user
            <para>Read more : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/post-mutes-users-destroy </para>
            </summary>
            <returns>Twitter result containing the authenticated user</returns>
        </member>
        <member name="M:Tweetinvi.Client.Requesters.IUsersRequester.GetProfileImageStream(Tweetinvi.Parameters.IGetProfileImageParameters)">
            <summary>
            Get the profile image of a user
            </summary>
            <returns>A stream of the image file</returns>
        </member>
        <member name="M:Tweetinvi.Client.Tools.ITwitterClientFactories.CreateAccountSettings(System.String)">
            <summary>
            Creates accountSettings from json
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Tools.ITwitterClientFactories.CreateTwitterList(System.String)">
            <summary>
            Create TwitterList from json
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Tools.ITwitterClientFactories.CreateMessageFromMessageEventWithApp(System.String)">
            <summary>
            Creates a message from create event message json
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Tools.ITwitterClientFactories.CreateMessage(System.String)">
            <summary>
            Creates a Message from json
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Tools.ITwitterClientFactories.CreateRelationshipState(System.String)">
            <summary>
            Creates a relationship state from json
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Tools.ITwitterClientFactories.CreateSavedSearch(System.String)">
            <summary>
            Creates a saved search from json
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Tools.ITwitterClientFactories.CreateTweet(System.String)">
            <summary>
            Creates a tweet from json
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Tools.ITwitterClientFactories.CreateOEmbedTweet(System.String)">
            <summary>
            Creates a oembed tweet from json
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Tools.ITwitterClientFactories.CreateUser(System.String)">
            <summary>
            Creates a user from json
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Tools.ITwitterClientFactories.CreateAuthenticatedUser(System.String)">
            <summary>
            Creates an authenticated user from json
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Tools.ITwitterClientFactories.CreateWebhook(System.String)">
            <summary>
            Creates a webhook from json
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Tools.ITwitterClientFactories.CreateWebhookEnvironment(System.String)">
            <summary>
            Creates a webhook environment from json
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Tools.ITwitterClientFactories.CreateWebhookEnvironmentSubscriptions(System.String)">
            <summary>
            Creates a webhook subscription from json
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Tools.ITwitterClientFactories.CreateTwitterConfiguration(System.String)">
            <summary>
            Creates a twitter configuration from json
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Tools.ITwitterClientFactories.CreateRateLimits(System.String)">
            <summary>
            Creates a RateLimits object from json
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Tools.ITwitterClientFactories.CreateTwitterCredentials(System.String)">
            <summary>
            Creates credentials from json
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Tools.ITwitterClientFactories.CreateConsumerCredentials(System.String)">
            <summary>
            Creates consumer credentials from json
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Tools.ITwitterClientFactories.CreateMedia(System.String)">
            <summary>
            Creates a media from json
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Tools.ITwitterClientFactories.CreateUploadedMediaInfo(System.String)">
            <summary>
            Creates uploaded media information from json
            </summary>
        </member>
        <member name="M:Tweetinvi.Client.Tools.ITwitterClientFactories.CreateSearchResult(System.String)">
            <summary>
            Creates search results from json
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.AccountActivityEvent">
            <summary>
            Twitter account event
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.BaseAccountActivityEventArgs.AccountUserId">
            <summary>
            The account user id for who the event has been raised
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.BaseAccountActivityEventArgs.EventDate">
            <summary>
            The date when the event has occurred
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.BaseAccountActivityEventArgs.Json">
            <summary>
            The full json message from which this event has been extracted out.
            Note that a message can contain multiple events. This message will
            contain them all as the information associated with the event can be
            stored at different level of the json.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.BaseAccountActivityEventArgs`1.InResultOf">
            <summary>
            The action that resulted in this event to be raised
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.BaseAccountActivityMessageEventArgs`1">
            <summary>
            Event information when a message is published.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.BaseAccountActivityMessageEventArgs`1.Message">
            <summary>
            Message for which the event has occurred
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.BaseAccountActivityMessageEventArgs`1.Sender">
            <summary>
            Send of the message
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.BaseAccountActivityMessageEventArgs`1.Recipient">
            <summary>
            Recipient of the message
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.BaseAccountActivityMessageEventArgs`1.App">
            <summary>
            Application used to send the message
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.EventKnownButNotSupported">
            <summary>
            The json message was understood, but Tweetinvi could not properly analyze it
            as it the reason why it was raised are not yet supported
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.EventKnownButNotSupported.Json">
            <summary>
            The json object that Tweetinvi could not fully understand
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.MessageReceivedInResultOf.Unknown">
            <summary>
            This case should not happen and is here in case Twitter changes when they trigger the MessageCreated event.
            If you happen to receive this mode, please report to Tweetinvi your case ideally with the associated json.
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.MessageReceivedInResultOf.AccountUserReceivingAMessage">
            <summary>
            The account user received a message.
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.MessageReceivedEvent">
            <summary>
            Event information when a message is published.
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.MessageSentInResultOf.Unknown">
            <summary>
            This case should not happen and is here in case Twitter changes when they trigger the MessageCreated event.
            If you happen to receive this mode, please report to Tweetinvi your case ideally with the associated json.
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.MessageSentInResultOf.AccountUserSendingAMessage">
            <summary>
            The account user sent a message.
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.MessageSentEvent">
            <summary>
            Event information when a message is published.
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.TweetCreatedRaisedInResultOf.Unknown">
            <summary>
            This case should not happen and is here in case Twitter changes when they trigger the TweetCreated event.
            If you happen to receive this mode, please report to Tweetinvi your case ideally with the associated json.
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.TweetCreatedRaisedInResultOf.AccountUserCreatingATweet">
            <summary>
            The tweet was created by the account user.
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.TweetCreatedRaisedInResultOf.AnotherUserReplyingToAccountUser">
            <summary>
            The tweet has been created by another user in reply to a tweet posted by the account user.
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.TweetCreatedRaisedInResultOf.AnotherUserMentioningTheAccountUser">
            <summary>
            The tweet has been created by another user and is mentioning the account user.
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.TweetCreatedEvent">
            <summary>
            Event information when a tweet is published.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.TweetCreatedEvent.Tweet">
            <summary>
            The tweet that was published
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.TweetDeletedRaisedInResultOf.AnotherUserDeletedATweet">
            <summary>
            The tweet was deleted by another user
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.TweetDeletedRaisedInResultOf.AccountUserDeletingOneOfHisTweets">
            <summary>
            The tweet was deleted by the account user.
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.TweetDeletedEvent">
            <summary>
            Event information when a tweet is deleted.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.TweetDeletedEvent.TweetId">
            <summary>
            Id of the tweet that was deleted
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.TweetDeletedEvent.UserId">
            <summary>
            Id of the user who created the tweet
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.TweetFavoritedRaisedInResultOf.Unknown">
            <summary>
            This case should not happen and is here in case Twitter changes when they trigger the TweetFavorited event.
            If you happen to receive this mode, please report to Tweetinvi your case ideally with the associated json.
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.TweetFavoritedRaisedInResultOf.AccountUserFavoritingHisOwnTweet">
            <summary>
            The account user Favorited one of his own tweet
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.TweetFavoritedRaisedInResultOf.AccountUserFavoritingATweetOfAnotherUser">
            <summary>
            The account user facourited a tweet of another user
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.TweetFavoritedRaisedInResultOf.AnotherUserFavoritingATweetOfTheAccountUser">
            <summary>
            Another user Favorited the tweet of the account user
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.TweetFavoritedEvent">
            <summary>
            Event information when a tweet is Favorited.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.TweetFavoritedEvent.Tweet">
            <summary>
            The tweet that got Favorited
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.TweetFavoritedEvent.FavoritedBy">
            <summary>
            The user who Favorited the tweet
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.UserBlockedRaisedInResultOf.Unknown">
            <summary>
            This case should not happen and is here in case Twitter changes when they trigger the Blocked event.
            If you happen to receive this mode, please report to Tweetinvi your case ideally with the associated json.
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.UserBlockedRaisedInResultOf.AccountUserBlockingAnotherUser">
            <summary>
            The account user has blocked another user
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.UserBlockedEvent">
            <summary>
            Event information when a user is blocked.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.UserBlockedEvent.BlockedUser">
            <summary>
            The user who got blocked
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.UserBlockedEvent.BlockedBy">
            <summary>
            The user who blocked
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.UserFollowedRaisedInResultOf.Unknown">
            <summary>
            This case should not happen and is here in case Twitter changes when they trigger the Followed event.
            If you happen to receive this mode, please report to Tweetinvi your case ideally with the associated json.
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.UserFollowedRaisedInResultOf.AccountUserFollowingAnotherUser">
            <summary>
            The account user is now following another user
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.UserFollowedRaisedInResultOf.AnotherUserFollowingAccountUser">
            <summary>
            The account user is being followed by another user
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.UserFollowedEvent">
            <summary>
            Event information when a user is being followed.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.UserFollowedEvent.FollowedUser">
            <summary>
            The user who got followed
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.UserFollowedEvent.FollowedBy">
            <summary>
            The user who performed the action of following another user
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.UserIsTypingMessageInResultOf.Unknown">
            <summary>
            This case should not happen and is here in case Twitter changes when they trigger the MessageTyping event.
            If you happen to receive this mode, please report to Tweetinvi your case ideally with the associated json.
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.UserIsTypingMessageInResultOf.AnotherUserTypingAMessageToAccountUser">
            <summary>
            Another user is typing a message in destination to the account user
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.UserIsTypingMessageEvent">
            <summary>
            Event information when a user is typing in a private message conversation.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.UserIsTypingMessageEvent.TypingUser">
            <summary>
            The user who is typing
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.UserIsTypingMessageEvent.TypingTo">
            <summary>
            The user who is going to receive a message
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.UserMutedRaisedInResultOf.Unknown">
            <summary>
            This case should not happen and is here in case Twitter changes when they trigger the Muted event.
            If you happen to receive this mode, please report to Tweetinvi your case ideally with the associated json.
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.UserMutedRaisedInResultOf.AccountUserMutingAnotherUser">
            <summary>
            The account user has muted another user
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.UserMutedEvent">
            <summary>
            Event information when a user is muted.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.UserMutedEvent.MutedUser">
            <summary>
            The user who got muted
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.UserMutedEvent.MutedBy">
            <summary>
            The user who performed the action of muting another user
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.UserReadMessageConversationInResultOf.Unknown">
            <summary>
            This case should not happen and is here in case Twitter changes when they trigger the MessageRead event.
            If you happen to receive this mode, please report to Tweetinvi your case ideally with the associated json.
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.UserReadMessageConversationInResultOf.AnotherUserReadingConversation">
            <summary>
            Another user has read a message sent by the account user
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.UserReadMessageConversationEvent">
            <summary>
            Event information when a user reads a private message conversation.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.UserReadMessageConversationEvent.UserWhoReadTheMessageConversation">
            <summary>
            The user who read the message
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.UserReadMessageConversationEvent.UserWhoWroteTheMessage">
            <summary>
            The user who sent the message that just got read
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.UserReadMessageConversationEvent.LastReadEventId">
            <summary>
            An identifier of the read action
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.UserRevokedAppPermissionsInResultOf.Unknown">
            <summary>
            This case should not happen and is here in case Twitter changes when they trigger the PermissionsRevoked event.
            If you happen to receive this mode, please report to Tweetinvi your case ideally with the associated json.
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.UserRevokedAppPermissionsInResultOf.AccountUserRemovingAppPermissions">
            <summary>
            The account user removed permission for a specific app
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.UserRevokedAppPermissionsEvent">
            <summary>
            Event information when a user revokes application permissions.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.UserRevokedAppPermissionsEvent.UserId">
            <summary>
            Id of the user who revoked the application permissions
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.UserRevokedAppPermissionsEvent.AppId">
            <summary>
            Application that go its permissions revoked
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.UserUnblockedRaisedInResultOf.Unknown">
            <summary>
            This case should not happen and is here in case Twitter changes when they trigger the Unblocked event.
            If you happen to receive this mode, please report to Tweetinvi your case ideally with the associated json.
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.UserUnblockedRaisedInResultOf.AccountUserUnblockingAnotherUser">
            <summary>
            The account user has unblocked another user
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.UserUnblockedEvent">
            <summary>
            Event information when a user is unblocked.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.UserUnblockedEvent.UnblockedUser">
            <summary>
            THe user who got unblocked
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.UserUnblockedEvent.UnblockedBy">
            <summary>
            The user who performed the action of unblocking another user
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.UserUnfollowedRaisedInResultOf.Unknown">
            <summary>
            This case should not happen and is here in case Twitter changes when they trigger the Unfollowed event.
            If you happen to receive this mode, please report to Tweetinvi your case ideally with the associated json.
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.UserUnfollowedRaisedInResultOf.AccountUserUnfollowingAnotherUser">
            <summary>
            The account user is no longer following another user
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.UserUnfollowedEvent">
            <summary>
            Event information when a user is unfollowed.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.UserUnfollowedEvent.UnfollowedUser">
            <summary>
            User who just got unfollowed
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.UserUnfollowedEvent.UnfollowedBy">
            <summary>
            User who performed the action of unfollowing another user
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.UserUnmutedRaisedInResultOf.Unknown">
            <summary>
            This case should not happen and is here in case Twitter changes when they trigger the Unmuted event.
            If you happen to receive this mode, please report to Tweetinvi your case ideally with the associated json.
            </summary>
        </member>
        <member name="F:Tweetinvi.Events.UserUnmutedRaisedInResultOf.AccountUserUnmutingAnotherUser">
            <summary>
            The account user has Unmuted another user
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.UserUnmutedEvent">
            <summary>
            Event information when a user is unmuted.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.UserUnmutedEvent.UnmutedUser">
            <summary>
            User who stopped being muted
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.UserUnmutedEvent.UnmutedBy">
            <summary>
            User who performed the action of muting another user
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.AfterExecutingQueryEventArgs">
            <summary>
            Event raised to inform that a request completed its execution
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.AfterExecutingQueryEventArgs.HttpContent">
            <summary>
            Result returned by Twitter.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.AfterExecutingQueryEventArgs.HttpHeaders">
            <summary>
            Headers returned by Twitter.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.AfterExecutingQueryEventArgs.CompletedDateTime">
            <summary>
            Exact DateTime when the request completed.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.AfterExecutingQueryEventArgs.Success">
            <summary>
            Whether the request has been successful.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.AfterExecutingQueryEventArgs.Exception">
            <summary>
            Exception Raised by Twitter
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.AfterExecutingQueryExceptionEventArgs">
            <summary>
            Event raised to inform that a request just failed its execution
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.BeforeExecutingRequestEventArgs">
            <summary>
            Event raised to inform that a request is starting its execution
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.BeforeExecutingRequestEventArgs.Cancel">
            <summary>
            If set to true this query won't be executed.
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.DisconnectedEventArgs">
            <summary>
            The stream was disconnected
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.StreamStoppedEventArgs">
            <summary>
            Event to inform that a stream has stopped.
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.GenericEventArgs`1">
            <summary>
            EventArgs with value of Type T
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.LimitReachedEventArgs">
            <summary>
            Event to inform that the limit of tweets that can be received by the application has been reached.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.IMediaUploadProgressChangedEventArgs.State">
            <summary>
            Type of operation executed for the upload
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.MediaUploadProgressChangedEventArgs">
            <summary>
            Event that indicates a progress change during a media upload
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.QueryExecutionEventArgs.TwitterQuery">
            <summary>
            Contains all the required information to execute a request on the Twitter REST API.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.QueryExecutionEventArgs.Url">
            <summary>
            Endpoint URL.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.QueryExecutionEventArgs.Credentials">
            <summary>
            Credentials used to execute the query.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.QueryExecutionEventArgs.QueryRateLimit">
            <summary>
            Endpoint Rate Limits information.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.QueryExecutionEventArgs.DateOfQueryExecution">
            <summary>
            Date at which the Twitter query will be ready to be executed.
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.QueryExecutionEventArgs.TimeToWaitBeforeExecutingTheQuery">
            <summary>
            Recommended time to wait before executing such a query,
            in order to ensure that the twitter limitations won't be retuning an error.
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.UnsupportedMessageReceivedEvent">
            <summary>
            Tweetinvi received a message that it did not understood
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.StreamEventReceivedArgs">
            <summary>
            Event informing that a message was received
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.TweetReceivedEventArgs">
            <summary>
            Event informing that a tweet was received by a stream
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.MatchedTweetReceivedEventArgs">
            <summary>
            Event informing that a tweet matching a stream criteria has been received
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.TweetinviContainerEventArgs">
            <summary>
            Event informing of operations being performed on a container lifecycle.
            <para>This is for advance use cases and debugging of the library</para>
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.UnexpectedExceptionThrownEvent">
            <summary>
            An exception that could not be handled by Tweetinvi was thrown
            Please report such errors on github
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.IUploadProgressChanged.NumberOfBytesUploaded">
            <summary>
            Numbers of bytes that have been successfully sent at the current time
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.IUploadProgressChanged.TotalOfBytesToUpload">
            <summary>
            Total number of bytes of the upload
            </summary>
        </member>
        <member name="P:Tweetinvi.Events.IUploadProgressChanged.Percentage">
            <summary>
            Percentage of completion of the upload
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.UploadProgressChangedEventArgs">
            <summary>
            Event that indicates a progress change during an upload
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.UserWitheldEventArgs">
            <summary>
            Event informing that some user event happened by were blocked by the country
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.V2.TweetV2ReceivedEventArgs">
            <summary>
            Event informing that a tweet was received by a stream
            </summary>
        </member>
        <member name="T:Tweetinvi.Events.WarningFallingBehindEventArgs">
            <summary>
            Event informing that the processing of messages is too slow.
            <para>
            If you receive such message, please process the data received by the stream in another thread,
            or send the objects to a queue.
            </para>
            </summary>
        </member>
        <member name="T:Tweetinvi.Exceptions.TwitterArgumentLimitException">
            <summary>
            This exception is raised when you provide an invalid argument because of its size or content.
            </summary>
        </member>
        <member name="T:Tweetinvi.Exceptions.TwitterAuthAbortedException">
            <summary>
            This exception informs that the authentication process failed.
            </summary>
        </member>
        <member name="T:Tweetinvi.Exceptions.TwitterAuthException">
            <summary>
            This exception informs that the authentication process failed.
            </summary>
        </member>
        <member name="T:Tweetinvi.Exceptions.TwitterException">
            <summary>
            Exception raised by the Twitter API.
            </summary>
        </member>
        <member name="T:Tweetinvi.Exceptions.TwitterInvalidCredentialsException">
            <summary>
            Exception raised when attempting to perform operations without the proper credentials
            </summary>
        </member>
        <member name="T:Tweetinvi.Exceptions.TwitterIteratorAlreadyCompletedException">
            <summary>
            Exception raised when attempting to move to a next page of an iterator that already completed its lifecyle.
            </summary>
        </member>
        <member name="T:Tweetinvi.Exceptions.TwitterNullCredentialsException">
            <summary>
            Exception raised when providing null credentials
            </summary>
        </member>
        <member name="T:Tweetinvi.Exceptions.TwitterTimeoutException">
            <summary>
            Exception raised when Twitter did not manage to respond to your request on time.
            </summary>
        </member>
        <member name="T:Tweetinvi.Iterators.IMultiLevelCursorIterator`3">
            <summary>
            Allow developers to iterate over multiple endpoints transparently.
            </summary>
        </member>
        <member name="T:Tweetinvi.Iterators.IMultiLevelCursorIteratorPage`3">
            <summary>
            Iterator page containing results from multiple endpoints when using MultiLevelCursorIterator
            </summary>
        </member>
        <member name="P:Tweetinvi.Iterators.IMultiLevelCursorIteratorPage`3.AssociatedParentItems">
            <summary>
            Parent items that were transformed into the items
            </summary>
        </member>
        <member name="T:Tweetinvi.Iterators.ITwitterIterator`1">
            <summary>
            Iterator allowing you to navigate through Twitter API pages
            </summary>
        </member>
        <member name="T:Tweetinvi.Iterators.ITwitterIterator`2">
            <summary>
            Iterator allowing you to navigate through Twitter API pages
            </summary>
        </member>
        <member name="T:Tweetinvi.Iterators.ITwitterIteratorPage`2">
            <summary>
            An iterator page containing the values of a specific page.
            It also give access to the next page as well as informing if a next page exists.
            </summary>
        </member>
        <member name="P:Tweetinvi.ITwitterClient.AccountSettings">
            <summary>
            Client to execute all actions related with the account associated with the clients' credentials
            </summary>
        </member>
        <member name="P:Tweetinvi.ITwitterClient.Auth">
            <summary>
            Client to execute all actions related with authentication
            </summary>
        </member>
        <member name="P:Tweetinvi.ITwitterClient.Help">
            <summary>
            Client to execute all actions from the help path
            </summary>
        </member>
        <member name="P:Tweetinvi.ITwitterClient.Execute">
            <summary>
            Client to execute custom requests
            </summary>
        </member>
        <member name="P:Tweetinvi.ITwitterClient.Lists">
            <summary>
            Client to execute all actions related with twitter lists
            </summary>
        </member>
        <member name="P:Tweetinvi.ITwitterClient.Messages">
            <summary>
            Client to execute all actions related with messages
            </summary>
        </member>
        <member name="P:Tweetinvi.ITwitterClient.RateLimits">
            <summary>
            Client to execute all actions related with rate limits
            </summary>
        </member>
        <member name="P:Tweetinvi.ITwitterClient.Search">
            <summary>
            Client to execute all actions related with search
            </summary>
        </member>
        <member name="P:Tweetinvi.ITwitterClient.Streams">
            <summary>
            Client to create all type of streams
            </summary>
        </member>
        <member name="P:Tweetinvi.ITwitterClient.Timelines">
            <summary>
            Client to execute all actions related with timelines
            </summary>
        </member>
        <member name="P:Tweetinvi.ITwitterClient.Trends">
            <summary>
            Client to execute all actions related with trends
            </summary>
        </member>
        <member name="P:Tweetinvi.ITwitterClient.Tweets">
            <summary>
            Client to execute all actions related with tweets
            </summary>
        </member>
        <member name="P:Tweetinvi.ITwitterClient.Users">
            <summary>
            Client to execute all actions related with users
            </summary>
        </member>
        <member name="P:Tweetinvi.ITwitterClient.Upload">
            <summary>
            Client to execute all actions related with media upload
            </summary>
        </member>
        <member name="P:Tweetinvi.ITwitterClient.AccountActivity">
            <summary>
            Client to execute all the actions related with webhooks
            </summary>
        </member>
        <member name="P:Tweetinvi.ITwitterClient.Raw">
            <summary>
            Execute Request and receive request results
            </summary>
        </member>
        <member name="P:Tweetinvi.ITwitterClient.Config">
            <summary>
            Client's config
            </summary>
        </member>
        <member name="P:Tweetinvi.ITwitterClient.Credentials">
            <summary>
            Client's credentials
            </summary>
        </member>
        <member name="P:Tweetinvi.ITwitterClient.Events">
            <summary>
            Listen to events raised by actions performed by the client
            </summary>
        </member>
        <member name="P:Tweetinvi.ITwitterClient.Factories">
            <summary>
            Simple way to construct tweetinvi objects
            </summary>
        </member>
        <member name="P:Tweetinvi.ITwitterClient.Json">
            <summary>
            Help you perform json operations with Tweetinvi objects
            </summary>
        </member>
        <member name="P:Tweetinvi.ITwitterClient.ParametersValidator">
            <summary>
            Validate parameters to ensure that they meet the default criteria
            </summary>
        </member>
        <member name="M:Tweetinvi.ITwitterClient.CreateRequest">
            <summary>
            Creates skeleton request representing a request from the client
            </summary>
        </member>
        <member name="M:Tweetinvi.ITwitterClient.CreateTwitterExecutionContext">
            <summary>
            Create an execution context for a request to be sent to Twitter.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IConsumerOnlyCredentials.ConsumerKey">
            <summary>
            Key identifying a specific consumer application
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IConsumerOnlyCredentials.ConsumerSecret">
            <summary>
            Secret Key identifying a specific consumer application
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IConsumerOnlyCredentials.BearerToken">
            <summary>
            Token required for Application Only Authentication
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.ConsumerOnlyCredentials">
            <summary>
            Authentication tokens of a specific app
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ConsumerOnlyCredentials.ConsumerKey">
            <inheritdoc cref="P:Tweetinvi.Models.ConsumerOnlyCredentials.ConsumerKey" />
        </member>
        <member name="P:Tweetinvi.Models.ConsumerOnlyCredentials.ConsumerSecret">
            <inheritdoc cref="P:Tweetinvi.Models.ConsumerOnlyCredentials.ConsumerSecret" />
        </member>
        <member name="P:Tweetinvi.Models.ConsumerOnlyCredentials.BearerToken">
            <inheritdoc cref="P:Tweetinvi.Models.ConsumerOnlyCredentials.BearerToken" />
        </member>
        <member name="T:Tweetinvi.Models.IAuthenticationRequest">
            <summary>
            User authentication request containing all information required for completing an authentication process
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAuthenticationRequest.AuthorizationKey">
            <summary>
            Key required for user authentication.
            This key needs to be saved when getting the result of url redirect authentication
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAuthenticationRequest.AuthorizationSecret">
            <summary>
            Secret required for user authentication
            This secret needs to be saved when getting the result of url redirect authentication
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAuthenticationRequest.VerifierCode">
            <summary>
            Verification information received when a user accepts an application to use its account.
            If this value is changed manually it will overridden by Tweetinvi.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAuthenticationRequest.AuthorizationURL">
            <summary>
            URL directing the user to Twitter authentication page for your application.
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.InvalidateTokenResponse">
            <summary>
            Information about an invalidated token
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IReadOnlyConsumerCredentialsWithoutBearer.ConsumerKey">
            <summary>
            ConsumerKey identifying a unique application
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IReadOnlyConsumerCredentialsWithoutBearer.ConsumerSecret">
            <summary>
            ConsumerSecret identifying a unique application
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IReadOnlyConsumerCredentials.BearerToken">
            <summary>
            Bearer token used to make API requests on an application's own behalf.
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.ReadOnlyConsumerCredentials">
            <summary>
            Readonly version of consumer credentials
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ReadOnlyConsumerCredentials.#ctor(System.String,System.String)">
            <param name="consumerKey">Your application consumer key</param>
            <param name="consumerSecret">Your application consumer secret</param>
        </member>
        <member name="M:Tweetinvi.Models.ReadOnlyConsumerCredentials.#ctor(System.String,System.String,System.String)">
            <param name="consumerKey">Your application consumer key</param>
            <param name="consumerSecret">Your application consumer secret</param>
            <param name="bearerToken">Your application Bearer Token</param>
        </member>
        <member name="P:Tweetinvi.Models.ReadOnlyConsumerCredentials.ConsumerKey">
            <inheritdoc cref="P:Tweetinvi.Models.IReadOnlyConsumerCredentialsWithoutBearer.ConsumerKey" />
        </member>
        <member name="P:Tweetinvi.Models.ReadOnlyConsumerCredentials.ConsumerSecret">
            <inheritdoc cref="P:Tweetinvi.Models.IReadOnlyConsumerCredentialsWithoutBearer.ConsumerSecret" />
        </member>
        <member name="P:Tweetinvi.Models.ReadOnlyConsumerCredentials.BearerToken">
            <inheritdoc cref="P:Tweetinvi.Models.IReadOnlyConsumerCredentials.BearerToken" />
        </member>
        <member name="P:Tweetinvi.Models.IReadOnlyTwitterCredentials.AccessToken">
            <summary>
            AccessToken granting access to user's specific account
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IReadOnlyTwitterCredentials.AccessTokenSecret">
            <summary>
            AccessTokenSecret granting access to user's specific account
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.ReadOnlyTwitterCredentials">
            <summary>
            Readonly version of twitter credentials
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ReadOnlyTwitterCredentials.AccessToken">
            <inheritdoc cref="P:Tweetinvi.Models.IReadOnlyTwitterCredentials.AccessToken" />
        </member>
        <member name="P:Tweetinvi.Models.ReadOnlyTwitterCredentials.AccessTokenSecret">
            <inheritdoc cref="P:Tweetinvi.Models.IReadOnlyTwitterCredentials.AccessTokenSecret" />
        </member>
        <member name="T:Tweetinvi.Models.ITwitterCredentials">
            <summary>
            Defines a contract of 4 information to connect to an OAuth service
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterCredentials.ConsumerKey">
            <summary>
            Key identifying a specific consumer application
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterCredentials.ConsumerSecret">
            <summary>
            Secret Key identifying a specific consumer application
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterCredentials.BearerToken">
            <summary>
            Token required for Application Only Authentication
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterCredentials.AccessToken">
            <summary>
            Key provided to the consumer to provide an authentication of the client
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterCredentials.AccessTokenSecret">
            <summary>
            Secret Key provided to the consumer to provide an authentication of the client
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.TwitterCredentials">
            <summary>
            This class provides host basic information for authorizing a OAuth
            consumer to connect to a service. It does not contain any logic
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.TwitterCredentials.#ctor(System.String,System.String)">
            <param name="consumerKey">Your application consumer key</param>
            <param name="consumerSecret">Your application consumer secret</param>
        </member>
        <member name="M:Tweetinvi.Models.TwitterCredentials.#ctor(System.String,System.String,System.String)">
            <param name="consumerKey">Your application consumer key</param>
            <param name="consumerSecret">Your application consumer secret</param>
            <param name="bearerToken">Your application Bearer Token</param>
        </member>
        <member name="M:Tweetinvi.Models.TwitterCredentials.#ctor(System.String,System.String,System.String,System.String)">
            <param name="consumerKey">Your application consumer key</param>
            <param name="consumerSecret">Your application consumer secret</param>
            <param name="accessToken">The user token</param>
            <param name="accessTokenSecret">The user token secret</param>
        </member>
        <member name="P:Tweetinvi.Models.TwitterCredentials.ConsumerKey">
            <inheritdoc cref="P:Tweetinvi.Models.ITwitterCredentials.ConsumerKey" />
        </member>
        <member name="P:Tweetinvi.Models.TwitterCredentials.ConsumerSecret">
            <inheritdoc cref="P:Tweetinvi.Models.ITwitterCredentials.ConsumerSecret" />
        </member>
        <member name="P:Tweetinvi.Models.TwitterCredentials.BearerToken">
            <inheritdoc cref="P:Tweetinvi.Models.ITwitterCredentials.BearerToken" />
        </member>
        <member name="P:Tweetinvi.Models.TwitterCredentials.AccessToken">
            <inheritdoc cref="P:Tweetinvi.Models.ITwitterCredentials.AccessToken" />
        </member>
        <member name="P:Tweetinvi.Models.TwitterCredentials.AccessTokenSecret">
            <inheritdoc cref="P:Tweetinvi.Models.ITwitterCredentials.AccessTokenSecret" />
        </member>
        <member name="P:Tweetinvi.Models.Entities.ExtendedEntities.IVideoEntityVariant.Bitrate">
            <summary>
            Video bitrate in bits-per-second
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.ExtendedEntities.IVideoEntityVariant.ContentType">
            <summary>
            MIME type of the video
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.ExtendedEntities.IVideoEntityVariant.URL">
            <summary>
            Direct URL for the video variant
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.ExtendedEntities.IVideoInformationEntity.AspectRatio">
            <summary>
            Video aspect ratio (width, height)
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.ExtendedEntities.IVideoInformationEntity.DurationInMilliseconds">
            <summary>
            Duration of video in milliseconds
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.ExtendedEntities.IVideoInformationEntity.Variants">
            <summary>
            Video variants for different codecs, bitrates, etc.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IDescriptionEntity.Urls">
            <summary>
            URLs found in a description.
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.Entities.IHashtagEntity">
            <summary>
            A hashtag is a keyword prefixed by # and representing a category of tweet
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IHashtagEntity.Text">
            <summary>
            HashTag name
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IHashtagEntity.Indices">
            <summary>
            The character positions the Hashtag was extracted from
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.Entities.IMediaEntity">
            <summary>
            Media element posted in Twitter
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IMediaEntity.Id">
            <summary>
            Media Id
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IMediaEntity.IdStr">
            <summary>
            Media Id as a string
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IMediaEntity.MediaURL">
            <summary>
            Url of the media
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IMediaEntity.MediaURLHttps">
            <summary>
            Secured Url of the media
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IMediaEntity.URL">
            <summary>
            URL information related with the entity
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IMediaEntity.DisplayURL">
            <summary>
            URL displayed as it could be displayed as short url
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IMediaEntity.ExpandedURL">
            <summary>
            The expanded URL is the entire URL as opposed to shortened url (bitly...)
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IMediaEntity.MediaType">
            <summary>
            Type of Media
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IMediaEntity.Indices">
            <summary>
            Indicated the location of the entity, for example an URL entity can be located at the begining of the tweet
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IMediaEntity.Sizes">
            <summary>
            Dimensions related with the different possible views of
            a same Media element
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IMediaEntity.VideoDetails">
            <summary>
            Video metadata
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.Entities.IMediaEntitySize">
            <summary>
            Information related with a twitter media element size
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IMediaEntitySize.Width">
            <summary>
            Media Width
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IMediaEntitySize.Height">
            <summary>
            Media Height
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IMediaEntitySize.Resize">
            <summary>
            How does the media has been resized
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IMessageEntities.Medias">
            <summary>
            Collection of medias associated with a Message.
            Note that this isn't considered an entity by Twitter on a DM and is instead an attachment.
            It is included in Message.Entities for convenience.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IObjectEntities.Urls">
            <summary>
            Collection of urls associated with a Tweet
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IObjectEntities.UserMentions">
            <summary>
            Collection of tweets mentioning this Tweet
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IObjectEntities.Hashtags">
            <summary>
            Collection of hashtags associated with a Tweet
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IObjectEntities.Symbols">
            <summary>
            Collection of symbols associated with a Tweet
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IObjectEntities.Medias">
            <summary>
            Collection of medias associated with a Tweet
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.Entities.ISymbolEntity">
            <summary>
            https://dev.twitter.com/overview/api/entities-in-twitter-objects#symbols
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.ISymbolEntity.Text">
            <summary>
            Text containing the symbol
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.ISymbolEntity.Indices">
            <summary>
            The symbol text start and end position
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.Entities.ITweetEntities">
            <summary>
            Entities are special elements that can be given to an ITweet
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.Entities.IUrlEntity">
            <summary>
            Information related with an URL in twitter
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IUrlEntity.URL">
            <summary>
            Real url
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IUrlEntity.DisplayedURL">
            <summary>
            Message displayed instead of the url
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IUrlEntity.ExpandedURL">
            <summary>
            The fully resolved URL
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IUrlEntity.Indices">
            <summary>
            The character positions the url was extracted from
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IUserEntities.Website">
            <summary>
            Website metadata
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IUserEntities.Description">
            <summary>
            User description
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.Entities.IUserMentionEntity">
            <summary>
            Basic information related with a User and provided
            in twitter objects like Tweets
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IUserMentionEntity.Id">
            <summary>
            User Id
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IUserMentionEntity.IdStr">
            <summary>
            User Id as a string
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IUserMentionEntity.ScreenName">
            <summary>
            User ScreenName
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IUserMentionEntity.Name">
            <summary>
            User displayed name
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IUserMentionEntity.Indices">
            <summary>
            An array of integers indicating the offsets within 
            the TwitterObject where the hashtag begins and ends.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.Entities.IWebsiteEntity.Urls">
            <summary>
            Website urls
            </summary>
        </member>
        <member name="F:Tweetinvi.Models.AllowDirectMessagesFrom.Following">
            <summary>
            User can receive messages from people he follows
            </summary>
        </member>
        <member name="F:Tweetinvi.Models.AllowDirectMessagesFrom.All">
            <summary>
            User can receive messages from anyone
            </summary>
        </member>
        <member name="F:Tweetinvi.Models.AttachmentType.UnrecognisedValue">
            <summary>
            Default value used when the string from Twitter is not a value in the Enum
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.DisplayLanguages">
            <summary>
            Current set of languages that can be used for Twitter UI.
            They can be used in the UpdateAccountSettings action.
            </summary>
        </member>
        <member name="F:Tweetinvi.Models.EventType.UnrecognisedValue">
            <summary>
            Default value used when the string from Twitter is not a value in the Enum
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.HttpMethod">
            <summary>
            Enumeration of possible HTTP request method
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.ImageSize">
            <summary>
            Enumeration of possible Image size that are provided by Twitter
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.Language">
            <summary>
            Languages available on Twitter. Some codes returned by Twitter are not documented and will return Undefined.
            If a language code is not supported but you know which language it represents, please to open an issue.
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.LanguageFilter">
            <summary>
            Languages available as filters for Search and Streams.
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.MediaCategory">
            <summary>
            List of known media categories. This list might not be complete.
            Use the string mediaCategory parameter if you need to use another one.
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.MediaType">
            <summary>
            Type of media that you want to upload
            </summary>
        </member>
        <member name="F:Tweetinvi.Models.MediaType.Media">
            <summary>
            Default type for any binary
            </summary>
        </member>
        <member name="F:Tweetinvi.Models.MediaType.VideoMp4">
            <summary>
            Video binary
            </summary>
        </member>
        <member name="F:Tweetinvi.Models.PrivacyMode.Private">
            <summary>
            The content/user is available to a restricted number of users
            </summary>
        </member>
        <member name="F:Tweetinvi.Models.PrivacyMode.Public">
            <summary>
            The content/user is available publicly
            </summary>
        </member>
        <member name="F:Tweetinvi.Models.ProcessingState.Pending">
            <summary>
            Processing is pending
            </summary>
        </member>
        <member name="F:Tweetinvi.Models.ProcessingState.InProgress">
            <summary>
            Processing is in progress
            </summary>
        </member>
        <member name="F:Tweetinvi.Models.ProcessingState.Succeeded">
            <summary>
            Processing has completed successfully
            </summary>
        </member>
        <member name="F:Tweetinvi.Models.ProcessingState.Failed">
            <summary>
            Processing has failed to complete
            </summary>
        </member>
        <member name="F:Tweetinvi.Models.QuickReplyType.UnrecognisedValue">
            <summary>
            Default value used when the string from Twitter is not a value in the Enum
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.TimeZoneFromTwitter">
            <summary>
            As described on http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html
            </summary>
        </member>
        <member name="F:Tweetinvi.Models.CustomHeaderWill.OverrideGeneratedHeaders">
            <summary>
            <para>If a header with the same name was generated by Tweetinvi, its value will be overriden by the custom header value</para>
            <para>If no header with the custom header name was generated by Tweetinvi, the header will be created</para>
            </summary>
        </member>
        <member name="F:Tweetinvi.Models.CustomHeaderWill.BeAddedToGeneratedHeaders">
            <summary>
            <para>If a header with the same name was generated by Tweetinvi, the value will be added to the list of the header values</para>
            <para>If no header with the custom header name was generated by Tweetinvi, the header will be created</para>
            </summary>
        </member>
        <member name="F:Tweetinvi.Models.CustomHeaderWill.RemoveGeneratedHeaders">
            <summary>
            Removes any header generated by Tweetinvi
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.DTO.ICreateMessageDTO">
            <summary>
            DTO for both the request and response when creating a message
            https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/api-reference/new-event
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.DTO.IMessageEventWithAppDTO">
            <summary>
            DTO for encapsulating an MessageEvent and an App together for storage.
            Not used for transfer to or from Twitter.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.DTO.ITweetDTO.ReplyCount">
            <summary>
            This property is only available with the Premium and Enterprise tier products.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.DTO.ITweetDTO.QuoteCount">
            <summary>
            This property is only available with the Premium and Enterprise tier products.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAccountSettings.AccountSettingsDTO">
            <summary>
            Account settings backend properties.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAccountSettings.ScreenName">
            <summary>
            User screen name (used for authentication)
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAccountSettings.PrivacyMode">
            <summary>
            Privacy mode used on the account.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAccountSettings.Language">
            <summary>
            Languages used by the user.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAccountSettings.AlwaysUseHttps">
            <summary>
            Enforce https mode.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAccountSettings.DiscoverableByEmail">
            <summary>
            Can this user be found by email address.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAccountSettings.DiscoverableByMobilePhone">
            <summary>
            Can this user be found by phone number.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAccountSettings.GeoEnabled">
            <summary>
            Can the tweets published by the user be geo tagged.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAccountSettings.UseCookiePersonalization">
            <summary>
            The feature to tailor Twitter based on your recent website visits.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAccountSettings.AllowDirectMessagesFrom">
            <summary>
            Specify who can send you private messages.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAccountSettings.AllowGroupDirectMessagesFrom">
            <summary>
            Specify which groups can send you private messages.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAccountSettings.AllowContributorRequest">
            <summary>
            Specify who can ask you to be a contributor.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAccountSettings.DisplaySensitiveMedia">
            <summary>
            Prevent tweets medias marked as sensitive to be displayed.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAccountSettings.SmartMute">
            <summary>
            [NOT DOCUMENTED]
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAccountSettings.TimeZone">
            <summary>
            Primary timezone of the account.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAccountSettings.SleepTimeEnabled">
            <summary>
            Specify if you want the notifications to be disabled during the sleeping hours.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAccountSettings.StartSleepHour">
            <summary>
            Specify the hour after which you do not want to receive any notification.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAccountSettings.EndSleepHour">
            <summary>
            Specify the time after which you do want to receive notifications.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAccountSettings.TranslatorType">
            <summary>
            Undocumented
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAccountSettings.TrendLocations">
            <summary>
            Trending locations of the user
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IApp.Id">
            <summary>
            Application id
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IApp.Name">
            <summary>
            Application name
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IApp.Url">
            <summary>
            Application url
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.IAuthenticatedUser">
            <summary>
            User associated with a Token, this "privileged" user
            has access private information like messages, timeline...
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAuthenticatedUser.Email">
            <summary>
            Authenticated user email. This value will be null if the application has not been verified and authorized by Twitter.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IAuthenticatedUser.Credentials">
            <summary>
            Credentials used to authenticate this user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.PublishTweetAsync(System.String)">
            <summary>
            Send a Tweet
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.PublishTweetAsync(Tweetinvi.Parameters.IPublishTweetParameters)">
            <summary>
            Send a Tweet
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.GetLatestMessagesAsync">
            <summary>
            Get list of recent messages
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.PublishMessageAsync(Tweetinvi.Parameters.IPublishMessageParameters)">
            <summary>
            Publish a message.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.GetHomeTimelineAsync">
            <inheritdoc cref="M:Tweetinvi.Client.ITimelinesClient.GetHomeTimelineAsync"/>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.GetMentionsTimelineAsync">
            <inheritdoc cref="M:Tweetinvi.Client.ITimelinesClient.GetHomeTimelineAsync"/>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.UpdateRelationshipAsync(Tweetinvi.Parameters.IUpdateRelationshipParameters)">
            <summary>
            Modify the friendship between the authenticated user (source) and another user (target).
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.GetUserIdsRequestingFriendshipAsync">
            <summary>
            Get the user ids who requested to follow you.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.GetUsersRequestingFriendshipAsync">
            <summary>
            Get the users who requested to follow you.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.GetUserIdsYouRequestedToFollowAsync">
            <summary>
            Get the user ids you've requested to follow.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.GetUsersYouRequestedToFollowAsync">
            <summary>
            Get the users you've requested to follow.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.FollowUserAsync(Tweetinvi.Models.IUserIdentifier)">
            <summary>
            Follow a specific user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.FollowUserAsync(System.Int64)">
            <summary>
            Follow a specific user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.FollowUserAsync(System.String)">
            <summary>
            Follow a specific user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.UnfollowUserAsync(Tweetinvi.Models.IUserIdentifier)">
            <summary>
            Unfollow a specific user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.UnfollowUserAsync(System.Int64)">
            <summary>
            Unfollow a specific user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.UnfollowUserAsync(System.String)">
            <summary>
            Unfollow a specific user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.ListSavedSearchesAsync">
            <summary>
            Get the authenticated user saved searches.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.BlockUserAsync(Tweetinvi.Models.IUserIdentifier)">
            <summary>
            Block a specific user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.BlockUserAsync(System.Int64)">
            <summary>
            Block a specific user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.BlockUserAsync(System.String)">
            <summary>
            Block a specific user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.UnblockUserAsync(Tweetinvi.Models.IUserIdentifier)">
            <summary>
            Unblock a specific user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.UnblockUserAsync(System.Int64)">
            <summary>
            Unblock a specific user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.UnblockUserAsync(System.String)">
            <summary>
            Unblock a specific user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.GetBlockedUserIdsAsync">
            <summary>
            Get the ids of the user you blocked.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.GetBlockedUsersAsync">
            <summary>
            Retrieve the users blocked by the current user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.ReportUserForSpamAsync(Tweetinvi.Models.IUserIdentifier)">
            <summary>
            Report a specific user for being a spammer.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.ReportUserForSpamAsync(System.Int64)">
            <summary>
            Report a specific user for being a spammer.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.ReportUserForSpamAsync(System.String)">
            <summary>
            Report a specific user for being a spammer.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.GetMutedUserIdsAsync">
            <summary>
            Get a list of the users you've muted.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.GetMutedUsersAsync">
            <summary>
            Get a list of the users you've muted.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.MuteUserAsync(Tweetinvi.Models.IUserIdentifier)">
            <summary>
            Mute a specific user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.MuteUserAsync(System.Int64)">
            <summary>
            Mute a specific user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.MuteUserAsync(System.String)">
            <summary>
            Mute a specific user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.UnmuteUserAsync(Tweetinvi.Models.IUserIdentifier)">
            <summary>
            Unmute a specific user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.UnmuteUserAsync(System.Int64)">
            <summary>
            Unmute a specific user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.UnmuteUserAsync(System.String)">
            <summary>
            Unmute a specific user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.SubscribeToListAsync(Tweetinvi.Models.ITwitterListIdentifier)">
            <summary>
            Subscribe the authenticated user to a list.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.SubscribeToListAsync(System.Int64)">
            <summary>
            Subscribe the authenticated user to a list.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.UnsubscribeFromListAsync(Tweetinvi.Models.ITwitterListIdentifier)">
            <summary>
            Unsubscribe the authenticated user to a list.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.UnsubscribeFromListAsync(System.Int64)">
            <summary>
            Unsubscribe the authenticated user to a list.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IAuthenticatedUser.UpdateAccountSettingsAsync(Tweetinvi.Parameters.IUpdateAccountSettingsParameters)">
            <summary>
            Modify the authenticated account settings.
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.ICoordinates">
            <summary>
            Coordinates of a geographical location.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ICoordinates.Longitude">
            <summary>
            Longitude of the coordinate (X).
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ICoordinates.Latitude">
            <summary>
            Lattitude of the coordinate (Y).
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.IGeo">
            <summary>
            Geographic information of a location
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IGeo.Type">
            <summary>
            Type of geographic location.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IGeo.Coordinates">
            <summary>
            Collection of coordinates forming a polygone representing a location.
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.IGeoCode">
            <summary>
            GeoCode represent an area around a specific center coordinate.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IGeoCode.Coordinates">
            <summary>
            Center of the area.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IGeoCode.Radius">
            <summary>
            Distance between the center and the end of the area.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IGeoCode.DistanceMeasure">
            <summary>
            Type of measure used for the Radius.
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.ILocation">
            <summary>
            A rectangle box area defined by two coordinates.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ILocation.Coordinate1">
            <summary>
            First coordinate of the box. For simplicity use (top, left).
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ILocation.Coordinate2">
            <summary>
            Second coordinate of the box. For simplicity use (bottom, right).
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.IMention">
            <summary>
            Twitter mention
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IMention.Annotations">
            <summary>
            Mention annotation
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.IMessage">
            <summary>
            Message that can be sent privately between Twitter users privately.
            https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/api-reference/new-event
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IMessage.Client">
            <summary>
            Client used by the instance to perform any request to Twitter
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IMessage.MessageEventDTO">
            <summary>
            Underlying DTO representing this message (as an event).
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IMessage.App">
            <summary>
            The App that was used to send this message.
            If this message is a response to creating it, the app will be null and you can set it here yourself if required.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IMessage.Id">
            <summary>
            Id of the Message.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IMessage.Text">
            <summary>
            Text contained in the message.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IMessage.CreatedAt">
            <summary>
            Creation date of the message.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IMessage.SenderId">
            <summary>
            Id of the user who sent the message.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IMessage.RecipientId">
            <summary>
            ID of the user who received the message.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IMessage.Entities">
            <summary>
            Entities of the message.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IMessage.InitiatedViaTweetId">
            <summary>
            The ID of the Tweet with Direct Message Prompt the conversation was initiated from if one was used.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IMessage.InitiatedViaWelcomeMessageId">
            <summary>
            The ID of the Welcome Message immediately preceding the conversation if one was used.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IMessage.QuickReplyOptions">
            <summary>
            The options available for the response
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IMessage.QuickReplyResponse">
            <summary>
            The Quick reply response that the user selected (if any), triggering this message.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IMessage.AttachedMedia">
            <summary>
            Media that was attached to the message.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IMessage.DestroyAsync">
            <summary>
            Destroy the message.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IOEmbedTweet.AuthorName">
            <summary>
            Author of the tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IOEmbedTweet.AuthorURL">
            <summary>
            Hyperlink to the author public page.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IOEmbedTweet.HTML">
            <summary>
            HTML generated to display the tweet on your website.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IOEmbedTweet.URL">
            <summary>
            Hyperlink to the tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IOEmbedTweet.Width">
            <summary>
            Width of the div containing the embedded tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IOEmbedTweet.Height">
            <summary>
            Width of the div containing the embedded tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IQuickReplyOption.Label">
            <summary>
            The text label displayed on the button face. Label text is returned as the user's message response.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IQuickReplyOption.Description">
            <summary>
            Description text displayed under label text.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IQuickReplyOption.Metadata">
            <summary>
            Metadata that will be sent back in the webhook request.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipDetails.SourceId">
            <summary>
            The source user of the relationship
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipDetails.SourceIdStr">
            <summary>
            The source user of the relationship
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipDetails.SourceScreenName">
            <summary>
            The source user of the relationship
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipDetails.TargetId">
            <summary>
            The target user of the relationship
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipDetails.TargetIdStr">
            <summary>
            The target user of the relationship
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipDetails.TargetScreenName">
            <summary>
            The target user of the relationship
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipDetails.Following">
            <summary>
            Informs if the source user following the target user.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipDetails.FollowedBy">
            <summary>
            Informs if the source user is followed by the target user.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipDetails.FollowingRequestReceived">
            <summary>
            Informs if the private source user has received a request to be followed by the target user.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipDetails.FollowingRequested">
            <summary>
            Informs if the source user requested to follow the private target user.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipDetails.NotificationsEnabled">
            <summary>
            Informs if the source user has requested to be notified when the target user publishes tweets. 
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipDetails.CanSendDirectMessage">
            <summary>
            Informs if the source user can send private messages to the target.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipDetails.Blocking">
            <summary>
            Informs if the source has blocked the target.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipDetails.Muting">
            <summary>
            Informs if the source has muted the target.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipDetails.WantRetweets">
            <summary>
            Informs if the source wants to receive a notification for retweets published by the target.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipDetails.AllReplies">
            <summary>
            Informs if the source wants to receive a notification for each reply published by the target.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipDetails.MarkedSpam">
            <summary>
            Informs if the source has marked the user as being a spammer.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipState.TargetId">
            <summary>
            User id of the relationship target.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipState.TargetIdStr">
            <summary>
            User id of the relationship target.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipState.TargetName">
            <summary>
            User display name of the relationship target.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipState.TargetScreenName">
            <summary>
            User screen name of the relationship target.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipState.Following">
            <summary>
            Is the source target following the target.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipState.FollowedBy">
            <summary>
            Is the source target followed by the target.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipState.FollowingRequested">
            <summary>
            Has a following request been sent to the target.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipState.FollowingRequestReceived">
            <summary>
            Has a following request been received by the source.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IRelationshipState.RelationshipStateDTO">
            <summary>
            DTO
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.ISavedSearch">
            <summary>
            Twitter saved search.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ISavedSearch.SavedSearchDTO">
            <summary>
            Saved search backend data.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ISavedSearch.Id">
            <summary>
            Saved search id.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ISavedSearch.IdStr">
            <summary>
            Id as string.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ISavedSearch.Name">
            <summary>
            Given name.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ISavedSearch.Query">
            <summary>
            Query performed when executing the search.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ISavedSearch.CreatedAt">
            <summary>
            Creation date.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ISearchResults.Tweets">
            <summary>
            All the tweets returned by the Twitter Request
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ISearchResults.SearchMetadata">
            <summary>
            Search Metadata Information
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.ISuggestedUserList">
            <summary>
            Set of methods to retrieve suggested users
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ISuggestedUserList.Name">
            <summary>
            List name
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ISuggestedUserList.Slug">
            <summary>
            Name of the list or category
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ISuggestedUserList.Size">
            <summary>
            Size of the list
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ISuggestedUserList.Members">
            <summary>
            Suggested users
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITimeZone.Name">
            <summary>
            Timezone name.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITimeZone.TzinfoName">
            <summary>
            Linux TZINFO name.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITimeZone.UtcOffset">
            <summary>
            Difference in time between UTC time and the Timezone time.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITrend.Name">
            <summary>
            Name/Title of the trend.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITrend.URL">
            <summary>
            Search URL returning the tweets related with this trend.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITrend.Query">
            <summary>
            Only the query part of the search URL.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITrend.TweetVolume">
            <summary>
            Number of tweet matching the trend that have been posted for the last 24 hours.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITrendLocation.WoeId">
            <summary>
            Trend location : Where On Earth ID : https://developer.yahoo.com/geo/geoplanet/guide/concepts.html
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITrendLocation.Name">
            <summary>
            Trend name.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITrendLocation.Country">
            <summary>
            Country where this trend is active.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITrendLocation.CountryCode">
            <summary>
            Country code where this trend is active.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITrendLocation.Url">
            <summary>
            Search url containing tweets with the trend.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITrendLocation.ParentId">
            <summary>
            WOEID of the parent location.
            E.G NewYork parentId would be United States
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITrendLocation.PlaceType">
            <summary>
            Type/Size of the referenced place.
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.ITweet">
            <summary>
            ... Well a Tweet :)
            https://dev.twitter.com/docs/platform-objects/tweets
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.Client">
            <summary>
            Client used by the instance to perform any request to Twitter
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.CreatedAt">
            <summary>
            Creation date of the Tweet
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.Text">
            <summary>
            Formatted text of the tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.Prefix">
            <summary>
            Prefix of an extended tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.Suffix">
            <summary>
            Suffix of an extended tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.FullText">
            <summary>
            Full text of an extended tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.DisplayTextRange">
            <summary>
            Content display text range for FullText.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.SafeDisplayTextRange">
            <summary>
            The range of text to be displayed for any Tweet.
            If this is an Extended Tweet, this will be the range supplied by Twitter.
            If this is an old-style 140 character Tweet, the range will be 0 - Length.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.ExtendedTweet">
            <summary>
            Extended Tweet details.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.Coordinates">
            <summary>
            Coordinates of the location from where the tweet has been sent
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.Source">
            <summary>
            source field
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.Truncated">
            <summary>
            Whether the tweet text was truncated because it was longer than 140 characters.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.ReplyCount">
            <summary>
            Number of times this Tweet has been replied to
            This property is only available with the Premium and Enterprise tier products.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.InReplyToStatusId">
            <summary>
            In_reply_to_status_id
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.InReplyToStatusIdStr">
            <summary>
            In_reply_to_status_id_str
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.InReplyToUserId">
            <summary>
            In_reply_to_user_id
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.InReplyToUserIdStr">
            <summary>
            In_reply_to_user_id_str
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.InReplyToScreenName">
            <summary>
            In_reply_to_screen_name
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.CreatedBy">
            <summary>
            User who created the Tweet
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.CurrentUserRetweetIdentifier">
            <summary>
            Details the Tweet ID of the user's own retweet (if existent) of this Tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.ContributorsIds">
            <summary>
            Ids of the users who contributed in the Tweet
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.Contributors">
            <summary>
            Users who contributed to the authorship of the tweet, on behalf of the official tweet author.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.RetweetCount">
            <summary>
            Number of retweets related with this tweet
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.Entities">
            <summary>
            Extended entities in the tweet. Used by twitter for multiple photos
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.Favorited">
            <summary>
            Is the tweet Favorited
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.FavoriteCount">
            <summary>
            Number of time the tweet has been Favorited
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.Retweeted">
            <summary>
            Has the tweet been retweeted
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.PossiblySensitive">
            <summary>
            Is the tweet potentialy sensitive
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.Language">
            <summary>
            Main language used in the tweet
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.Place">
            <summary>
            Geographic details concerning the location where the tweet has been published
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.Scopes">
            <summary>
            Informed whether a tweet is displayed or not in a specific type of scope. This property is most of the time null.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.FilterLevel">
            <summary>
            Streaming tweets requires a filter level. A tweet will be streamed if its filter level is higher than the one of the stream
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.WithheldCopyright">
            <summary>
            Informs that a tweet has been withheld for a copyright reason
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.WithheldInCountries">
            <summary>
            Countries in which the tweet will be withheld
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.WithheldScope">
            <summary>
            When present, indicates whether the content being withheld is the "status" or a "user."
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.TweetDTO">
            <summary>
            Property used to store the data received from Twitter
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.Hashtags">
            <summary>
            Collection of hashtags associated with a Tweet
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.Urls">
            <summary>
            Collection of urls associated with a tweet
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.Media">
            <summary>
            Collection of medias associated with a tweet
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.UserMentions">
            <summary>
            Collection of tweets mentioning this tweet
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.IsRetweet">
            <summary>
            Indicates whether the current tweet is a retweet of another tweet
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.RetweetedTweet">
            <summary>
            If the tweet is a retweet this field provides
            the tweet that it retweeted
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.QuoteCount">
            <summary>
            Indicates approximately how many times this Tweet has been quoted by Twitter users.
            This property is only available with the Premium and Enterprise tier products.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.QuotedStatusId">
            <summary>
            Tweet Id that was retweeted with a quote
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.QuotedStatusIdStr">
            <summary>
            Tweet Id that was retweeted with a quote
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.QuotedTweet">
            <summary>
            Tweet that was retweeted with a quote
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweet.Url">
            <summary>
            URL of the tweet on twitter.com
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITweet.FavoriteAsync">
            <summary>
            Favorites the tweet
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITweet.UnfavoriteAsync">
            <summary>
            Remove the tweet from favorites
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITweet.PublishRetweetAsync">
            <summary>
            Retweet the current tweet from the authenticated user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITweet.GetRetweetsAsync">
            <summary>
            Get the retweets of the current tweet
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITweet.DestroyRetweetAsync">
            <summary>
            Remove your retweet.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITweet.DestroyAsync">
            <summary>
            Delete a tweet from Twitter
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITweet.GenerateOEmbedTweetAsync">
            <summary>
            Generate an OEmbedTweet.
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.ITweetIdentifier">
            <summary>
            Identifier allowing to identify a unique tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITweetWithSearchMetadata.SearchMetadata">
            <summary>
            Property containing search metadata.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterIdentifier.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterIdentifier.IdStr">
            <summary>
            Id as a string
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterList.IdStr">
            <summary>
            List Id as a string provided by Twitter.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterList.Name">
            <summary>
            List Name
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterList.FullName">
            <summary>
            List Fullname
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterList.Owner">
            <summary>
            User who owns the list.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterList.CreatedAt">
            <summary>
            Date when the list was created.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterList.Description">
            <summary>
            Description of the list.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterList.Following">
            <summary>
            Is the authenticated user following this list.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterList.PrivacyMode">
            <summary>
            Whether this list is private or public.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterList.MemberCount">
            <summary>
            Number of members in this list.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterList.SubscriberCount">
            <summary>
            Number of users who subscribed to this list.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterList.Client">
            <summary>
            Client used by the instance to perform any request to Twitter
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.GetTweetsAsync">
            <summary>
            Get the tweets from this list.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.GetMembersAsync">
            <summary>
            Get the members of this list.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.AddMemberAsync(System.Int64)">
            <summary>
            Add a member to this list. You must be the owner of the list to do so.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.AddMemberAsync(System.String)">
            <summary>
            Add a member to this list. You must be the owner of the list to do so.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.AddMemberAsync(Tweetinvi.Models.IUserIdentifier)">
            <summary>
            Add a member to this list. You must be the owner of the list to do so.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.AddMembersAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Add a list of members to this list. You must be the owner of the list to do so.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.AddMembersAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add a list of members to this list. You must be the owner of the list to do so.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.AddMembersAsync(System.Collections.Generic.IEnumerable{Tweetinvi.Models.IUserIdentifier})">
            <summary>
            Add a list of members to this list. You must be the owner of the list to do so.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.RemoveMemberAsync(System.Int64)">
            <summary>
            Remove a member from this list. You must be the owner of the list to do so.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.RemoveMemberAsync(System.String)">
            <summary>
            Remove a member from this list. You must be the owner of the list to do so.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.RemoveMemberAsync(Tweetinvi.Models.IUserIdentifier)">
            <summary>
            Remove a member from this list. You must be the owner of the list to do so.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.RemoveMembersAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Remove a list of members from this list. You must be the owner of the list to do so.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.RemoveMembersAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove a list of members from this list. You must be the owner of the list to do so.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.RemoveMembersAsync(System.Collections.Generic.IEnumerable{Tweetinvi.Models.IUserIdentifier})">
            <summary>
            Remove a list of members from this list. You must be the owner of the list to do so.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.CheckUserMembershipAsync(System.Int64)">
            <summary>
            Test if a user is a member of the list.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.CheckUserMembershipAsync(System.String)">
            <summary>
            Test if a user is a member of the list.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.CheckUserMembershipAsync(Tweetinvi.Models.IUserIdentifier)">
            <summary>
            Test if a user is a member of the list.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.GetSubscribersAsync">
            <summary>
            Get the subscribers of the list.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.SubscribeAsync">
            <summary>
            Subscribe the authenticated user to the list.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.UnsubscribeAsync">
            <summary>
            Unsubscribe the authenticated user from the list.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.CheckUserSubscriptionAsync(System.Int64)">
            <summary>
            Check whether a user has subscribed to the list.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.CheckUserSubscriptionAsync(System.String)">
            <summary>
            Check whether a user has subscribed to the list.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.CheckUserSubscriptionAsync(Tweetinvi.Models.IUserIdentifier)">
            <summary>
            Check whether a user has subscribed to the list.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.UpdateAsync(Tweetinvi.Parameters.IListMetadataParameters)">
            <summary>
            Update the list.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.ITwitterList.DestroyAsync">
            <summary>
            Destroy the list.
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.ITwitterListIdentifier">
            <summary>
            Identifier allowing to identify a unique list on Twitter.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterListIdentifier.Id">
            <summary>
            Id of the list.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterListIdentifier.Slug">
            <summary>
            The short name of list or a category.
            An owner id needs to be provided in addition to the Slug for a list identifier to be valid.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterListIdentifier.OwnerId">
            <summary>
            Id of the user owning the list.
            A slug needs to be provided in addition to the OwnerId for a list identifier to be valid.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterListIdentifier.OwnerScreenName">
            <summary>
            Screen name of the user owning the list.
            A slug needs to be provided in addition to the OwnerScreenName for a list identifier to be valid.
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.ITwitterQuery">
            <summary>
            All the information necessary for an http request to be executed.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterQuery.ProxyConfig">
            <summary>
            Proxy used to perform the query
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterQuery.Timeout">
            <summary>
            Duration after which the query is considered as having failed.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterQuery.TwitterCredentials">
            <summary>
            Credentials with which the query will be executed.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterQuery.QueryParameters">
            <summary>
            OAuth request parameters.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterQuery.QueryRateLimit">
            <summary>
            RateLimit for the specific query. These can be null if the query url,
            could not be matched with any documented RateLimit field.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterQuery.CredentialsRateLimits">
            <summary>
            All the endpoint RateLimits for the query credentials.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterQuery.DateWhenCredentialsWillHaveTheRequiredRateLimits">
            <summary>
            Date when the credentials will have the required rate limits to execute the query.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterQuery.TimeToWaitBeforeExecutingTheQuery">
            <summary>
            Time to wait before executing the query to ensure that we have not reached the RateLimits.
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.ITwitterRequestParameters">
            <summary>
            Contains the fields that are required to build an HttpRequest to run the query
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterRequestParameters.Url">
            <summary>
            Query that will be executed.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterRequestParameters.HttpMethod">
            <summary>
            HTTP Method used to execute the query.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterRequestParameters.HttpContent">
            <summary>
            Content of the HTTP request.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterRequestParameters.IsHttpContentPartOfQueryParams">
            <summary>
            Whether the HttpContent should be considered as part of the query url
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterRequestParameters.AcceptHeaders">
            <summary>
            Content Types accepted by the HttpRequest
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterRequestParameters.AuthorizationHeader">
            <summary>
            Authorization header that Twitter uses to validate a twitter HttpRequest
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.ITwitterRequestParameters.CustomHeaders">
            <summary>
            Additional headers to add to the HttpRequest
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.IUser">
            <summary>
            Contract defining what a user on twitter can do.
            For more information visit : https://dev.twitter.com/overview/api/users
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.Client">
            <summary>
            Client used by the instance to perform any request to Twitter
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.UserDTO">
            <summary>
            Property used to store the twitter properties
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.Name">
            <summary>
            The name of the user, as they’ve defined it.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.Description">
            <summary>
            Text describing the user account.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.Status">
            <summary>
            Latest tweet published by the user.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.CreatedAt">
            <summary>
            Date when the user account was created on Twitter.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.Location">
            <summary>
            The user-defined location for this account’s profile.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.GeoEnabled">
            <summary>
            When true, indicates that the user has enabled the possibility of geo tagging their Tweets.
            This field must be true for the current user to attach geographic data.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.Url">
            <summary>
            A URL provided by the user in association with their profile.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.StatusesCount">
            <summary>
            Number of tweets (including retweets) the user published.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.FollowersCount">
            <summary>
            Number of followers this user has
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.FriendsCount">
            <summary>
            The number of users this account is following (AKA their “followings”).
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.Following">
            <summary>
            When true, indicates that the authenticated user is following this user.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.Protected">
            <summary>
            When true, indicates that this user has chosen to protect their Tweets.
            For more information visit : https://support.twitter.com/articles/14016.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.Verified">
            <summary>
            When true, indicates that the user has a verified account.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.Entities">
            <summary>
            Entities which have been parsed out of the url or description fields defined by the user.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.Notifications">
            <summary>
            Indicates whether the authenticated user has chosen to receive this user’s tweets by SMS
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.ProfileImageUrl">
            <summary>
            URL pointing to the user’s avatar image.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.ProfileImageUrlFullSize">
            <summary>
            URL pointing to the user’s avatar image.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.ProfileImageUrl400x400">
            <summary>
            URL of the user 400x400 profile image
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.FollowRequestSent">
            <summary>
            When true, indicates that the authenticating user has issued a follow request
            to this protected user account.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.DefaultProfile">
            <summary>
            Indicates whether the user is using Twitter default theme profile
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.DefaultProfileImage">
            <summary>
            Indicates whether the user has uploaded his own profile image
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.FavoritesCount">
            <summary>
            Number of tweets this user has Favorited in the account’s lifetime.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.ListedCount">
            <summary>
            The number of public lists that this user is a member of.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.ProfileSidebarFillColor">
            <summary>
            The hexadecimal color the user has chosen to display sidebar backgrounds with in their Twitter UI.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.ProfileSidebarBorderColor">
            <summary>
            The hexadecimal color the user has chosen to display sidebar borders with in their Twitter UI.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.ProfileBackgroundTile">
            <summary>
            When true, indicates that the user’s profile_background_image_url should be tiled when displayed.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.ProfileBackgroundColor">
            <summary>
            The hexadecimal color chosen by the user for their background.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.ProfileBackgroundImageUrl">
            <summary>
            URL pointing to the background image the user has uploaded for their profile.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.ProfileBackgroundImageUrlHttps">
            <summary>
            URL pointing to the background image the user has uploaded for their profile.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.ProfileBannerURL">
            <summary>
            URL pointing to the standard web representation of the user’s uploaded profile banner.
            By adding a final path element of the URL, you can obtain different image sizes
            optimized for specific displays.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.ProfileTextColor">
            <summary>
            The hexadecimal color the user has chosen to display text with in their Twitter UI.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.ProfileLinkColor">
            <summary>
            The hexadecimal color the user has chosen to display links with in their Twitter UI.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.ProfileUseBackgroundImage">
            <summary>
            When true, indicates the user wants their uploaded background image to be used.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.IsTranslator">
            <summary>
            When true, indicates that the user is a participant in Twitter’s translator community.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.ContributorsEnabled">
            <summary>
            Indicates that the account has the contributor mode enabled
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.UtcOffset">
            <summary>
            The offset from GMT/UTC in seconds.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.TimeZone">
            <summary>
             A string describing the Time Zone this user declares themselves within.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.WithheldInCountries">
            <summary>
            If a user is withheld in a country, the information will be listed there
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUser.WithheldScope">
            <summary>
            States whether the user or his tweets are being withheld in a specific country
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IUser.GetFriendIds">
            <summary>
            Get a list of the user's friend ids.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IUser.GetFriends">
            <summary>
            Get a list of the user's friends.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IUser.GetFollowerIds">
            <summary>
            Get a list of the user's follower ids.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IUser.GetRelationshipWithAsync(Tweetinvi.Models.IUserIdentifier)">
            <summary>
            Get the relationship details between the user and another one.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IUser.GetRelationshipWithAsync(System.Int64)">
            <summary>
            Get the relationship between the authenticated user (source) and another user (target).
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IUser.GetRelationshipWithAsync(System.String)">
            <summary>
            Get the relationship between the authenticated user (source) and another user (target).
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IUser.GetUserTimelineAsync">
            <inheritdoc cref="M:Tweetinvi.Client.ITimelinesClient.GetUserTimelineAsync(Tweetinvi.Models.IUserIdentifier)"/>
        </member>
        <member name="M:Tweetinvi.Models.IUser.GetFavoriteTweetsAsync">
            <inheritdoc cref="M:Tweetinvi.Client.ITweetsClient.GetUserFavoriteTweetsAsync(Tweetinvi.Models.IUserIdentifier)"/>
        </member>
        <member name="M:Tweetinvi.Models.IUser.GetOwnedListsAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetListsOwnedByUserAsync(Tweetinvi.Models.IUserIdentifier)"/>
        </member>
        <member name="M:Tweetinvi.Models.IUser.GetListSubscriptionsAsync">
            <inheritdoc cref="M:Tweetinvi.Client.IListsClient.GetUserListSubscriptionsAsync(Tweetinvi.Models.IUserIdentifier)"/>
        </member>
        <member name="M:Tweetinvi.Models.IUser.BlockUserAsync">
            <summary>
            Make the authenticated user block the user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IUser.UnblockUserAsync">
            <summary>
            Make the authenticated user unblock the user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IUser.ReportUserForSpamAsync">
            <summary>
            Report the user for spam.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IUser.GetProfileImageStreamAsync">
            <summary>
            Get a stream to get the profile image of this user.
            </summary>
        </member>
        <member name="M:Tweetinvi.Models.IUser.GetProfileImageStreamAsync(Tweetinvi.Models.ImageSize)">
            <summary>
            Get a stream to get the profile image of this user.
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.IUserIdentifier">
            <summary>
            Object containing information to uniquely identify a user.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IUserIdentifier.ScreenName">
            <summary>
            User screen name
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IWebhook.Id">
            <summary>
            Webhook identifier
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IWebhook.Url">
            <summary>
            Registered url
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IWebhook.Valid">
            <summary>
            Whether the webhook succeeded its last crc challenge
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IWebhook.CreatedAt">
            <summary>
            Registration date
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IWebhook.Uri">
            <summary>
            Registered Uri
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IWebhookEnvironment.Name">
            <summary>
            Name of the environment
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IWebhookEnvironment.Webhooks">
            <summary>
            Webhooks registered in the environment
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IWebhookEnvironmentSubscriptions.EnvironmentName">
            <summary>
            Name of the webhook environment
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IWebhookEnvironmentSubscriptions.ApplicationId">
            <summary>
            Application id associated with the environment
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IWebhookEnvironmentSubscriptions.Subscriptions">
            <summary>
            List of users who subscribed to that environment
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IWebhookSubscription.UserId">
            <summary>
            User identifier of the subscription
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.IWoeIdLocation">
            <summary>
            Where On Earth ID : https://developer.yahoo.com/geo/geoplanet/guide/concepts.html
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IWoeIdLocation.Name">
            <summary>
            Location name
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IWoeIdLocation.WoeId">
            <summary>
            Location WOEID
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.ICredentialsRateLimits">
            <summary>
            Lists the state of all the twitter api endpoints rate limits.
            https://dev.twitter.com/docs/rate-limiting/1.1/limits
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.IEndpointRateLimit">
            <summary>
            Give information regarding the rate limits for a specific
            endpoint of the Twitter API.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IEndpointRateLimit.Remaining">
            <summary>
            Remaining operation authorized with the associated credentials.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IEndpointRateLimit.Reset">
            <summary>
            Reset DateTime in UTC.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IEndpointRateLimit.Limit">
            <summary>
            Maximum number of query execution authorized in a
            rate limit lifecycle (usually 15 minutes).
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IEndpointRateLimit.ResetDateTimeInSeconds">
            <summary>
            Remaining seconds to wait before being able to perform such queries again.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IEndpointRateLimit.ResetDateTimeInMilliseconds">
            <summary>
            Remaining milliseconds to wait before being able to perform such queries again.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.IEndpointRateLimit.ResetDateTime">
            <summary>
            DateTime when the rate limit lifecycle reset.
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.V2.MediaV2">
            <summary>
            A media, video, image, gif...
            <para>Read more here : https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/media </para>
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.MediaV2.DurationMs">
            <summary>
            Available when type is video. Duration in milliseconds of the video.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.MediaV2.Height">
            <summary>
            Height of this content in pixels.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.MediaV2.MediaKey">
            <summary>
            Unique identifier of the expanded media content.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.MediaV2.PreviewImageUrl">
            <summary>
            URL to the static placeholder preview of this content.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.MediaV2.Type">
            <summary>
            Type of content (animated_gif, photo, video).
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.MediaV2.Url">
            <summary>
            Url to access the media
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.MediaV2.Width">
            <summary>
            Width of this content in pixels.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.MediaV2.NonPublicMetrics">
            <summary>
            Non-public engagement metrics for the media content at the time of the request.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.MediaV2.OrganicMetrics">
            <summary>
            Engagement metrics for the media content, tracked in an organic context, at the time of the request.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.MediaV2.PromotedMetrics">
            <summary>
            Engagement metrics for the media content, tracked in a promoted context, at the time of the request.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.MediaV2.PublicMetrics">
            <summary>
            Public engagement metrics for the media content at the time of the request.
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.V2.PlaceV2">
            <summary>
            The place tagged in a Tweet
            <para>Read more here : https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/place </para>
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.PlaceV2.ContainedWithin">
            <summary>
            Returns the identifiers of known places that contain the referenced place.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.PlaceV2.Country">
            <summary>
            The full-length name of the country this place belongs to.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.PlaceV2.CountryCode">
            <summary>
            The ISO Alpha-2 country code this place belongs to.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.PlaceV2.FullName">
            <summary>
            A longer-form detailed place name.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.PlaceV2.PlaceGeo">
            <summary>
            Contains place details in GeoJSON format.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.PlaceV2.Id">
            <summary>
            The unique identifier of the expanded place, if this is a point of interest tagged in the Tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.PlaceV2.Name">
            <summary>
            The short name of this place
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.PlaceV2.PlaceType">
            <summary>
            Specified the particular type of information represented by this place information, such as a city name, or a point of interest.
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.V2.PollV2">
            <summary>
            Poll included in a Tweet
            <para>Read more here : https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/poll </para>
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.PollV2.DurationMinutes">
            <summary>
            Specifies the total duration of this poll.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.PollV2.EndDate">
            <summary>
            Specifies the end date and time for this poll.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.PollV2.Id">
            <summary>
            Unique identifier of the expanded poll.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.PollV2.PollOptions">
            <summary>
            Contains objects describing each choice in the referenced poll.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.PollV2.VotingStatus">
            <summary>
            Indicates if this poll is still active and can receive votes, or if the voting is now closed.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.PollOptionV2.Label">
            <summary>
            Label of a poll option
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.PollOptionV2.Position">
            <summary>
            Position of the option in the poll
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.PollOptionV2.Votes">
            <summary>
            Number of votes for this option
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.CashtagV2.Start">
            <summary>
            Index of the first letter of the cashtag
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.CashtagV2.End">
            <summary>
            Index of the last letter of the cashtag
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.CashtagV2.Tag">
            <summary>
            The text of the Cashtag.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.CoordinatesV2.Type">
            <summary>
            Describes the type of coordinate. The only value supported at present is Point.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.CoordinatesV2.Coordinates">
            <summary>
            A pair of decimal values representing the precise location of the user (latitude, longitude).
            This value be null unless the user explicitly shared their precise location.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.FilteredStreamMatchingRuleV2.Id">
            <summary>
            Id of the rule that resulted in the tweet to be returned by the filtered stream
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.FilteredStreamMatchingRuleV2.Tag">
            <summary>
            Tag of the rule that resulted in the tweet to be returned by the filtered stream
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.FilteredStreamRuleMetadataV2.SentDate">
            <summary>
            Date when the tweet was matched by the filtered stream
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.FilteredStreamRuleV2.Id">
            <summary>
            Unique identifier of this rule.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.FilteredStreamRuleV2.Value">
            <summary>
            The filter rule as submitted when creating the rule.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.FilteredStreamRuleV2.Tag">
            <summary>
            The tag label as defined when creating the rule.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.GeoV2.Coordinates">
            <summary>
            A pair of decimal values representing the precise location of the user (latitude, longitude).
            This value be null unless the user explicitly shared their precise location.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.GeoV2.PlaceId">
            <summary>
            The unique identifier of the place, if this is a point of interest tagged in the Tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.HashtagV2.Start">
            <summary>
            Index of the first letter of the tag
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.HashtagV2.End">
            <summary>
            Index of the last letter of the tag
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.HashtagV2.Tag">
            <summary>
            The text of the Hashtag.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetIncludesV2.Media">
            <summary>
            Medias associated with the tweets, like the images attached.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetIncludesV2.Places">
            <summary>
            Places associated with the tweets
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetIncludesV2.Polls">
            <summary>
            Polls associated with the tweets
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetIncludesV2.Tweets">
            <summary>
            Tweets associated with the tweets, like retweets, replies...
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetIncludesV2.Users">
            <summary>
            Users associated with the tweets, like the owner.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserIncludesV2.Tweets">
            <summary>
            Tweets associated with the user, usually the pinned tweets
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.PlaceGeoV2.Type">
            <summary>
            Type of geometry used
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.PlaceGeoV2.Bbox">
            <summary>
            Bounding box array containing the place coordinates
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.PlaceGeoV2.Properties">
            <summary>
            Special information about this place
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.ReferencedTweetV2.Id">
            <summary>
            The unique identifier of the referenced Tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.ReferencedTweetV2.Type">
            <summary>
            Indicates the type of relationship between this Tweet and the Tweet returned in the response:
            * retweeted (this Tweet is a Retweet),
            * quoted (a Retweet with comment, also known as Quoted Tweet),
            * or replied_to (this Tweet is a reply).
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.SearchTweetsMetadataV2.NewestId">
            <summary>
            Most recent tweet id returned in the search results
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.SearchTweetsMetadataV2.OldestId">
            <summary>
            Oldest tweet id returned in the search results
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.SearchTweetsMetadataV2.ResultCount">
            <summary>
            Number of results returned
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.SearchTweetsMetadataV2.NextToken">
            <summary>
            Token/cursor to access the next search page results
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetAnnotationV2.End">
            <summary>
            The start position (zero-based) of the text used to annotate the Tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetAnnotationV2.NormalizedText">
            <summary>
            The text used to determine the annotation type.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetAnnotationV2.Probability">
            <summary>
            The confidence score for the annotation as it correlates to the Tweet text.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetAnnotationV2.Start">
            <summary>
            The start position (zero-based) of the text used to annotate the Tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetAnnotationV2.Type">
            <summary>
            The description of the type of entity identified when the Tweet text was interpreted.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetAttachmentsV2.MediaKeys">
            <summary>
            List of unique identifiers of media attached to this Tweet.
            These identifiers use the same media key format as those returned by the Media Library.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetAttachmentsV2.PollIds">
            <summary>
            List of unique identifiers of polls present in the Tweets returned.
            These are returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetContextAnnotationDomainV2.Description">
            <summary>
            Long form description of domain classification.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetContextAnnotationDomainV2.Id">
            <summary>
            Contains the numeric value of the domain.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetContextAnnotationDomainV2.Name">
            <summary>
            Domain name based on the Tweet text.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetContextAnnotationEntityV2.Description">
            <summary>
            Additional information regarding referenced entity.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetContextAnnotationEntityV2.Id">
            <summary>
            Unique value which correlates to an explicitly mentioned Person, Place, Product or Organization
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetContextAnnotationEntityV2.Name">
            <summary>
            Name or reference of entity referenced in the Tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetContextAnnotationV2.Domain">
            <summary>
            Contains elements which identify detailed information regarding the domain classification based on Tweet text.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetContextAnnotationV2.Entity">
            <summary>
            Contains elements which identify detailed information regarding the domain classification bases on Tweet text.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetEntitiesV2.Annotations">
            <summary>
            Entities are comprised of people, places, products, and organizations.
            Entities are delivered as part of the entity payload section.
            They are programmatically assigned based on what is explicitly mentioned in the Tweet text.
            <para>Read more: https://developer.twitter.com/en/docs/twitter-api/annotations </para>
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetEntitiesV2.Cashtags">
            <summary>
            Cashtags found in the tweet. A cashtag is a company ticker symbol preceded by the U.S. dollar sign, e.g. $TWTR.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetEntitiesV2.Hashtags">
            <summary>
            Hashtags found in the tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetEntitiesV2.Mentions">
            <summary>
            Mentions found in the tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetEntitiesV2.Urls">
            <summary>
            Urls found in the tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetHideStateV2.Hidden">
            <summary>
            Visibility state of a reply tweets within the conversation in which it was published
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetWithheldInfoV2.Copyright">
            <summary>
            Indicates if the content is being withheld for on the basis of copyright infringement.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UrlV2.DisplayUrl">
            <summary>
            The URL as displayed in the Twitter client.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UrlV2.End">
            <summary>
            The end position (zero-based) of the recognized URL within the Tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UrlV2.ExpandedUrl">
            <summary>
            The fully resolved URL.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UrlV2.Start">
            <summary>
            The start position (zero-based) of the recognized URL within the Tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UrlV2.Url">
            <summary>
            The URL in the format tweeted by the user.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UrlV2.UnwoundUrl">
            <summary>
            The full destination URL.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UrlsV2.Urls">
            <summary>
            Contains details about text recognized as a URL.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserDescriptionEntitiesV2.Cashtags">
            <summary>
            Contains details about text recognized as a Cashtag.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserDescriptionEntitiesV2.Hashtags">
            <summary>
            Contains details about text recognized as a Hashtag.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserDescriptionEntitiesV2.Mentions">
            <summary>
            Contains details about text recognized as a user mention.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserDescriptionEntitiesV2.Urls">
            <summary>
            Contains details about any URLs included in the user's description.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserEntitiesV2.Description">
            <summary>
            Contains details about URLs, Hashtags, Cashtags, or mentions located within a user's description.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserEntitiesV2.Url">
            <summary>
            Contains details about the user's profile website.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserMentionV2.End">
            <summary>
            The end position (zero-based) of the recognized user mention within the Tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserMentionV2.Start">
            <summary>
            The start position (zero-based) of the recognized user mention within the Tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserMentionV2.Username">
            <summary>
            The part of text recognized as a user mention.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.WithheldInfoV2.CountryCodes">
            <summary>
            Provides a list of countries where this content is not available.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.WithheldInfoV2.Scope">
            <summary>
            Indicates whether the content being withheld is a Tweet or a user.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.FilteredStreamRulesV2Response.Rules">
            <summary>
            Filtered stream v2 filtering rules
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.FilteredStreamRulesV2Response.Meta">
            <summary>
            Metadata information about the request
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.FilteredStreamRulesV2Response.Errors">
            <summary>
            All errors that prevented Twitter to send some data,
            but which did not prevent the request to be resolved.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.FilteredStreamTweetV2Response.MatchingRules">
            <summary>
            Rules that resulted in a tweet to be matched
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.SearchTweetsV2Response.SearchMetadata">
            <summary>
            Search response metadata
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetHideV2Response.TweetHideState">
            <summary>
            Tweet hidden state in a conversation
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetsV2Response.Tweets">
            <summary>
            Tweets returned by the request
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetsV2Response.Includes">
            <summary>
            Contains all the requested expansions
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetsV2Response.Errors">
            <summary>
            All errors that prevented Twitter to send some data,
            but which did not prevent the request to be resolved.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetV2Response.Tweet">
            <summary>
            Tweet returned by the request
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetV2Response.Includes">
            <summary>
            Contains all the requested expansions
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetV2Response.Errors">
            <summary>
            All errors that prevented Twitter to send some data,
            but which did not prevent the request to be resolved.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UsersV2Response.Users">
            <summary>
            Users returned by the request
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UsersV2Response.Includes">
            <summary>
            Contains all the requested expansions
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UsersV2Response.Errors">
            <summary>
            All errors that prevented Twitter to send some data,
            but which did not prevent the request to be resolved.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserV2Response.User">
            <summary>
            User returned by the request
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserV2Response.Includes">
            <summary>
            Contains all the requested expansions
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserV2Response.Errors">
            <summary>
            All errors that prevented Twitter to send some data,
            but which did not prevent the request to be resolved.
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.V2.TweetV2">
            <summary>
            A Tweet
            <para>Read more here : https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/tweet </para>
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetV2.Attachments">
            <summary>
            Specifies the type of attachments (if any) present in this Tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetV2.AuthorId">
            <summary>
            The unique identifier of the User who posted this Tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetV2.ContextAnnotations">
            <summary>
            Contains context annotations for the Tweet.
            <para>
            Derived from the analysis of a Tweet’s text and will include a domain and entity pairing
            which can be used to discover Tweets on topics that may have been previously difficult to surface.
            At present, we’re using a list of 50+ domains to categorize Tweets.
            </para>
            <para>Read more: https://developer.twitter.com/en/docs/twitter-api/annotations </para>
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetV2.ConversationId">
            <summary>
            The Tweet ID of the original Tweet of the conversation (which includes direct replies, replies of replies).
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetV2.CreatedAt">
            <summary>
            Creation time of the Tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetV2.Entities">
            <summary>
            Entities which have been parsed out of the text of the Tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetV2.Geo">
            <summary>
            Contains details about the location tagged by the user in this Tweet, if they specified one.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetV2.Id">
            <summary>
            The unique identifier of the requested Tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetV2.InReplyToUserId">
            <summary>
            If the represented Tweet is a reply, this field will contain the original Tweet’s author ID.
            This will not necessarily always be the user directly mentioned in the Tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetV2.Lang">
            <summary>
            Language of the Tweet, if detected by Twitter. Returned as a BCP47 language tag.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetV2.PossiblySensitive">
            <summary>
            This field only surfaces when a Tweet contains a link.
            The meaning of the field doesn’t pertain to the Tweet content itself, but instead it is an indicator
            that the URL contained in the Tweet may contain content or media identified as sensitive content.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetV2.ReferencedTweets">
            <summary>
            A list of Tweets this Tweet refers to. For example, if the parent Tweet is a Retweet,
            a Retweet with comment (also known as Quoted Tweet) or a Reply,
            it will include the related Tweet referenced to by its parent.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetV2.Source">
            <summary>
            The name of the app the user Tweeted from.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetV2.Text">
            <summary>
            The actual UTF-8 text of the Tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetV2.Withheld">
            <summary>
            When present, contains withholding details for withheld content.
            <para>Read more: https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country </para>
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetV2.NonPublicMetrics">
            <summary>
            Non-public engagement metrics for the Tweet at the time of the request.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetV2.OrganicMetrics">
            <summary>
            Engagement metrics, tracked in an organic context, for the Tweet at the time of the request.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetV2.PromotedMetrics">
            <summary>
            Engagement metrics, tracked in a promoted context, for the Tweet at the time of the request.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.TweetV2.PublicMetrics">
            <summary>
            Public engagement metrics for the Tweet at the time of the request.
            </summary>
        </member>
        <member name="T:Tweetinvi.Models.V2.UserV2">
            <summary>
            A user
            <para>Read more here : https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/user </para>
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserV2.CreatedAt">
            <summary>
            The UTC datetime that the user account was created on Twitter.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserV2.Description">
            <summary>
            The text of this user's profile description (also known as bio), if the user provided one.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserV2.Entities">
            <summary>
            Contains details about text that has a special meaning in the user's description.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserV2.Id">
            <summary>
            The unique identifier of this user.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserV2.Location">
            <summary>
            The location specified in the user's profile, if the user provided one. As this is a freeform value,
            it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserV2.Name">
            <summary>
            The name of the user, as they’ve defined it on their profile. Not necessarily a person’s name.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserV2.PinnedTweetId">
            <summary>
            Unique identifier of this user's pinned Tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserV2.ProfileImageUrl">
            <summary>
            The URL to the profile image for this user, as shown on the user's profile.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserV2.IsProtected">
            <summary>
            Indicates if this user has chosen to protect their Tweets (in other words, if this user's Tweets are private).
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserV2.Url">
            <summary>
            The URL specified in the user's profile, if present.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserV2.Username">
            <summary>
            The Twitter screen name, handle, or alias that this user identifies themselves with.
            Usernames are unique but subject to change.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserV2.Verified">
            <summary>
            Indicates if this user is a verified Twitter User.
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserV2.Withheld">
            <summary>
            Contains withholding details for withheld content, if applicable.
            <para>Read more: https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country </para>
            </summary>
        </member>
        <member name="P:Tweetinvi.Models.V2.UserV2.PublicMetrics">
            <summary>
            Contains details about activity for this user.
            </summary>
        </member>
        <member name="P:Tweetinvi.IMultipartTwitterQuery.Binaries">
            <summary>
            Binary to be send via HttpRequest
            </summary>
        </member>
        <member name="P:Tweetinvi.IMultipartTwitterQuery.ContentId">
            <summary>
            Content Id
            </summary>
        </member>
        <member name="P:Tweetinvi.IMultipartTwitterQuery.UploadProgressChanged">
            <summary>
            Action invoked to show the progress of the upload. {current / total}
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.ICountAccountActivitySubscriptionsParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#get-account-activity-all-subscriptions-count
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.CountAccountActivitySubscriptionsParameters">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IGetAccountActivityEnvironmentWebhooksParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#get-account-activity-all-webhooks
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetAccountActivityEnvironmentWebhooksParameters.Environment">
            <summary>
            The environment for which we want to get the list of webhooks
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetAccountActivityEnvironmentWebhooksParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetAccountActivityEnvironmentWebhooksParameters.Environment">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IGetAccountActivityWebhookEnvironmentsParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#get-account-activity-all-webhooks
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetAccountActivityWebhookEnvironmentsParameters">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IGetAccountActivitySubscriptionsParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#get-account-activity-all-env-name-subscriptions-list
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetAccountActivitySubscriptionsParameters.Environment">
            <summary>
            The environment for which we want to test the subscription
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.IIsAccountSubscribedToAccountActivityParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#get-account-activity-all-env-name-subscriptions
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IIsAccountSubscribedToAccountActivityParameters.Environment">
            <summary>
            The environment for which we want to test the subscription
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.IsAccountSubscribedToAccountActivityParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.IsAccountSubscribedToAccountActivityParameters.Environment">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.ICreateAccountActivityWebhookParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#post-account-activity-all-env-name-webhooks
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ICreateAccountActivityWebhookParameters.Environment">
            <summary>
            The environment used to register the webhook
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ICreateAccountActivityWebhookParameters.WebhookUrl">
            <summary>
            URL for the callback endpoint.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.CreateAccountActivityWebhookParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.CreateAccountActivityWebhookParameters.Environment">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.CreateAccountActivityWebhookParameters.WebhookUrl">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IDeleteAccountActivityWebhookParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#delete-account-activity-all-env-name-webhooks-webhook-id
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IDeleteAccountActivityWebhookParameters.Environment">
            <summary>
            The environment in which the webhook is registered
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IDeleteAccountActivityWebhookParameters.WebhookId">
            <summary>
            The webhook identifier
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.DeleteAccountActivityWebhookParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.DeleteAccountActivityWebhookParameters.Environment">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.DeleteAccountActivityWebhookParameters.WebhookId">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.ISubscribeToAccountActivityParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#post-account-activity-all-env-name-subscriptions
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ISubscribeToAccountActivityParameters.Environment">
            <summary>
            The environment in which the webhook is registered
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.SubscribeToAccountActivityParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.SubscribeToAccountActivityParameters.Environment">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.ITriggerAccountActivityWebhookCRCParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#put-account-activity-all-env-name-webhooks-webhook-id
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ITriggerAccountActivityWebhookCRCParameters.Environment">
            <summary>
            The environment in which the webhook is registered
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ITriggerAccountActivityWebhookCRCParameters.WebhookId">
            <summary>
            The webhook identifier
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.TriggerAccountActivityWebhookCRCParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.TriggerAccountActivityWebhookCRCParameters.Environment">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.TriggerAccountActivityWebhookCRCParameters.WebhookId">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IUnsubscribeFromAccountActivityParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/api-reference/aaa-premium#delete-account-activity-all-env-name-subscriptions-user-id-json
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUnsubscribeFromAccountActivityParameters.Environment">
            <summary>
            The environment in which the webhook is registered
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUnsubscribeFromAccountActivityParameters.UserId">
            <summary>
            The user id that we want to unsubscribe
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.UnsubscribeFromAccountActivityParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UnsubscribeFromAccountActivityParameters.Environment">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UnsubscribeFromAccountActivityParameters.UserId">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IBlockUserParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IBlockUserParameters.User">
            <summary>
            The user that you wish to block
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.BlockUserParameters">
            <inheritdoc cref="T:Tweetinvi.Parameters.IBlockUserParameters" />
        </member>
        <member name="P:Tweetinvi.Parameters.BlockUserParameters.User">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IFollowUserParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IFollowUserParameters.User">
            <summary>
            User that want to follow
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IFollowUserParameters.EnableNotifications">
            <summary>
            Enable notifications for the target user (twitter documentation name: follow)
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.FollowUserParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.FollowUserParameters.User">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.FollowUserParameters.EnableNotifications">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IGetAuthenticatedUserParameters">
            <summary>
            For more information visit : https://dev.twitter.com/rest/reference/get/account/verify_credentials
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IGetAuthenticatedUserParameters.IncludeEmail">
            <summary>
            Include the email of the user. This is only available if the application
            has been verified and approved by Twitter.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetAuthenticatedUserParameters.TweetMode">
            <summary>
            Decide whether to use Extended or Compat mode
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetAuthenticatedUserParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetAuthenticatedUserParameters.IncludeEmail">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetAuthenticatedUserParameters.TweetMode">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IGetBlockedUserIdsParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/get-blocks-ids
            </summary>
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.GetBlockedUserIdsParameters">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetBlockedUsersParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/get-blocks-list
            </summary>
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.GetBlockedUsersParameters">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetMutedUserIdsParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-ids
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.IGetMutedUsersParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-list
            </summary>
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.GetMutedUsersParameters">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IGetRelationshipsWithParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-lookup
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IGetRelationshipsWithParameters.Users">
            <summary>
            Collection of users for whom you want to check the relationship of the client's user
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetRelationshipsWithParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetRelationshipsWithParameters.Users">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetUserIdsRequestingFriendshipParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-incoming
            </summary>
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.GetUserIdsRequestingFriendshipParameters">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetUserIdsWhoseRetweetsAreMutedParameters">
            <summary>
            https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-no_retweets-ids
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.IGetUserIdsYouRequestedToFollowParameters">
            <summary>
            For more information visit : 
            </summary>
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.GetUserIdsYouRequestedToFollowParameters">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetUsersRequestingFriendshipParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-incoming
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IGetUsersRequestingFriendshipParameters.GetUsersPageSize">
            <summary>
            Page size when retrieving the users objects from Twitter
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetUsersRequestingFriendshipParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetUsersRequestingFriendshipParameters.GetUsersPageSize">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IGetUsersYouRequestedToFollowParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-incoming
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IGetUsersYouRequestedToFollowParameters.GetUsersPageSize">
            <summary>
            Page size when retrieving the users objects from Twitter
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetUsersYouRequestedToFollowParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetUsersYouRequestedToFollowParameters.GetUsersPageSize">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IMuteUserParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/post-mutes-users-create
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IMuteUserParameters.User">
            <summary>
            User that you want to mute
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.MuteUserParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.MuteUserParameters.User">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IReportUserForSpamParameters">
            <summary>
            https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/post-users-report_spam
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IReportUserForSpamParameters.User">
            <summary>
            The user you want to block
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IReportUserForSpamParameters.PerformBlock">
            <summary>
            Whether you want to block the user in addition to report him
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.ReportUserForSpamParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.ReportUserForSpamParameters.User">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.ReportUserForSpamParameters.PerformBlock">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IUnblockUserParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IUnblockUserParameters.User">
            <summary>
            User that you want to unblock
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.UnblockUserParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.UnblockUserParameters.User">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IUnfollowUserParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IUnfollowUserParameters.User">
            <summary>
            The user that you want to stop following
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.IUnmuteUserParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/post-mutes-users-destroy
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUnmuteUserParameters.User">
            <summary>
            User that you no longer want to mute
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.UnmuteUserParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UnmuteUserParameters.User">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IUpdateRelationshipParameters">
            <summary>
            https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/post-friendships-update
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateRelationshipParameters.User">
            <summary>
            User with whom you want to change the friendship
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateRelationshipParameters.EnableRetweets">
            <summary>
            Enable/disable device notifications from the user.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateRelationshipParameters.EnableDeviceNotifications">
            <summary>
            Enable/disable Retweets from the user.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.UpdateRelationshipParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateRelationshipParameters.User">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateRelationshipParameters.EnableRetweets">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateRelationshipParameters.EnableDeviceNotifications">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetAccountSettingsParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/get-account-settings
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetAccountSettingsParameters">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IRemoveProfileBannerParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/post-account-remove_profile_banner
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.RemoveProfileBannerParameters">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IUpdateAccountSettingsParameters">
            <summary>
            For more description visit : https://dev.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/post-account-settings
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateAccountSettingsParameters.DisplayLanguage">
            <summary>
            The languages which Twitter should use for this user.
            <para>PLEASE MAKE SURE this is a Language from the DisplayLanguages list</para>
            <para>You can use a Language.IsADisplayLanguage() extension function to ensure it is supported</para>
            <remarks>Tweetinvi will not prevent this parameter to set to any Language for future support</remarks>
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateAccountSettingsParameters.TimeZone">
            <summary>
            Must be a Timezone from http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateAccountSettingsParameters.TrendLocationWoeid">
            <summary>
            The Yahoo! Where On Earth ID to use as the user’s default trend location. 
            Global information is available by using 1 as the WOEID. 
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateAccountSettingsParameters.SleepTimeEnabled">
            <summary>
            When enabled sleep time is the time when push or SMS notifications should not be sent to the user.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateAccountSettingsParameters.StartSleepHour">
            <summary>
            The hour that sleep time should begin if it is enabled. 
            The value for this parameter should be provided in ISO8601 format (i.e. 00-23). 
            The time is considered to be in the same timezone as the user’s time_zone setting.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateAccountSettingsParameters.EndSleepHour">
            <summary>
            The hour that sleep time should end if it is enabled.
            The value for this parameter should be provided in ISO8601 format (i.e. 00-23). 
            The time is considered to be in the same timezone as the user’s time_zone setting.
            </summary>
        </member>
        <member name="M:Tweetinvi.Parameters.IUpdateAccountSettingsParameters.SetTimeZone(Tweetinvi.Models.TimeZoneFromTwitter)">
            <summary>
            The timezone dates and times should be displayed in for the user. 
            The timezone must be one of the Rails TimeZone names.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.UpdateAccountSettingsParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateAccountSettingsParameters.DisplayLanguage">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateAccountSettingsParameters.TimeZone">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateAccountSettingsParameters.TrendLocationWoeid">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateAccountSettingsParameters.SleepTimeEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateAccountSettingsParameters.StartSleepHour">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateAccountSettingsParameters.EndSleepHour">
            <inheritdoc/>
        </member>
        <member name="M:Tweetinvi.Parameters.UpdateAccountSettingsParameters.SetTimeZone(Tweetinvi.Models.TimeZoneFromTwitter)">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IUpdateProfileBannerParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_banner
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateProfileBannerParameters.Binary">
            <summary>
            Binary of the banner image.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateProfileBannerParameters.Width">
             <summary>
            The width of the preferred section of the image being uploaded in pixels. Use with height, offset_left, and offset_top to select the desired region of the image to use.
             </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateProfileBannerParameters.Height">
            <summary>
            The height of the preferred section of the image being uploaded in pixels. Use with width, offset_left, and offset_top to select the desired region of the image to use.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateProfileBannerParameters.OffsetLeft">
            <summary>
            The number of pixels by which to offset the uploaded image from the left. Use with height, width, and offset_top to select the desired region of the image to use.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateProfileBannerParameters.OffsetTop">
            <summary>
            The number of pixels by which to offset the uploaded image from the top. Use with height, width, and offset_left to select the desired region of the image to use.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateProfileBannerParameters.Timeout">
            <summary>
            If set, the http request will use this duration before throwing an exception.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateProfileBannerParameters.UploadProgressChanged">
            <summary>
            Action invoked to show the progress of the upload. {current / total}
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.UpdateProfileBannerParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateProfileBannerParameters.Binary">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateProfileBannerParameters.Width">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateProfileBannerParameters.Height">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateProfileBannerParameters.OffsetLeft">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateProfileBannerParameters.OffsetTop">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateProfileBannerParameters.Timeout">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateProfileBannerParameters.UploadProgressChanged">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IUpdateProfileImageParameters">
            <summary>
            For more information visit : https://dev.twitter.com/rest/reference/post/account/update_profile_image
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateProfileImageParameters.Binary">
            <summary>
            Binary of the profile image. 
            Must be a valid GIF, JPG, or PNG image of less than 700 kilobytes in size. Images with width larger than 400 pixels will be scaled down.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateProfileImageParameters.IncludeEntities">
            <summary>
            Include tweet entities.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateProfileImageParameters.SkipStatus">
            <summary>
            When set to true, statuses will not be included in the returned user objects.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateProfileImageParameters.Timeout">
            <summary>
            If set, the http request will use this duration before throwing an exception.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateProfileImageParameters.UploadProgressChanged">
            <summary>
            Action invoked to show the progress of the upload. {current / total}
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.UpdateProfileImageParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateProfileImageParameters.Binary">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateProfileImageParameters.IncludeEntities">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateProfileImageParameters.SkipStatus">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateProfileImageParameters.Timeout">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateProfileImageParameters.UploadProgressChanged">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IUpdateProfileParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateProfileParameters.Name">
            <summary>
            Full name associated with the profile. Maximum of 50 characters.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateProfileParameters.WebsiteUrl">
            <summary>
            URL associated with the profile. Will be prepended with “http://” if not present. Maximum of 100 characters.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateProfileParameters.Location">
            <summary>
            The city or country describing where the user of the account is located. The contents are not normalized or geocoded in any way.
            Maximum of 30 characters.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateProfileParameters.Description">
            <summary>
            A description/bio of the user owning the account. Maximum of 160 characters.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateProfileParameters.ProfileLinkColor">
            <summary>
            Sets a hex value that controls the color scheme of links used on the authenticating user’s profile page on twitter.com. 
            This must be a valid hexadecimal value, and may be either three or six characters (ex: F00 or FF0000).
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateProfileParameters.IncludeEntities">
            <summary>
            The entities node will not be included when set to false.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUpdateProfileParameters.SkipStatus">
            <summary>
            When set to true, statuses will not be included in the returned user objects.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.UpdateProfileParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateProfileParameters.Name">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateProfileParameters.Description">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateProfileParameters.Location">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateProfileParameters.WebsiteUrl">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateProfileParameters.ProfileLinkColor">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateProfileParameters.IncludeEntities">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UpdateProfileParameters.SkipStatus">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.AuthAccessType">
            <summary>
            Type of permissions requested when authenticating a user
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.ICreateBearerTokenParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/basics/authentication/api-reference/token
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.CreateBearerTokenParameters">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IInvalidateAccessTokenParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/basics/authentication/api-reference/invalidate_access_token
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.InvalidateAccessTokenParameters">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IInvalidateBearerTokenParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/basics/authentication/api-reference/invalidate_bearer_token
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.InvalidateBearerTokenParameters">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IRequestAuthUrlParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/basics/authentication/api-reference/request_token
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IRequestAuthUrlParameters.CallbackUrl">
            <summary>
            The url Twitter will redirect to after attempting to authenticate the user
            If not specified the user will not be redirected but will obtain a code to use to validate the authentications.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IRequestAuthUrlParameters.ForceLogin">
            <summary>
            Forces the user to enter their credentials to ensure the correct users account is authorized.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IRequestAuthUrlParameters.ScreenName">
            <summary>
            Prefill the username input box of the Twitter login screen with the given value.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IRequestAuthUrlParameters.AuthAccessType">
            <summary>
            Overrides the access level an application requests to a users account. Supported values are read or write.
            This parameter is intended to allow a developer to register a read/write application but also
            request read only access when appropriate.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IRequestCredentialsFromCallbackUrlParameters.CallbackUrl">
            <summary>
            Callback url called by Twitter auth redirection
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IRequestCredentialsFromCallbackUrlParameters.AuthRequest">
            <summary>
            Token returned by the AuthenticationContext when
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IRequestCredentialsFromPinCodeParameters.PinCode">
            <summary>
            PinCode entered by the user
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IRequestCredentialsFromPinCodeParameters.AuthRequest">
            <summary>
            Token returned by the AuthenticationContext when
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.IRequestCredentialsParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/basics/authentication/api-reference/access_token
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IRequestCredentialsParameters.VerifierCode">
            <summary>
            The verification code returned by Twitter also known as oauth_verifier
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IRequestCredentialsParameters.AuthRequest">
            <summary>
            Token returned by the AuthenticationContext when
            </summary>
        </member>
        <member name="M:Tweetinvi.Parameters.RequestCredentialsParameters.FromPinCode(System.String,Tweetinvi.Models.IAuthenticationRequest)">
            <summary>
            Generate request credentials parameters to authenticate with pinCode
            </summary>
        </member>
        <member name="M:Tweetinvi.Parameters.RequestCredentialsParameters.FromCallbackUrl(System.Uri,Tweetinvi.Models.IAuthenticationRequest)">
            <inheritdoc cref="M:Tweetinvi.Parameters.RequestCredentialsParameters.FromCallbackUrl(System.String,Tweetinvi.Models.IAuthenticationRequest)"/>
        </member>
        <member name="M:Tweetinvi.Parameters.RequestCredentialsParameters.FromCallbackUrlAsync(System.String,Tweetinvi.Auth.IAuthenticationRequestStore)">
            <summary>
            Generate the request credentials parameters from an AuthenticationTokenProvider
            If the url does not contain the expected input or the token provider cannot find
            the authentication token, this will return an error.
            </summary>
            <exception cref="T:System.ArgumentException">When callback url is not properly formatted</exception>
        </member>
        <member name="T:Tweetinvi.Parameters.RequestPinAuthUrlParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.RequestPinAuthUrlParameters.CallbackUrl">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.RequestPinAuthUrlParameters.ForceLogin">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.RequestPinAuthUrlParameters.ScreenName">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.RequestPinAuthUrlParameters.RequestId">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.RequestPinAuthUrlParameters.AuthAccessType">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.RequestUrlAuthUrlParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.RequestUrlAuthUrlParameters.CallbackUrl">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.RequestUrlAuthUrlParameters.ForceLogin">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.RequestUrlAuthUrlParameters.ScreenName">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.RequestUrlAuthUrlParameters.AuthAccessType">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.ICursorQueryParameters">
            <summary>
            A query that can return multiple times based on a cursor value
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ICursorQueryParameters.Cursor">
            <summary>
            The cursor value to start the operation with
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ICursorQueryParameters.PageSize">
            <summary>
            The maximum number of objects to return
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.CursorQueryParameters.Cursor">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.CursorQueryParameters.PageSize">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.ICustomRequestParameters">
            <summary>
            Allow developers to enhance default requests with additional query parameters
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ICustomRequestParameters.CustomQueryParameters">
            <summary>
            Collection of custom query parameters.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ICustomRequestParameters.FormattedCustomQueryParameters">
            <summary>
            Formatted string containing all the query parameters to append to a query.
            </summary>
        </member>
        <member name="M:Tweetinvi.Parameters.ICustomRequestParameters.AddCustomQueryParameter(System.String,System.String)">
            <summary>
            Add a custom query parameter.
            </summary>
        </member>
        <member name="M:Tweetinvi.Parameters.ICustomRequestParameters.ClearCustomQueryParameters">
            <summary>
            Clear the query parameters of the query.
            </summary>
        </member>
        <member name="M:Tweetinvi.Parameters.CustomRequestParameters.AddCustomQueryParameter(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Tweetinvi.Parameters.CustomRequestParameters.ClearCustomQueryParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.CustomRequestParameters.CustomQueryParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.CustomRequestParameters.FormattedCustomQueryParameters">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.Enum.OnlyGetTweetsThatAre">
            <summary>
            List of filters to detect whether the tweet is new.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.Enum.TweetSearchFilters">
            <summary>
            List of filters that can be used to retrieve tweets.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.IGeoSearchParameters">
            <summary>
            For more information read : https://developer.twitter.com/en/docs/geo/places-near-location/api-reference/get-geo-search
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGeoSearchParameters.Coordinates">
            <summary>
            Coordinates of the geo location.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGeoSearchParameters.Query">
            <summary>
            Free-form text to match against while executing a geo-based query, best suited for finding nearby locations by name.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGeoSearchParameters.Ip">
            <summary>
            An Ip address. Used when attempting to fix geolocation based off of the user’s Ip address.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGeoSearchParameters.Granularity">
            <summary>
            This is the minimal granularity of place types to return.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGeoSearchParameters.Accuracy">
            <summary>
            A hint on the “region” in which to search. If a number, then this is a radius in meters,
            but it can also take a string that is suffixed with ft to specify feet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGeoSearchParameters.MaximumNumberOfResults">
            <summary>
            Maximum number of places to return.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGeoSearchParameters.ContainedWithin">
            <summary>
            This is the place_id which you would like to restrict the search results to.
            Setting this value means only places within the given place_id will be found.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGeoSearchParameters.Attributes">
            <summary>
            This parameter searches for places which have the given attributes.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGeoSearchParameters.Callback">
            <summary>
            If supplied, the response will use the JSONP format with a callback of the given name.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGeoSearchParameters.AccuracyMeasure">
            <summary>
            Type of measure used in pair with the Accuracy parameters
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GeoSearchParameters">
            <summary>
            https://dev.twitter.com/rest/reference/get/geo/search
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.IGeoSearchReverseParameters">
            <summary>
            For more information read : https://developer.twitter.com/en/docs/geo/places-near-location/api-reference/get-geo-reverse_geocode
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGeoSearchReverseParameters.Coordinates">
            <summary>
            Coordinates of the geo location.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGeoSearchReverseParameters.Granularity">
            <summary>
            This is the minimal granularity of place types to return.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGeoSearchReverseParameters.Accuracy">
            <summary>
            A hint on the “region” in which to search. If a number, then this is a radius in meters,
            but it can also take a string that is suffixed with ft to specify feet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGeoSearchReverseParameters.MaximumNumberOfResults">
            <summary>
            Maximum number of places to return.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGeoSearchReverseParameters.Callback">
            <summary>
            If supplied, the response will use the JSONP format with a callback of the given name.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GeoSearchReverseParameters">
            <summary>
            https://dev.twitter.com/rest/reference/get/geo/reverse_geocode
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.IGetEndpointRateLimitsParameters">
            <summary>
            For more information read : https://developer.twitter.com/en/docs/developer-utilities/rate-limit-status/api-reference/get-application-rate_limit_status
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetEndpointRateLimitsParameters.Url">
            <summary>
            Url for which you want to get the rate limit
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetEndpointRateLimitsParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetEndpointRateLimitsParameters.Url">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IGetPlaceParameters">
            <summary>
            For more information read : https://developer.twitter.com/en/docs/geo/place-information/api-reference/get-geo-id-place_id
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetPlaceParameters.PlaceId">
            <summary>
            A place in the world. These IDs can be retrieved from geo/reverse_geocode.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetPlaceParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetPlaceParameters.PlaceId">
            <inheritdoc />
        </member>
        <member name="F:Tweetinvi.Parameters.RateLimitsSource.CacheOrTwitterApi">
            <summary>
            Gets the rate limits from the cache if they exists.
            If they do not exists, get from Twitter api and save in cache.
            </summary>
        </member>
        <member name="F:Tweetinvi.Parameters.RateLimitsSource.CacheOnly">
            <summary>
            Gets the rate limits from the cache only.
            If the cache does not have such rate limits, will return null.
            </summary>
        </member>
        <member name="F:Tweetinvi.Parameters.RateLimitsSource.TwitterApiOnly">
            <summary>
            Gets the rate limits from Twitter api.
            This does not try to get the rate limits from the cache nor does it save them there.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.IGetRateLimitsParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/developer-utilities/rate-limit-status/api-reference/get-application-rate_limit_status
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetRateLimitsParameters.From">
            <summary>
            How you want the rate limits to be retrieved.
            This parameter is not a parameter applied to the Twitter Api request.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetRateLimitsParameters.TrackerMode">
            <summary>
            Defines how the requests will be tracked
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetRateLimitsParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetRateLimitsParameters.From">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetRateLimitsParameters.TrackerMode">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.IMessagesRetrieveRequestParametersBase.MaximumNumberOfMessagesToRetrieve">
            <summary>
            Maximum number of messages to retrieve.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IMessagesRetrieveRequestParametersBase.SinceId">
            <summary>
            Returns tweets with an ID greater than the specified value.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IMessagesRetrieveRequestParametersBase.MaxId">
            <summary>
            Returns tweets with an ID lower than the specified value.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IMessagesRetrieveRequestParametersBase.IncludeEntities">
            <summary>
            Include tweet entities.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IMessagesRetrieveRequestParametersBase.FullText">
            <summary>
            Messages with more than 140 characters will be truncated
            if this value is set to false.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ITweetModeParameter.TweetMode">
            <summary>
            Decide whether to use Extended or Compat mode
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.ICreateListParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-create
            </summary>
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.CreateListParameters">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IDestroyListParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-destroy
            </summary>
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetListParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-show
            </summary>
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetListsOwnedByAccountParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-ownerships
            </summary>
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.GetListsOwnedByAccountParameters">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetListsOwnedByUserParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-ownerships
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IGetListsOwnedByUserParameters.User">
            <summary>
            User from whom we want to get the owned lists
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetListsOwnedByAccountByUserParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetListsOwnedByAccountByUserParameters.User">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetListsSubscribedByAccountParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-list
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IGetListsSubscribedByAccountParameters.Reverse">
            <summary>
            Set this to true if you would like owned lists to be returned first.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetListsSubscribedByAccountParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetListsSubscribedByAccountParameters.Reverse">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetListsSubscribedByUserParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-list
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IGetListsSubscribedByUserParameters.User">
            <summary>
            The ID of the user for whom to return results.
            <para>If not specified, it will return the results for the account's user.</para>
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetListsSubscribedByUserParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetListsSubscribedByUserParameters.User">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetTweetsFromListParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-statuses
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IGetTweetsFromListParameters.IncludeRetweets">
            <summary>
            Include Retweets. When this parameter is set to false, Twitter will send you the same result set but without including the retweets.
            It means that if there are a total of 100 tweets, and the latest are 80 new tweets and 20 retweets.
            If the MaximumResultSet is set to 100, you will receive 80 tweets and not 100 even if there is more than 80 new tweets in the Timeline.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetTweetsFromListParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetTweetsFromListParameters.List">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetTweetsFromListParameters.IncludeRetweets">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IListMetadataParameters.Name">
            <summary>
            The name for the list. A list's name must start with a letter and can consist only of
            25 or fewer letters, numbers, "-", or "_" characters.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IListMetadataParameters.Description">
            <summary>
            Whether your list is public or private. Values can be public or private.
            If no mode is specified the list will be public.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IListMetadataParameters.PrivacyMode">
            <summary>
            The description to give the list.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ListMetadataParameters.Name">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.ListMetadataParameters.Description">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.ListMetadataParameters.PrivacyMode">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IAddMembersToListParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-members-create_all
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IAddMembersToListParameters.Users">
            <summary>
            List of users to be added to the list
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.AddMembersToListParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.AddMembersToListParameters.Users">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IAddMemberToListParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-members-create
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IAddMemberToListParameters.User">
            <summary>
            User to add as a member of the list
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.AddMemberToListParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.AddMemberToListParameters.User">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.ICheckIfUserIsMemberOfListParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-members-show
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.ICheckIfUserIsMemberOfListParameters.User">
            <summary>
            User for whom we want to verify the membership
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ICheckIfUserIsMemberOfListParameters.IncludeEntities">
            <summary>
            Each tweet will include a node called "entities". This property offers a variety of
            metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ICheckIfUserIsMemberOfListParameters.SkipStatus">
            <summary>
            Statuses will not be included in the returned user objects.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.CheckIfUserIsMemberOfListParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.CheckIfUserIsMemberOfListParameters.User">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.CheckIfUserIsMemberOfListParameters.IncludeEntities">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.CheckIfUserIsMemberOfListParameters.SkipStatus">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetAccountListMembershipsParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-memberships
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IGetAccountListMembershipsParameters.OnlyRetrieveAccountLists">
            <summary>
            When set to true the request will return only the lists the authenticating user owns,
            and the specified user is a member of.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetAccountListMembershipsParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetAccountListMembershipsParameters.OnlyRetrieveAccountLists">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetMembersOfListParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-members
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetMembersOfListParameters">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetUserListMembershipsParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-memberships
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IGetUserListMembershipsParameters.User">
            <summary>
            User from whom we want to get the lists he is a member of
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetUserListMembershipsParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetUserListMembershipsParameters.User">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IRemoveMemberFromListParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-members-destroy
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IRemoveMemberFromListParameters.User">
            <summary>
            User to remove from list
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.RemoveMemberFromListParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.RemoveMemberFromListParameters.User">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IRemoveMembersFromListParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-members-destroy_all
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IRemoveMembersFromListParameters.Users">
            <summary>
            Users to remove from the list
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.RemoveMembersFromListParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.RemoveMembersFromListParameters.Users">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.ICheckIfUserIsSubscriberOfListParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers-show
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ICheckIfUserIsSubscriberOfListParameters.User">
            <summary>
            User for whom we want to verify the subscription
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ICheckIfUserIsSubscriberOfListParameters.IncludeEntities">
            <summary>
            Each tweet will include a node called "entities". This property offers a variety of
            metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ICheckIfUserIsSubscriberOfListParameters.SkipStatus">
            <summary>
            Statuses will not be included in the returned user objects.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.CheckIfUserIsSubscriberOfListParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.CheckIfUserIsSubscriberOfListParameters.User">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.CheckIfUserIsSubscriberOfListParameters.IncludeEntities">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.CheckIfUserIsSubscriberOfListParameters.SkipStatus">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetAccountListSubscriptionsParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-subscriptions
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.IGetListSubscribersParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetListSubscribersParameters">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetUserListSubscriptionsParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-subscriptions
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetUserListSubscriptionsParameters.User">
            <summary>
            User from whom you want the lists he is subscribed to
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.GetUserListSubscriptionsParameters.User">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.ISubscribeToListParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-create
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.IUnsubscribeFromListParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-destroy
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.UnsubscribeFromListParameters">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IListParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IListParameters.List">
            <summary>
            Identifier of a twitter list
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.TwitterListParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.TwitterListParameters.List">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IUpdateListParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-update
            </summary>
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.UpdateListParameters">
            <inheritdoc />
        </member>
        <member name="F:Tweetinvi.Parameters.ContinueMinMaxCursor.UntilNoItemsReturned">
            <summary>
            The iterator will be marked as completed when no more items are returned.
            This implies additional requests.
            </summary>
        </member>
        <member name="F:Tweetinvi.Parameters.ContinueMinMaxCursor.UntilPageSizeIsDifferentFromRequested">
            <summary>
            The iterator will be marked as completed when the number of items returned is lower than requested.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IMinMaxQueryParameters.PageSize">
            <summary>
            The maximum number of objects to return
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IMinMaxQueryParameters.SinceId">
            <summary>
            Minimum id that can be returned by the query (start from)
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IMinMaxQueryParameters.MaxId">
            <summary>
            Maximum id that can be returned by the query (ends at)
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IMinMaxQueryParameters.ContinueMinMaxCursor">
            <summary>
            Defines when the cursor should stop
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.MinMaxQueryParameters.PageSize">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.MinMaxQueryParameters.SinceId">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.MinMaxQueryParameters.MaxId">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.MinMaxQueryParameters.ContinueMinMaxCursor">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IDeleteMessageParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/guides/direct-message-migration
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IDeleteMessageParameters.MessageId">
            <summary>
            Identifier of the message that you want to delete
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.DestroyMessageParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.DestroyMessageParameters.MessageId">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IGetMessageParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/api-reference/get-event
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.IGetMessagesParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/api-reference/list-events
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetMessagesParameters">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IPublishMessageParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/api-reference/new-event
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IPublishMessageParameters.Text">
            <summary>
            Content of the message
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IPublishMessageParameters.RecipientId">
            <summary>
            UserId of the recipient
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IPublishMessageParameters.MediaId">
            <summary>
            Uploaded media id
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IPublishMessageParameters.QuickReplyOptions">
            <summary>
            Quick reply options
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.PublishMessageParameters">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.Optionals.IGetCursorUsersOptionalParameters">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.Optionals.GetCursorUsersOptionalParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.Optionals.GetCursorUsersOptionalParameters.IncludeEntities">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.Optionals.GetCursorUsersOptionalParameters.SkipStatus">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.Optionals.IGetUsersOptionalParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.Optionals.IGetUsersOptionalParameters.SkipStatus">
            <summary>
            Specifies if you want the user object to contain the user's latest tweets.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.Optionals.IGetUsersOptionalParameters.IncludeEntities">
            <summary>
            Include user entities.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.Optionals.GetUsersOptionalParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.Optionals.GetUsersOptionalParameters.IncludeEntities">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.Optionals.GetUsersOptionalParameters.SkipStatus">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.ICreateSavedSearchParameters">
            <summary>
            For more information read : https://developer.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/post-saved_searches-create
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ICreateSavedSearchParameters.Query">
            <summary>
            The query of the search the user would like to save.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.CreateSavedSearchParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.CreateSavedSearchParameters.Query">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IDestroySavedSearchParameters">
            <summary>
            For more information read : https://developer.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/post-saved_searches-destroy-id
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IDestroySavedSearchParameters.SavedSearchId">
            <summary>
            The ID of the saved search.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.DestroySavedSearchParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.DestroySavedSearchParameters.SavedSearchId">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetSavedSearchParameters">
            <summary>
            For more information read : https://developer.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/get-saved_searches-show-id
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetSavedSearchParameters.SavedSearchId">
            <summary>
            The ID of the saved search.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetSavedSearchParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetSavedSearchParameters.SavedSearchId">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IListSavedSearchesParameters">
            <summary>
            For more information read : https://developer.twitter.com/en/docs/accounts-and-users/manage-account-settings/api-reference/get-saved_searches-list
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.ISearchTweetsParameters">
            <summary>
            For more information read : https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets
            <para>Learn more about query here : https://developer.twitter.com/en/docs/tweets/search/guides/standard-operators</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ISearchTweetsParameters.Query">
            <summary>
            Query to search tweets.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ISearchTweetsParameters.Locale">
            <summary>
            Specify the language of the query you are sending (only ja is currently effective).
            This is intended for language-specific consumers and the default should work in the majority of cases.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ISearchTweetsParameters.Lang">
            <summary>
            Language identified for the tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ISearchTweetsParameters.GeoCode">
            <summary>
            Restrict your query to a given location.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ISearchTweetsParameters.SearchType">
            <summary>
            Choose if the result set will be represented by recent or popular Tweets, or even a mix of both.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ISearchTweetsParameters.Since">
            <summary>
            Search will only return tweets published after this date.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ISearchTweetsParameters.Until">
            <summary>
            Search will only return tweets published before this date.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ISearchTweetsParameters.Filters">
            <summary>
            Filters tweets based on metadata.
            </summary>
        </member>
        <member name="M:Tweetinvi.Parameters.ISearchTweetsParameters.SetGeoCode(Tweetinvi.Models.ICoordinates,System.Double,Tweetinvi.Models.DistanceMeasure)">
            <summary>
            Set the geo location where the search have to be performed.
            </summary>
        </member>
        <member name="M:Tweetinvi.Parameters.ISearchTweetsParameters.SetGeoCode(System.Double,System.Double,System.Double,Tweetinvi.Models.DistanceMeasure)">
            <summary>
            Set the geo location where the search have to be performed.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ISearchTweetsParameters.IncludeEntities">
            <summary>
            Include tweet entities.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.SearchTweetsParameters">
            <summary>
            https://dev.twitter.com/rest/reference/get/search/tweets
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.ISearchUsersParameters">
            <summary>
            For more information read : https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-users-search
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ISearchUsersParameters.Query">
            <summary>
            Query to search for people.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ISearchUsersParameters.Page">
            <summary>
            Search result page to retrieve.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ISearchUsersParameters.PageSize">
            <summary>
            Number of Users to Retrieve.
            Cannot be more than 1000 as per the documentation.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ISearchUsersParameters.IncludeEntities">
            <summary>
            Retrieve the user entities.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.SearchUsersParameters">
            <summary>
            https://dev.twitter.com/rest/reference/get/users/search
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ICreateTrackedTweetStreamParameters.TweetMode">
            <summary>
            Decide whether to use Extended or Compat mode
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ICreateTweetStreamParameters.TweetMode">
            <summary>
            Decide whether to use Extended or Compat mode
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.IGetHomeTimelineParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-home_timeline
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IGetHomeTimelineParameters.ExcludeReplies">
            <summary>
            Exclude reply tweets from the result set.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetHomeTimelineParameters">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetMentionsTimelineParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-mentions_timeline
            </summary>
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.GetMentionsTimelineParameters">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetRetweetsOfMeTimelineParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweets_of_me
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetRetweetsOfMeTimelineParameters.IncludeUserEntities">
            <summary>
            Include user entities.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetRetweetsOfMeTimelineParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetRetweetsOfMeTimelineParameters.IncludeUserEntities">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IGetUserTimelineParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-user_timeline
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IGetUserTimelineParameters.User">
            <summary>
            User from who you want to get the timeline
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetUserTimelineParameters.IncludeRetweets">
            <summary>
            Include Retweets. When this parameter is set to false, Twitter will send you the same result set but without including the retweets.
            It means that if there are a total of 100 tweets, and the latest are 80 new tweets and 20 retweets.
            If the MaximumResultSet is set to 100, you will receive 80 tweets and not 100 even if there is more than 80 new tweets in the Timeline.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetUserTimelineParameters.ExcludeReplies">
            <summary>
            Exclude reply tweets from the result set.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetUserTimelineParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.ITimelineRequestParameters.TrimUser">
            <summary>
            If set to true, the creator property (IUser) will only contain the id.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.ITimelineRequestParameters.IncludeEntities">
            <summary>
            Include tweet entities.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.TimelineRequestParameters.TrimUser">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.TimelineRequestParameters.IncludeEntities">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.TimelineRequestParameters.TweetMode">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.TrendsClient.IGetTrendsAtParameters">
            <summary>
            For more information read : https://developer.twitter.com/en/docs/trends/trends-for-location/api-reference/get-trends-place
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.TrendsClient.IGetTrendsAtParameters.Woeid">
            <summary>
            The Yahoo! Where On Earth ID of the location to return trending information for.
            Global information is available by using 1 as the WOEID .
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.TrendsClient.IGetTrendsAtParameters.Exclude">
            <summary>
            Setting this equal to hashtags will remove all hashtags from the trends list.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.TrendsClient.GetTrendsAtParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.TrendsClient.GetTrendsAtParameters.Woeid">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.TrendsClient.GetTrendsAtParameters.Exclude">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.TrendsClient.IGetTrendsLocationCloseToParameters">
            <summary>
            For more information read : https://developer.twitter.com/en/docs/trends/locations-with-trending-topics/api-reference/get-trends-closest
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.TrendsClient.IGetTrendsLocationCloseToParameters.Coordinates">
            <summary>
            Coordinates from where to search trends
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.TrendsClient.GetTrendsLocationCloseToParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.TrendsClient.GetTrendsLocationCloseToParameters.Coordinates">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.TrendsClient.IGetTrendsLocationParameters">
            <summary>
            https://developer.twitter.com/en/docs/trends/locations-with-trending-topics/api-reference/get-trends-available
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.TrendsClient.GetTrendsLocationParameters">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IDestroyRetweetParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-statuses-unretweet-id
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IDestroyRetweetParameters.Tweet">
            <summary>
            The identifier of the retweet
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IDestroyRetweetParameters.TrimUser">
            <summary>
            Tweets author object will not be populated when set to true
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.DestroyRetweetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.DestroyRetweetParameters.Tweet">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.DestroyRetweetParameters.TrimUser">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.DestroyRetweetParameters.TweetMode">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IDestroyTweetParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-statuses-destroy-id
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IDestroyTweetParameters.Tweet">
            <summary>
            The identifier of the tweet you want to destroy
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IDestroyTweetParameters.TrimUser">
            <summary>
            If set to true, the creator property (IUser) will only contain the id.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.DestroyTweetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.DestroyTweetParameters.Tweet">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.DestroyTweetParameters.TrimUser">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IFavoriteTweetParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-favorites-create
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IFavoriteTweetParameters.Tweet">
            <summary>
            The identifier of the tweet you want to favorite
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IFavoriteTweetParameters.IncludeEntities">
            <summary>
            Include the tweet entities
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.FavoriteTweetParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.FavoriteTweetParameters.Tweet">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.FavoriteTweetParameters.IncludeEntities">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetUserFavoriteTweetsParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-favorites-list
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetUserFavoriteTweetsParameters.User">
            <summary>
            The user from whom you want to get the favorite tweets
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetUserFavoriteTweetsParameters.IncludeEntities">
            <summary>
            Include the tweet entities
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetUserFavoriteTweetsParameters">
            <inheritdoc cref="T:Tweetinvi.Parameters.IGetUserFavoriteTweetsParameters" />
        </member>
        <member name="P:Tweetinvi.Parameters.GetUserFavoriteTweetsParameters.User">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetUserFavoriteTweetsParameters.IncludeEntities">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetUserFavoriteTweetsParameters.TweetMode">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.OEmbedTweetAlignment">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-oembed
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.OEmbedTweetTheme">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-oembed
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.OEmbedTweetWidgetType">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-oembed
            </summary>
        </member>
        <member name="F:Tweetinvi.Parameters.OEmbedTweetWidgetType.Default">
            <summary>
            Parameter won't be included
            </summary>
        </member>
        <member name="F:Tweetinvi.Parameters.OEmbedTweetWidgetType.Video">
            <summary>
            Set to video to return a Twitter Video embed for the given Tweet.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.IGetOEmbedTweetParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-oembed
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetOEmbedTweetParameters.Tweet">
            <summary>
            The identifier of the tweet for which you want to get the oembed tweet
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetOEmbedTweetParameters.MaxWidth">
             <summary>
             The maximum width of a rendered Tweet in whole pixels.
             A supplied value under or over the allowed range will be returned as the minimum or maximum
             supported width respectively; the reset width value will be reflected in the returned width property.
            
             <para>Min: 220; Max: 550</para>
             </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetOEmbedTweetParameters.HideMedia">
            <summary>
            When set to true links in a Tweet are not expanded to photo, video, or link previews.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetOEmbedTweetParameters.HideThread">
            <summary>
            When set to true a collapsed version of the previous Tweet in a conversation thread
            will not be displayed when the requested Tweet is in reply to another Tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetOEmbedTweetParameters.OmitScript">
            <summary>
            When set to true the script responsible for loading widgets.js will not be returned.
            Your webpages should include their own reference to widgets.js
            for use across all Twitter widgets including Embedded Tweets.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetOEmbedTweetParameters.Alignment">
            <summary>
            Specifies whether the embedded Tweet should be floated left, right, or center
            in the page relative to the parent element.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetOEmbedTweetParameters.RelatedUsernames">
            <summary>
            A list of Twitter usernames related to your content.
            This value will be forwarded to Tweet action intents if a viewer chooses
            to reply, like, or retweet the embedded Tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetOEmbedTweetParameters.Language">
            <summary>
            Request returned HTML and a rendered Tweet in the specified Twitter language supported by embedded Tweets.
            <para> https://developer.twitter.com/en/docs/twitter-for-websites/twitter-for-websites-supported-languages/overview </para>
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetOEmbedTweetParameters.Theme">
            <summary>
            When set to dark, the Tweet is displayed with light text over a dark background.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetOEmbedTweetParameters.LinkColor">
            <summary>
            Adjust the color of Tweet text links with a hexadecimal color value.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetOEmbedTweetParameters.WidgetType">
            <summary>
            Set to video to return a Twitter Video embed for the given Tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetOEmbedTweetParameters.EnablePersonalisationAndSuggestions">
            <summary>
            This is the `dnt` parameter.
            When set to true, the Tweet and its embedded page on your site are not used for purposes
            that include personalized suggestions and personalized ads.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetOEmbedTweetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetOEmbedTweetParameters.Tweet">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetOEmbedTweetParameters.MaxWidth">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetOEmbedTweetParameters.HideMedia">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetOEmbedTweetParameters.HideThread">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetOEmbedTweetParameters.OmitScript">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetOEmbedTweetParameters.Alignment">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetOEmbedTweetParameters.RelatedUsernames">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetOEmbedTweetParameters.Language">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetOEmbedTweetParameters.Theme">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetOEmbedTweetParameters.LinkColor">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetOEmbedTweetParameters.WidgetType">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetOEmbedTweetParameters.EnablePersonalisationAndSuggestions">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IGetRetweeterIdsParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetRetweeterIdsParameters.Tweet">
            <summary>
            The identifier of the retweet
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetRetweeterIdsParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetRetweeterIdsParameters.Tweet">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IGetRetweetsParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweets-id
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetRetweetsParameters.Tweet">
            <summary>
            The identifier of the tweet you want to retrieve
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetRetweetsParameters.TrimUser">
            <summary>
            Tweets author object will not be populated when set to true
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetRetweetsParameters.PageSize">
            <summary>
            Specifies the number of records to retrieve.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetRetweetsParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetRetweetsParameters.Tweet">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetRetweetsParameters.TrimUser">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetRetweetsParameters.PageSize">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetRetweetsParameters.TweetMode">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IGetTweetParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-show-id
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetTweetParameters.Tweet">
            <summary>
            The identifier of the tweet you want to retrieve
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetTweetParameters.TrimUser">
            <summary>
            Tweet's author object will not be populated when set to true
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetTweetParameters.IncludeMyRetweet">
            <summary>
            Tweet's `current_user_retweet` field will be populated when set to true
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetTweetParameters.IncludeEntities">
            <summary>
            Tweet's entities will not be included if set to false
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetTweetParameters.IncludeExtAltText">
            <summary>
            Tweet's alt text attached to media will be included when set to true
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetTweetParameters.IncludeCardUri">
            <summary>
            Tweet's card uri will be included when set to true
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetTweetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetTweetParameters.Tweet">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetTweetParameters.TrimUser">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetTweetParameters.IncludeMyRetweet">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetTweetParameters.IncludeEntities">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetTweetParameters.IncludeExtAltText">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetTweetParameters.IncludeCardUri">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetTweetParameters.TweetMode">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IGetTweetsParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-lookup
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetTweetsParameters.Tweets">
            <summary>
            The identifiers of the tweets you want to retrieve
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetTweetsParameters.TrimUser">
            <summary>
            Tweet's author object will not be populated when set to true
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetTweetsParameters.IncludeEntities">
            <summary>
            Tweet's entities will not be included if set to false
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetTweetsParameters.IncludeExtAltText">
            <summary>
            Tweet's alt text attached to media will be included when set to true
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetTweetsParameters.IncludeCardUri">
            <summary>
            Tweet's card uri will be included when set to true
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetTweetsParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetTweetsParameters.Tweets">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetTweetsParameters.TrimUser">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetTweetsParameters.IncludeEntities">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetTweetsParameters.IncludeExtAltText">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetTweetsParameters.IncludeCardUri">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.GetTweetsParameters.TweetMode">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IPublishRetweetParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-statuses-retweet-id
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IPublishRetweetParameters.Tweet">
            <summary>
            The tweet identifier you want to retweet
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IPublishRetweetParameters.TrimUser">
            <summary>
            Tweets author object will not be populated when set to true
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.PublishRetweetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.PublishRetweetParameters.Tweet">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.PublishRetweetParameters.TrimUser">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.PublishRetweetParameters.TweetMode">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IPublishTweetParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-show-id
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IPublishTweetParameters.Text">
            <summary>
            Message to publish as a tweet
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IPublishTweetParameters.InReplyToTweetId">
            <summary>
            The ID of an existing status that the update is in reply to.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IPublishTweetParameters.QuotedTweet">
            <summary>
            Quote a specific tweet
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IPublishTweetParameters.InReplyToTweet">
            <summary>
            An existing status that the update is in reply to.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IPublishTweetParameters.QuotedTweetUrl">
            <summary>
            In order for a URL to not be counted in the status body of an extended Tweet, provide a URL as a Tweet attachment.
            This URL must be a Tweet permalink, or Direct Message deep link.
            Arbitrary, non-Twitter URLs must remain in the status text.
            URLs passed to the attachment_url parameter not matching either a Tweet permalink or
            Direct Message deep link will fail at Tweet creation and cause an exception.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IPublishTweetParameters.PlaceId">
            <summary>
            A <a href="https://dev.twitter.com/overview/api/places">place</a> in the world.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IPublishTweetParameters.Coordinates">
            <summary>
            Coordinates indicating the position from where the tweet has been published.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IPublishTweetParameters.DisplayExactCoordinates">
            <summary>
            Whether or not to put a pin on the exact coordinates a tweet has been sent from.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IPublishTweetParameters.MediaIds">
            <summary>
            A list of media_ids to associate with the Tweet. You may include up to 4 photos or 1 animated GIF or 1 video in a Tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IPublishTweetParameters.Medias">
            <summary>
            A list of media (uploaded or not) that need to be displayed within the tweet.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IPublishTweetParameters.HasMedia">
            <summary>
            Whether this Tweet will be published with any media attached
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IPublishTweetParameters.PossiblySensitive">
            <summary>
            If you upload Tweet media that might be considered sensitive content such as
            nudity, violence, or medical procedures, you should set this value to true.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IPublishTweetParameters.TrimUser">
            <summary>
            If set to true, the creator property (IUser) will only contain the id.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IPublishTweetParameters.AutoPopulateReplyMetadata">
            <summary>
            Twitter will auto-populate the @mentions in the extended tweet prefix from the Tweet
            being replied to, plus a mention of the screen name that posted the Tweet being replied to.
            i.e. This auto-populates a "reply all".
            Must be used with InReplyToTweetId or InReplyToTweet.
            Use ExcludeReplyUserIds to specify accounts to not mention in the prefix.
            Also note that there can be a maximum of 50 mentions in the prefix, any more will error.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IPublishTweetParameters.ExcludeReplyUserIds">
            <summary>
            Twitter User IDs to not include in the auto-populated extended Tweet prefix.
            Cannot exclude the User who is directly being replied to, only the additional mentions.
            Must be used with AutoPopulateReplyMetadata.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IPublishTweetParameters.CardUri">
            <summary>
            Associate an ads card with the Tweet using the card_uri value from any ads card response.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.PublishTweetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.PublishTweetParameters.Text">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.PublishTweetParameters.InReplyToTweet">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.PublishTweetParameters.QuotedTweetUrl">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.PublishTweetParameters.QuotedTweet">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.PublishTweetParameters.InReplyToTweetId">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.PublishTweetParameters.MediaIds">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.PublishTweetParameters.Medias">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.PublishTweetParameters.HasMedia">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.PublishTweetParameters.PlaceId">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.PublishTweetParameters.Coordinates">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.PublishTweetParameters.DisplayExactCoordinates">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.PublishTweetParameters.PossiblySensitive">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.PublishTweetParameters.TrimUser">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.PublishTweetParameters.AutoPopulateReplyMetadata">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.PublishTweetParameters.ExcludeReplyUserIds">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.PublishTweetParameters.CardUri">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.PublishTweetParameters.TweetMode">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IUnfavoriteTweetParameters">
            <summary>
            For more information visit : https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-favorites-destroy
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IUnfavoriteTweetParameters.Tweet">
            <summary>
            The identifier of the tweet you no longer want to be a favorite
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUnfavoriteTweetParameters.IncludeEntities">
            <summary>
            Include the tweet entities
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.UnfavoriteTweetParameters">
            <inheritdoc cref="T:Tweetinvi.Parameters.IUnfavoriteTweetParameters" />
        </member>
        <member name="P:Tweetinvi.Parameters.UnfavoriteTweetParameters.Tweet">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.UnfavoriteTweetParameters.IncludeEntities">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IAddMediaMetadataParameters">
            <summary>
            For more description visit : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-metadata-create
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.IUploadParameters">
            <summary>
            For more description visit : https://dev.twitter.com/rest/media/uploading-media
            <para>INIT : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-init</para>
            <para>APPEND : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-append</para>
            <para>FINALIZE : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-finalize</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUploadParameters.Binary">
            <summary>
            Binary that you want to publish
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.UploadBinaryParameters">
            <summary>
            https://dev.twitter.com/rest/media/uploading-media
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.IUploadMessageImageParameters">
            <summary>
            For more description visit : https://dev.twitter.com/rest/media/uploading-media
            <para>INIT : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-init</para>
            <para>APPEND : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-append</para>
            <para>FINALIZE : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-finalize</para>
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.IUploadMessageVideoParameters">
            <summary>
            For more description visit : https://dev.twitter.com/rest/media/uploading-media
            <para>INIT : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-init</para>
            <para>APPEND : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-append</para>
            <para>FINALIZE : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-finalize</para>
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.UploadMessageVideoParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.IUploadOptionalParameters.MediaType">
            <summary>
            Type of element that you want to publish.
            This property will modify the QueryMediaType.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUploadOptionalParameters.QueryMediaType">
            <summary>
            Type of element that you want to publish.
            This will be used as the ContentType in the HttpRequest.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUploadOptionalParameters.MediaCategory">
            <summary>
            Type of upload. `tweet_video` allows to access the STATUS of the upload processing.
            This property will modify the QueryMediaCategory.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUploadOptionalParameters.QueryMediaCategory">
            <summary>
            Type of upload. `tweet_video` allows to access the STATUS of the upload processing.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUploadOptionalParameters.MaxChunkSize">
            <summary>
            Maximum size of a chunk size (in bytes) for a single upload.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUploadOptionalParameters.Timeout">
            <summary>
            Timeout after which each chunk request will fail.
            <para>Note that this is not a global upload timeout</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUploadOptionalParameters.AdditionalOwnerIds">
            <summary>
            User Ids who are allowed to use the uploaded media.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUploadOptionalParameters.WaitForTwitterProcessing">
            <summary>
            When an upload completes Twitter takes few seconds to process the media
            and confirm that it is a media that can be used on the platform.
            With WaitForTwitterProcessing enabled, Tweetinvi will wait for Twitter
            to confirm that the media has been successfully processed.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUploadOptionalParameters.InitCustomRequestParameters">
            <summary>
            Additional parameters to use during the upload INIT HttpRequest.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUploadOptionalParameters.AppendCustomRequestParameters">
            <summary>
            Additional parameters to use during the upload APPEND HttpRequest.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUploadOptionalParameters.FinalizeCustomRequestParameters">
            <summary>
            Additional parameters to use during the upload FINALIZE HttpRequest.
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IUploadOptionalParameters.UploadStateChanged">
            <summary>
            Event to notify that the upload state has changed
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.UploadOptionalParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UploadOptionalParameters.MediaType">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UploadOptionalParameters.QueryMediaType">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UploadOptionalParameters.MediaCategory">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UploadOptionalParameters.QueryMediaCategory">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UploadOptionalParameters.MaxChunkSize">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UploadOptionalParameters.Timeout">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UploadOptionalParameters.AdditionalOwnerIds">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UploadOptionalParameters.WaitForTwitterProcessing">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UploadOptionalParameters.InitCustomRequestParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UploadOptionalParameters.AppendCustomRequestParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UploadOptionalParameters.FinalizeCustomRequestParameters">
            <inheritdoc/>
        </member>
        <member name="P:Tweetinvi.Parameters.UploadOptionalParameters.UploadStateChanged">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IUploadTweetImageParameters">
            <summary>
            For more description visit : https://dev.twitter.com/rest/media/uploading-media
            <para>INIT : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-init</para>
            <para>APPEND : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-append</para>
            <para>FINALIZE : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-finalize</para>
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.IUploadTweetVideoParameters">
            <summary>
            For more description visit : https://dev.twitter.com/rest/media/uploading-media
            <para>INIT : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-init</para>
            <para>APPEND : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-append</para>
            <para>FINALIZE : https://dev.twitter.com/en/docs/media/upload-media/api-reference/post-media-upload-finalize</para>
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.UploadTweetVideoParameters">
            <inheritdoc/>
        </member>
        <member name="T:Tweetinvi.Parameters.IGetFollowerIdsParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IGetFollowerIdsParameters.User">
            <summary>
            A unique identifier of a user
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetFollowerIdsParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetFollowerIdsParameters.User">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetFollowersParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IGetFollowersParameters.GetUsersPageSize">
            <summary>
            Page size when retrieving the users objects from Twitter
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetFollowersParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetFollowersParameters.SkipStatus">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetFollowersParameters.IncludeEntities">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetFollowersParameters.GetUsersPageSize">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetFriendIdsParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IGetFriendIdsParameters.User">
            <summary>
            User for who you want to get the friends from.
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetFriendIdsParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetFriendIdsParameters.User">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetFriendsParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IGetFriendsParameters.GetUsersPageSize">
            <summary>
            Page size when retrieving the users objects from Twitter
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetFriendsParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetFriendsParameters.IncludeEntities">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetFriendsParameters.SkipStatus">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetFriendsParameters.GetUsersPageSize">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetProfileImageParameters">
            <summary>
            Parameters to download an profile image from Twitter.
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IGetProfileImageParameters.ImageUrl">
            <summary>
            Url of the profile image
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetProfileImageParameters.ImageSize">
            <summary>
            Size of the image
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetProfileImageParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetProfileImageParameters.ImageUrl">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetProfileImageParameters.ImageSize">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetRelationshipBetweenParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IGetRelationshipBetweenParameters.SourceUser">
            <summary>
            User from whom to check the relationship
            </summary>
        </member>
        <member name="P:Tweetinvi.Parameters.IGetRelationshipBetweenParameters.TargetUser">
            <summary>
            User to whom we want to check the relationship
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetRelationshipBetweenParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetRelationshipBetweenParameters.SourceUser">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetRelationshipBetweenParameters.TargetUser">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetUserParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-users-show
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IGetUserParameters.User">
            <summary>
            User identifier
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetUserParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetUserParameters.User">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.Parameters.IGetUsersParameters">
            <summary>
            For more information visit : https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.IGetUsersParameters.Users">
            <summary>
            User identifiers
            </summary>
        </member>
        <member name="T:Tweetinvi.Parameters.GetUsersParameters">
            <inheritdoc />
        </member>
        <member name="P:Tweetinvi.Parameters.GetUsersParameters.Users">
            <inheritdoc />
        </member>
        <member name="T:Tweetinvi.RateLimitTrackerMode">
            <summary>
            Provide a set of preconfigured solutions that you can use to track the Twitter rate limits.
            </summary>
        </member>
        <member name="F:Tweetinvi.RateLimitTrackerMode.None">
            <summary>
            By default Tweetinvi let you handle the RateLimits on your own
            </summary>
        </member>
        <member name="F:Tweetinvi.RateLimitTrackerMode.TrackAndAwait">
            <summary>
            This option will track the actions performed and update the internal RateLimits.
            If not enought RateLimits are available to perform the query, the current thread will
            await for the RateLimits to be available before continuing its process.
            </summary>
        </member>
        <member name="F:Tweetinvi.RateLimitTrackerMode.TrackOnly">
            <summary>
            This option will only track the actions performed and update the internal RateLimits.
            This option won't pause a thread if you do not have enough RateLimits to perform a query.
            </summary>
        </member>
        <member name="T:Tweetinvi.TweetMode">
            <summary>
            Specify whether you want your tweet to use Twitter extended mode.
            </summary>
        </member>
        <member name="P:Tweetinvi.ITweetinviSettings.ProxyConfig">
            <summary>
            Proxy used to execute Http Requests.
            </summary>
        </member>
        <member name="P:Tweetinvi.ITweetinviSettings.HttpRequestTimeout">
            <summary>
            Http Requests Timeout duration in milliseconds.
            </summary>
        </member>
        <member name="P:Tweetinvi.ITweetinviSettings.RateLimitTrackerMode">
            <summary>
            Solution used to track the RateLimits.
            </summary>
        </member>
        <member name="P:Tweetinvi.ITweetinviSettings.RateLimitWaitFudge">
            <summary>
            How much additional time to wait than should be strictly necessary for a new batch of Twitter rate limits
            to be available. Required to account for timing discrepancies both within Twitter's servers and between
            Twitter and us.
            </summary>
        </member>
        <member name="P:Tweetinvi.ITweetinviSettings.TweetMode">
            <summary>
            Specify whether you want your tweet to use the extended mode.
            </summary>
        </member>
        <member name="P:Tweetinvi.ITweetinviSettings.GetUtcDateTime">
            <summary>
            A method allowing developers to specify how to retrieve the current DateTime.
            The DateTime must be valid for the HttpRequest signature to be accepted by Twitter.
            </summary>
        </member>
        <member name="P:Tweetinvi.ITweetinviSettings.Converters">
            <summary>
            Converters used by Tweetinvi to transform json received from Twitter
            into models understandable by Tweetinvi.
            </summary>
        </member>
        <member name="P:Tweetinvi.ITweetinviSettings.Limits">
            <summary>
            Limits that Tweetinvi will use to communicate with Twitter
            </summary>
        </member>
        <member name="M:Tweetinvi.ITweetinviSettings.Initialize(Tweetinvi.ITweetinviSettings)">
            <summary>
            Initialize a setting from another one.
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.ACCOUNT_GET_RELATIONSHIPS_WITH_MAX_SIZE">
            <summary>
            Maximum number of users friendship that can retrieved in 1 request
            <para>https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-lookup</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.ACCOUNT_GET_USER_IDS_REQUESTING_FRIENDSHIP_MAX_PAGE_SIZE">
            <summary>
            Maximum number of user ids that can be retrieved in 1 request
            <para>https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-incoming</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.ACCOUNT_GET_REQUESTED_USER_IDS_TO_FOLLOW_MAX_PAGE_SIZE">
            <summary>
            Maximum number of user ids that can be retrieved in 1 request
            <para>https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-outgoing</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.ACCOUNT_GET_BLOCKED_USER_IDS_MAX_PAGE_SIZE">
            <summary>
            Maximum number of user ids that can be retrieved in 1 request
            <para>https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/get-blocks-ids</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.ACCOUNT_GET_MUTED_USER_IDS_MAX_PAGE_SIZE">
            <summary>
            Maximum number of user ids that can be retrieved in 1 request
            <para>https://developer.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-ids</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.ACCOUNT_GET_MUTED_USERS_MAX_PAGE_SIZE">
            <summary>
            Maximum number of users that can be retrieved in 1 request
            <para>https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/get-blocks-list</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.ACCOUNT_SETTINGS_PROFILE_NAME_MAX_LENGTH">
            <summary>
            Max length of the profile's name
            <para>https://twitter.com/settings/profile</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.ACCOUNT_SETTINGS_PROFILE_DESCRIPTION_MAX_LENGTH">
            <summary>
            Max length of the profile's bio/description
            <para>https://twitter.com/settings/profile</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.ACCOUNT_SETTINGS_PROFILE_LOCATION_MAX_LENGTH">
            <summary>
            Max length of the profile's location
            <para>https://twitter.com/settings/profile</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.ACCOUNT_SETTINGS_PROFILE_WEBSITE_URL_MAX_LENGTH">
            <summary>
            Max length of the profile's website url
            <para>https://twitter.com/settings/profile</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.ACCOUNT_GET_BLOCKED_USER_MAX_PAGE_SIZE">
            <summary>
            Maximum number of users that can be retrieved in 1 request
            <para>https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/get-blocks-list</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.LISTS_CREATE_NAME_MAX_SIZE">
            <summary>
            Maximum number of users that can be retrieved in 1 request
            <para>https://dev.twitter.com/en/docs/accounts-and-users/mute-block-report-users/api-reference/get-blocks-list</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.LISTS_GET_USER_OWNED_LISTS_MAX_SIZE">
            <summary>
            Maximum number of lists that can be retrieved in 1 request
            <para>https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-ownerships</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.LISTS_GET_TWEETS_MAX_PAGE_SIZE">
            <summary>
            Maximum number of tweets that can be retrieved from a list in 1 request
            <para>https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-statuses</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.LISTS_GET_USER_MEMBERSHIPS_MAX_PAGE_SIZE">
            <summary>
            Maximum number of lists that can be retrieved in 1 request
            <para>https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-memberships</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.LISTS_ADD_MEMBERS_MAX_USERS">
            <summary>
            Maximum number of users that can be added to a list in 1 request
            <para>https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-members-create_all</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.LISTS_REMOVE_MEMBERS_MAX_USERS">
            <summary>
            Maximum number of users that can be removed from a list in 1 request
            <para>https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/post-lists-members-destroy_all</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.LISTS_GET_MEMBERS_MAX_PAGE_SIZE">
            <summary>
            Maximum number of members that can be retrieved in 1 request
            <para>https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-members</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.LISTS_GET_SUBSCRIBERS_MAX_PAGE_SIZE">
            <summary>
            Maximum number of subscribers that can be retrieved in 1 request
            <para>https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.LISTS_GET_USER_SUBSCRIPTIONS_MAX_PAGE_SIZE">
            <summary>
            Maximum number of subscribers that can be retrieved in 1 request
            <para>https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-subscriptions</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.MESSAGES_GET_MAX_PAGE_SIZE">
            <summary>
            Maximum number of messages that can be retrieved in 1 request
            <para>https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/api-reference/list-events</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.MESSAGE_MAX_SIZE">
            <summary>
            Maximum number characters in 1 message
            <para>https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/api-reference/new-event</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.MESSAGE_QUICK_REPLY_MAX_OPTIONS">
            <summary>
            Maximum number of options offered in 1 message
            <para>https://developer.twitter.com/en/docs/direct-messages/quick-replies/api-reference/options</para>
            </summary>
        </member>
        <member name="F:Tweetinvi.TwitterLimits.MESSAGE_QUICK_REPLY_LABEL_MAX_LENGTH">
            <summary>
            Maximum size of label per option
            <para>https://developer.twitter.com/en/docs/direct-messages/quick-replies/api-reference/options</para>
            </summary>
        </member>
        <member name="F:Tweetinvi.TwitterLimits.MESSAGE_QUICK_REPLY_DESCRIPTION_MAX_LENGTH">
            <summary>
            Maximum size of description per option
            <para>https://developer.twitter.com/en/docs/direct-messages/quick-replies/api-reference/options</para>
            </summary>
        </member>
        <member name="F:Tweetinvi.TwitterLimits.MESSAGE_QUICK_REPLY_METADATA_MAX_LENGTH">
            <summary>
            Maximum size of metadata per option
            <para>https://developer.twitter.com/en/docs/direct-messages/quick-replies/api-reference/options</para>
            </summary>
        </member>
        <member name="F:Tweetinvi.TwitterLimits.SEARCH_TWEETS_MAX_PAGE_SIZE">
            <summary>
            Maximum number of tweets to retrieve in 1 request
            <para>https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets</para>
            </summary>
        </member>
        <member name="F:Tweetinvi.TwitterLimits.SEARCH_USERS_MAX_PAGE_SIZE">
            <summary>
            Maximum number of users to retrieve in 1 request
            <para>https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-users-search</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.TIMELINE_HOME_PAGE_MAX_PAGE_SIZE">
            <summary>
            Maximum number of tweets to retrieve in 1 request
            <para>https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-home_timeline</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.TIMELINE_MENTIONS_PAGE_MAX_PAGE_SIZE">
            <summary>
            Maximum number of tweets to retrieve in 1 request
            <para>https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-mentions_timeline</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.TIMELINE_RETWEETS_OF_ME_MAX_PAGE_SIZE">
            <summary>
            Maximum number of tweets to retrieve in 1 request
            <para>https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweets_of_me</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.TIMELINE_USER_PAGE_MAX_PAGE_SIZE">
            <summary>
            Maximum number of tweets to retrieve in 1 request
            <para>https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-user_timeline</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.TWEETS_GET_FAVORITE_TWEETS_MAX_SIZE">
            <summary>
            Maximum number of favorites that can be retrieved in 1 request
            <para>https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-favorites-list</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.TWEETS_GET_RETWEETS_MAX_SIZE">
            <summary>
            Maximum number of retweets that can be retrieved in 1 request
            <para>https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweets-id</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.TWEETS_GET_RETWEETER_IDS_MAX_PAGE_SIZE">
            <summary>
            Maximum number of retweeter ids that can be retrieved in 1 request
            <para>https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.TWEETS_GET_TWEETS_REQUEST_MAX_SIZE">
            <summary>
            Maximum number of tweets that can be retrieved in 1 request
            <para>https://dev.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-lookup</para>
            </summary>
        </member>
        <member name="F:Tweetinvi.TwitterLimits.UPLOAD_MAX_IMAGE_SIZE">
            <summary>
            Max size of an image
            </summary>
        </member>
        <member name="F:Tweetinvi.TwitterLimits.UPLOAD_MAX_VIDEO_SIZE">
            <summary>
            Max size of a video
            </summary>
        </member>
        <member name="F:Tweetinvi.TwitterLimits.UPLOAD_MAX_CHUNK_SIZE">
            <summary>
            Max size of an upload chunk
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.USERS_GET_USERS_MAX_SIZE">
            <summary>
            Maximum number of users that can be retrieved in 1 request
            <para>https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.USERS_GET_FOLLOWER_IDS_PAGE_MAX_SIZE">
            <summary>
            Maximum number of follower ids that can be retrieved in 1 request
            <para>https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids</para>
            </summary>
        </member>
        <member name="P:Tweetinvi.TwitterLimits.USERS_GET_FRIEND_IDS_PAGE_MAX_SIZE">
            <summary>
            Maximum number of friend ids that can be retrieved in 1 request
            <para>https://dev.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids</para>
            </summary>
        </member>
        <member name="T:Tweetinvi.Streaming.IAccountActivityStream">
            <summary>
            An AccountActivity stream from Twitter (https://developer.twitter.com/en/docs/accounts-and-users/subscribe-account-activity/overview)
            The stream is linked with a specific user account and raise account related events.
            </summary>
        </member>
        <member name="P:Tweetinvi.Streaming.IAccountActivityStream.AccountUserId">
            <summary>
            The account user id. This property should not be modified by users.
            </summary>
        </member>
        <member name="P:Tweetinvi.Streaming.IAccountActivityStream.TweetCreated">
            <summary>
            A Tweet has been been created.
            </summary>
        </member>
        <member name="P:Tweetinvi.Streaming.IAccountActivityStream.TweetDeleted">
            <summary>
            A Tweet has been deleted
            </summary>
        </member>
        <member name="P:Tweetinvi.Streaming.IAccountActivityStream.TweetFavorited">
            <summary>
            A Tweet has been Favorited
            </summary>
        </member>
        <member name="P:Tweetinvi.Streaming.IAccountActivityStream.UserFollowed">
            <summary>
            Account user is now following another user
            </summary>
        </member>
        <member name="P:Tweetinvi.Streaming.IAccountActivityStream.UserUnfollowed">
            <summary>
            Account user has stopped following another user
            </summary>
        </member>
        <member name="P:Tweetinvi.Streaming.IAccountActivityStream.UserBlocked">
            <summary>
            Account user has blocked another user
            </summary>
        </member>
        <member name="P:Tweetinvi.Streaming.IAccountActivityStream.UserUnblocked">
            <summary>
            Account user has unblocked another user
            </summary>
        </member>
        <member name="P:Tweetinvi.Streaming.IAccountActivityStream.UserMuted">
            <summary>
            Account user has muted another user
            </summary>
        </member>
        <member name="P:Tweetinvi.Streaming.IAccountActivityStream.UserUnmuted">
            <summary>
            Account user has unmuted another user
            </summary>
        </member>
        <member name="P:Tweetinvi.Streaming.IAccountActivityStream.MessageReceived">
            <summary>
            Account user has received a message
            </summary>
        </member>
        <member name="P:Tweetinvi.Streaming.IAccountActivityStream.MessageSent">
            <summary>
            Account user has sent a message
            </summary>
        </member>
        <member name="P:Tweetinvi.Streaming.IAccountActivityStream.UserIsTypingMessage">
            <summary>
            A user is typing in a conversation with the account user
            </summary>
        </member>
        <member name="P:Tweetinvi.Streaming.IAccountActivityStream.UserReadMessageConversation">
            <summary>
            A user has read a message from the account user
            </summary>
        </member>
        <member name="P:Tweetinvi.Streaming.IAccountActivityStream.UserRevokedAppPermissions">
            <summary>
            Revoke events sent when the account user removes application authorization and subscription is automatically deleted.
            </summary>
        </member>
        <member name="P:Tweetinvi.Streaming.IAccountActivityStream.EventReceived">
            <summary>
            Reports that an event has been received
            </summary>
        </member>
        <member name="P:Tweetinvi.Streaming.IAccountActivityStream.UnsupportedEventReceived">
            <summary>
            Reports that an event that Tweetinvi does not understand has been received.
            Please report such event to us.
            </summary>
        </member>
        <member name="P:Tweetinvi.Streaming.IAccountActivityStream.EventKnownButNotFullySupportedReceived">
            <summary>
            The type of event is known by Tweetinvi but we could not identify why the event was created.
            Please report such event to us.
            </summary>
        </member>
        <member name="P:Tweetinvi.Streaming.IAccountActivityStream.UnexpectedExceptionThrown">
            <summary>
            An unexpected error was thrown.
            </summary>
        </member>
        <member name="M:Tweetinvi.Streaming.IAccountActivityStream.WebhookMessageReceived(Tweetinvi.Models.IWebhookMessage)">
            <summary>
            For internal use : this is how we inform an account activity stream
            that an even has occurred.
            </summary>
        </member>
        <member name="E:Tweetinvi.Streaming.IFilteredStream.MatchingTweetReceived">
            <summary>
            Tweet matching the specified filter criteria has been received.
            </summary>
        </member>
        <member name="E:Tweetinvi.Streaming.IFilteredStream.NonMatchingTweetReceived">
            <summary>
            Tweet not matching the specified filters has been received.
            </summary>
        </member>
        <member name="P:Tweetinvi.Streaming.IFilteredStream.MatchOn">
            <summary>
            Specify the fields that need to be used to filter the stream.
            </summary>
        </member>
        <member name="M:Tweetinvi.Streaming.IFilteredStream.StartMatchingAnyConditionAsync">
            <summary>
            A tweet will match if ANY of the global parameters are successfully been matched.
            { 'Track' OR 'Location' OR 'Follower' }.
            </summary>
        </member>
        <member name="M:Tweetinvi.Streaming.IFilteredStream.StartMatchingAllConditionsAsync">
            <summary>
            A tweet will match if ALL of the global parameters are successfully been matched.
            { 'Track' AND 'Location' AND 'Follower' }.
            </summary>
        </member>
        <member name="P:Tweetinvi.Streaming.IFilteredStream.FollowingUserIds">
            <summary>
            List of UserId followed by the stream
            </summary>
        </member>
        <member name="M:Tweetinvi.Streaming.IFilteredStream.AddFollow(System.Int64,System.Action{Tweetinvi.Models.ITweet})">
            <summary>
            Follow a specific userId
            </summary>
        </member>
        <member name="M:Tweetinvi.Streaming.IFilteredStream.AddFollow(Tweetinvi.Models.IUserIdentifier,System.Action{Tweetinvi.Models.ITweet})">
            <summary>
            Follow a specific user
            </summary>
        </member>
        <member name="M:Tweetinvi.Streaming.IFilteredStream.RemoveFollow(System.Int64)">
            <summary>
            Unfollow a specific userId
            </summary>
        </member>
        <member name="M:Tweetinvi.Streaming.IFilteredStream.RemoveFollow(Tweetinvi.Models.IUserIdentifier)">
            <summary>
            Unfollow a specific user
            </summary>
        </member>
        <member name="M:Tweetinvi.Streaming.IFilteredStream.ContainsFollow(System.Int64)">
            <summary>
            Tells you whether you are following a userId
            </summary>
        </member>
        <member name="M:Tweetinvi.Streaming.IFilteredStream.ContainsFollow(Tweetinvi.Models.IUserIdentifier)">
            <summary>
            Tells you whether you are following a user
            </summary>
        </member>
        <member name="M:Tweetinvi.Streaming.IFilteredStream.ClearFollows">
            <summary>
            Unfollow all the currently followed users
            </summary>
        </member>
        <member name="P:Tweetinvi.Streaming.IFilteredStream.Locations">
            <summary>
            List of locations analyzed by the stream
            </summary>
        </member>
        <member name="M:Tweetinvi.Streaming.IFilteredStream.AddLocation(Tweetinvi.Models.ILocation,System.Action{Tweetinvi.Models.ITweet})">
            <summary>
            Add a location for the stream to analyze
            </summary>
        </member>
        <member name="M:Tweetinvi.Streaming.IFilteredStream.AddLocation(Tweetinvi.Models.ICoordinates,Tweetinvi.Models.ICoordinates,System.Action{Tweetinvi.Models.ITweet})">
            <summary>
            Add a location for the stream to analyze
            </summary>
        </member>
        <member name="M:Tweetinvi.Streaming.IFilteredStream.RemoveLocation(Tweetinvi.Models.ILocation)">
            <summary>
            Remove a location for the stream to analyze
            </summary>
        </member>
        <member name="M:Tweetinvi.Streaming.IFilteredStream.RemoveLocation(Tweetinvi.Models.ICoordinates,Tweetinvi.Models.ICoordinates)">
            <summary>
            Remove a location for the stream to analyze
            </summary>
        </member>
        <member name="M:Tweetinvi.Streaming.IFilteredStream.ContainsLocation(Tweetinvi.Models.ILocation)">
            <summary>
            Tells you whether you are analyzing a specific location
            </summary>
        </member>
        <member name="M:Tweetinvi.Streaming.IFilteredStream.ContainsLocation(Tweetinvi.Models.ICoordinates,Tweetinvi.Models.ICoordinates)">
            <summary>
            Tells you whether you are analyzing a specific location
            </summary>
        </member>
        <member name="M:Tweetinvi.Streaming.IFilteredStream.ClearLocations">
            <summary>
            Remove all the currently analyzed locations
            </summary>
        </member>
        <member name="M:Tweetinvi.Streaming.IFilteredStream.CheckIfTweetMatchesStreamFilters(Tweetinvi.Models.ITweet)">
            <summary>
            For any tweet you have this method allow you to know if it would be matched by the Strem
            </summary>
        </member>
        <member name="E:Tweetinvi.Streaming.ISampleStream.TweetReceived">
            <summary>
            A tweet has been received.
            </summary>
        </member>
        <member name="M:Tweetinvi.Streaming.ISampleStream.StartAsync">
            <summary>
            Start a stream ASYNCHRONOUSLY. The task will complete when the stream stops.
            </summary>
        </member>
        <member name="T:Tweetinvi.Streaming.MatchOn">
            <summary>
            For more information regarding how Twitter matches the FilteredStream filters please visit
            https://dev.twitter.com/streaming/overview/request-parameters.
            </summary>
        </member>
        <member name="F:Tweetinvi.Streaming.MatchOn.None">
            <summary>
            Nothing to match.
            </summary>
        </member>
        <member name="F:Tweetinvi.Streaming.MatchOn.Everything">
            <summary>
            Match on all the fields used by Twitter filter stream.
            </summary>
        </member>
        <member name="F:Tweetinvi.Streaming.MatchOn.TweetText">
            <summary>
            The tweet text matches a track you follow.
            </summary>
        </member>
        <member name="F:Tweetinvi.Streaming.MatchOn.Follower">
            <summary>
            The follower is the person who sent the tweet.
            </summary>
        </member>
        <member name="F:Tweetinvi.Streaming.MatchOn.TweetLocation">
            <summary>
            The tweet location has matched a location you follow.
            </summary>
        </member>
        <member name="F:Tweetinvi.Streaming.MatchOn.FollowerInReplyTo">
            <summary>
            When a tweet is sent directly to a follower of your list.
            </summary>
        </member>
        <member name="F:Tweetinvi.Streaming.MatchOn.AllEntities">
            <summary>
            The tweet entities matches a track you follow.
            </summary>
        </member>
        <member name="F:Tweetinvi.Streaming.MatchOn.URLEntities">
            <summary>
            The track matches the text contained within a URL of a link or a media.
            </summary>
        </member>
        <member name="F:Tweetinvi.Streaming.MatchOn.HashTagEntities">
            <summary>
            The track matches the text contained within a Hashtag.
            </summary>
        </member>
        <member name="F:Tweetinvi.Streaming.MatchOn.UserMentionEntities">
            <summary>
            The track matches the text contained within a user mention.
            </summary>
        </member>
        <member name="F:Tweetinvi.Streaming.MatchOn.SymbolEntities">
            <summary>
            The track matches the text contained within a symbol.
            </summary>
        </member>
        <member name="T:Tweetinvi.Streaming.Parameters.StreamFilterLevel">
            <summary>
            Level you want to use to filter tweets containing violence, sex or any sensible subjects.
            None meaning that you accept ALL the tweets.
            https://dev.twitter.com/streaming/overview/request-parameters#filter_level
            </summary>
        </member>
        <member name="T:Tweetinvi.Streaming.Parameters.WithFilterType">
            <summary>
            Filter the tweets based on their creator.
            https://dev.twitter.com/streaming/overview/request-parameters#with
            </summary>
        </member>
        <member name="F:Tweetinvi.Streaming.Parameters.WithFilterType.Followings">
            <summary>
            DEFAULT : User receives messages from himself and followers.
            (Twitter home timeline behavior)
            </summary>
        </member>
        <member name="F:Tweetinvi.Streaming.Parameters.WithFilterType.User">
            <summary>
            User receives messages that are related to himself exclusively.
            </summary>
        </member>
        <member name="T:Tweetinvi.Streaming.StreamState">
            <summary>
            Enumeration listing how the Stream is supposed to behave
            </summary>
        </member>
        <member name="F:Tweetinvi.Streaming.StreamState.Stop">
            <summary>
            The stream is not running.
            In this state the stream configuration can be changed.
            </summary>
        </member>
        <member name="F:Tweetinvi.Streaming.StreamState.Running">
            <summary>
            Stream is Running.
            </summary>
        </member>
        <member name="F:Tweetinvi.Streaming.StreamState.Pause">
            <summary>
            Stream is paused.
            The stream configuration cannot be changed in this state.
            </summary>
        </member>
        <member name="M:Tweetinvi.Streaming.V2.IFilteredStreamV2.StartAsync">
            <inheritdoc cref="M:Tweetinvi.Streaming.V2.IFilteredStreamV2.StartAsync(Tweetinvi.Parameters.V2.IStartFilteredStreamV2Parameters)"/>
        </member>
        <member name="M:Tweetinvi.Streaming.V2.IFilteredStreamV2.StartAsync(Tweetinvi.Parameters.V2.IStartFilteredStreamV2Parameters)">
            <summary>
            Start the stream asynchronously. The task will complete when the stream stops.
            </summary>
        </member>
        <member name="M:Tweetinvi.Streaming.V2.ISampleStreamV2.StartAsync">
            <inheritdoc cref="M:Tweetinvi.Streaming.V2.ISampleStreamV2.StartAsync(Tweetinvi.Parameters.V2.IStartSampleStreamV2Parameters)"/>
        </member>
        <member name="M:Tweetinvi.Streaming.V2.ISampleStreamV2.StartAsync(Tweetinvi.Parameters.V2.IStartSampleStreamV2Parameters)">
            <summary>
            Start the stream asynchronously. The task will complete when the stream stops.
            </summary>
        </member>
        <member name="T:Tweetinvi.TweetinviConsts">
            <summary>
            Application wide constants.
            </summary>
        </member>
    </members>
</doc>
